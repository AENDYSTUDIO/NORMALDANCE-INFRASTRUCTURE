/**
 * üéµ NormalDance AMM System 2025 - Music-Enhanced Hybrid Algorithms
 * 
 * –†–µ–∞–ª–∏–∑—É–µ—Ç –≥–∏–±—Ä–∏–¥–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã AMM —Å –º—É–∑—ã–∫–∞–ª—å–Ω–æ–π —Ç–µ–º–∞—Ç–∏–∫–æ–π:
 * - "Harmony Mode" (CPMM) - –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
 * - "Beat Drop Mode" (CSMM) - –¥–ª—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
 * - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å NFT —Ç—Ä–µ–∫–∞–º–∏ –∏ —Ä–æ—è–ª—Ç–∏
 */

export interface AMMConfig {
  volatilityThreshold: number // –ü–æ—Ä–æ–≥ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è (10%)
  priceImpactThreshold: number // –ü–æ—Ä–æ–≥ —Ü–µ–Ω–æ–≤–æ–≥–æ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è (5%)
  stabilityWindow: number // –û–∫–Ω–æ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –≤ –º—Å (300000 = 5 –º–∏–Ω)
  emergencyThreshold: number // –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π –ø–æ—Ä–æ–≥ (20%)
}

export interface SwapParams {
  from: 'TON' | 'NDT'
  to: 'TON' | 'NDT'
  amount: number
  slippage: number
  maxPriceImpact?: number
}

export interface SwapResult {
  outputAmount: number
  priceImpact: number
  algorithm: 'HARMONY' | 'BEAT_DROP' | 'MIXED' // –ú—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
  fee: number
  executionTime: number
  volatility: number
  musicBonus?: number // –ë–æ–Ω—É—Å –∑–∞ —Ç–æ—Ä–≥–æ–≤–ª—é –≤–æ –≤—Ä–µ–º—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤
  artistReward?: number // –ù–∞–≥—Ä–∞–¥–∞ –∞—Ä—Ç–∏—Å—Ç—É –∑–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å
}

export interface LiquidityPool {
  tonReserve: number
  ndtReserve: number
  totalLiquidity: number
  lastUpdate: number
  volatility: number
  priceHistory: PricePoint[]
}

interface PricePoint {
  timestamp: number
  price: number
  volume: number
}

export class AdvancedAMM {
  private config: AMMConfig
  private pools: Map<string, LiquidityPool> = new Map()
  private priceHistory: Map<string, PricePoint[]> = new Map()

  constructor(config: Partial<AMMConfig> = {}) {
    this.config = {
      volatilityThreshold: 10, // 10%
      priceImpactThreshold: 5, // 5%
      stabilityWindow: 300000, // 5 –º–∏–Ω—É—Ç
      emergencyThreshold: 20, // 20%
      ...config
    }
  }

  /**
   * üéØ –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —Å–≤–æ–ø–∞ —Å –≥–∏–±—Ä–∏–¥–Ω—ã–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º
   */
  async executeSwap(params: SwapParams, pool: LiquidityPool): Promise<SwapResult> {
    const startTime = Date.now()
    
    // 1. –ê–Ω–∞–ª–∏–∑ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
    const volatility = this.calculateVolatility(pool)
    
    // 2. –í—ã–±–æ—Ä –∞–ª–≥–æ—Ä–∏—Ç–º–∞
    const algorithm = this.selectAlgorithm(volatility, params.amount, pool)
    
    // 3. –†–∞—Å—á–µ—Ç –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    let outputAmount: number
    let priceImpact: number
    
    switch (algorithm) {
      case 'HARMONY':
        ({ outputAmount, priceImpact } = this.calculateHarmonyMode(params, pool))
        break
      case 'BEAT_DROP':
        ({ outputAmount, priceImpact } = this.calculateBeatDropMode(params, pool))
        break
      case 'MIXED':
        ({ outputAmount, priceImpact } = this.calculateMixedMode(params, pool, volatility))
        break
    }
    
    // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
    this.validateSwap(params, outputAmount, priceImpact, pool)
    
    // 5. –†–∞—Å—á–µ—Ç –∫–æ–º–∏—Å—Å–∏–∏
    const fee = this.calculateFee(params.amount, algorithm, volatility)
    
    const executionTime = Date.now() - startTime
    
    return {
      outputAmount,
      priceImpact,
      algorithm,
      fee,
      executionTime,
      volatility
    }
  }

  /**
   * üìä –†–∞—Å—á–µ—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω
   */
  private calculateVolatility(pool: LiquidityPool): number {
    const history = pool.priceHistory
    // –ï—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –ø—É–ª–∞
    if (history.length < 2) return pool.volatility || 0

    const recent = history.slice(-10) // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ç–æ—á–µ–∫
    const prices = recent.map(p => p.price)
    
    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
    const mean = prices.reduce((a, b) => a + b, 0) / prices.length
    const variance = prices.reduce((sum, price) => sum + Math.pow(price - mean, 2), 0) / prices.length
    const stdDev = Math.sqrt(variance)
    
    // –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
    return (stdDev / mean) * 100
  }

  /**
   * üéµ –í—ã–±–æ—Ä –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ (–º—É–∑—ã–∫–∞–ª—å–Ω–∞—è —Ç–µ–º–∞—Ç–∏–∫–∞)
   */
  private selectAlgorithm(volatility: number, amount: number, pool: LiquidityPool): 'HARMONY' | 'BEAT_DROP' | 'MIXED' {
    // –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è - –≤—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å = Beat Drop Mode
    if (volatility > this.config.emergencyThreshold) {
      return 'BEAT_DROP' // –°—Ç–∞–±–∏–ª–∏–∑–∏—Ä—É—é—â–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è "–≤–∑—Ä—ã–≤–Ω—ã—Ö" –º–æ–º–µ–Ω—Ç–æ–≤
    }
    
    // –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å - Mixed Mode (–º–∏–∫—Å —Ç—Ä–µ–∫–æ–≤)
    if (volatility > this.config.volatilityThreshold) {
      return 'MIXED'
    }
    
    // –ë–æ–ª—å—à–∏–µ –æ–±—ä–µ–º—ã - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω–æ–≤–æ–µ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ
    const estimatedImpact = this.estimatePriceImpact(amount, pool)
    if (estimatedImpact > this.config.priceImpactThreshold) {
      return 'MIXED'
    }
    
    // –û–±—ã—á–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è - Harmony Mode (–≥–∞—Ä–º–æ–Ω–∏—á–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è)
    return 'HARMONY'
  }

  /**
   * üéµ Harmony Mode - Constant Product Market Maker (–≥–∞—Ä–º–æ–Ω–∏—á–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è)
   */
  private calculateHarmonyMode(params: SwapParams, pool: LiquidityPool): { outputAmount: number, priceImpact: number } {
    const { from, to, amount } = params
    const { tonReserve, ndtReserve } = pool
    
    let inputReserve: number
    let outputReserve: number
    
    if (from === 'TON' && to === 'NDT') {
      inputReserve = tonReserve
      outputReserve = ndtReserve
    } else {
      inputReserve = ndtReserve
      outputReserve = tonReserve
    }
    
    // –§–æ—Ä–º—É–ª–∞ x * y = k
    const k = inputReserve * outputReserve
    const newInputReserve = inputReserve + amount
    const newOutputReserve = k / newInputReserve
    const outputAmount = outputReserve - newOutputReserve
    
    // –¶–µ–Ω–æ–≤–æ–µ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ
    const priceBefore = outputReserve / inputReserve
    const priceAfter = newOutputReserve / newInputReserve
    const priceImpact = Math.abs((priceAfter - priceBefore) / priceBefore) * 100
    
    return { outputAmount, priceImpact }
  }

  /**
   * üéß Beat Drop Mode - Constant Sum Market Maker (—Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—è –≤–æ –≤—Ä–µ–º—è "–≤–∑—Ä—ã–≤–Ω—ã—Ö" –º–æ–º–µ–Ω—Ç–æ–≤)
   */
  private calculateBeatDropMode(params: SwapParams, pool: LiquidityPool): { outputAmount: number, priceImpact: number } {
    const { from, to, amount } = params
    const { tonReserve, ndtReserve } = pool
    
    // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫—É—Ä—Å –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
    const stableRate = ndtReserve / tonReserve
    const outputAmount = amount * stableRate
    
    // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ü–µ–Ω–æ–≤–æ–µ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ
    const priceImpact = 0.1 // 0.1% –¥–ª—è CSMM
    
    return { outputAmount, priceImpact }
  }

  /**
   * üé∂ Mixed Mode - –ì–∏–±—Ä–∏–¥–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º (–º–∏–∫—Å —Ç—Ä–µ–∫–æ–≤ –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏)
   */
  private calculateMixedMode(params: SwapParams, pool: LiquidityPool, volatility: number): { outputAmount: number, priceImpact: number } {
    const { from, to, amount } = params
    
    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç –æ–±–æ–∏—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤
    const harmonyResult = this.calculateHarmonyMode(params, pool)
    const beatDropResult = this.calculateBeatDropMode(params, pool)
    
    // –í–µ—Å–æ–≤–æ–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ (–∫–∞–∫ –≥—Ä–æ–º–∫–æ—Å—Ç—å –≤ –º–∏–∫—Å–µ)
    const volatilityWeight = Math.min(volatility / this.config.volatilityThreshold, 1)
    
    // –õ–∏–Ω–µ–π–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –º–µ–∂–¥—É –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏ (–∫–∞–∫ crossfade –≤ DJ –º–∏–∫—Å–µ)
    const outputAmount = harmonyResult.outputAmount * (1 - volatilityWeight) + 
                        beatDropResult.outputAmount * volatilityWeight
    
    const priceImpact = harmonyResult.priceImpact * (1 - volatilityWeight) + 
                       beatDropResult.priceImpact * volatilityWeight
    
    return { outputAmount, priceImpact }
  }

  /**
   * üí∞ –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–æ–º–∏—Å—Å–∏–π
   */
  private calculateFee(amount: number, algorithm: string, volatility: number): number {
    let baseFee = 0.0025 // 0.25% –±–∞–∑–æ–≤–∞—è –∫–æ–º–∏—Å—Å–∏—è
    
    // –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–∏ –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
    if (volatility > this.config.volatilityThreshold) {
      baseFee *= 1.5 // +50% –ø—Ä–∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
    }
    
    // –°–Ω–∏–∂–µ–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–∏ –¥–ª—è Beat Drop Mode (—Å—Ç–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏)
    if (algorithm === 'BEAT_DROP') {
      baseFee *= 0.8 // -20% –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä—É—é—â–∏—Ö —Å–≤–æ–ø–æ–≤
    }
    
    return amount * baseFee
  }

  /**
   * üìà –û—Ü–µ–Ω–∫–∞ —Ü–µ–Ω–æ–≤–æ–≥–æ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è
   */
  private estimatePriceImpact(amount: number, pool: LiquidityPool): number {
    const { tonReserve, ndtReserve } = pool
    const totalReserve = tonReserve + ndtReserve
    const impact = (amount / totalReserve) * 100
    return impact
  }

  /**
   * ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–≤–æ–ø–∞
   */
  private validateSwap(params: SwapParams, outputAmount: number, priceImpact: number, pool: LiquidityPool): void {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ slippage –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∫—É—Ä—Å–∞ –∏–∑ –ø—É–ª–∞
    const currentRate = this.getCurrentRate(params.from, params.to, pool)
    const expectedOutput = params.amount * currentRate
    const slippageAmount = expectedOutput * (params.slippage / 100)
    const minOutput = expectedOutput - slippageAmount
    
    if (outputAmount < minOutput) {
      throw new Error(`Slippage tolerance exceeded. Expected: ${expectedOutput.toFixed(2)}, Got: ${outputAmount.toFixed(2)}`)
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ü–µ–Ω–æ–≤–æ–≥–æ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è
    if (params.maxPriceImpact && priceImpact > params.maxPriceImpact) {
      throw new Error(`Price impact too high: ${priceImpact.toFixed(2)}%`)
    }
  }

  /**
   * üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∫—É—Ä—Å–∞ –∏–∑ –ø—É–ª–∞
   */
  private getCurrentRate(from: 'TON' | 'NDT', to: 'TON' | 'NDT', pool: LiquidityPool): number {
    if (from === 'TON' && to === 'NDT') {
      return pool.ndtReserve / pool.tonReserve
    } else if (from === 'NDT' && to === 'TON') {
      return pool.tonReserve / pool.ndtReserve
    }
    return 1
  }

  /**
   * üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—É–ª–∞ –ø–æ—Å–ª–µ —Å–≤–æ–ø–∞
   */
  updatePool(poolId: string, params: SwapParams, result: SwapResult): LiquidityPool {
    const pool = this.pools.get(poolId)
    if (!pool) throw new Error('Pool not found')
    
    const { from, to, amount } = params
    const { outputAmount } = result
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑–µ—Ä–≤—ã
    if (from === 'TON' && to === 'NDT') {
      pool.tonReserve += amount
      pool.ndtReserve -= outputAmount
    } else {
      pool.tonReserve -= outputAmount
      pool.ndtReserve += amount
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω
    const currentPrice = pool.ndtReserve / pool.tonReserve
    pool.priceHistory.push({
      timestamp: Date.now(),
      price: currentPrice,
      volume: amount
    })
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 100 —Ç–æ—á–∫–∞–º–∏
    if (pool.priceHistory.length > 100) {
      pool.priceHistory = pool.priceHistory.slice(-100)
    }
    
    pool.lastUpdate = Date.now()
    pool.volatility = result.volatility
    
    this.pools.set(poolId, pool)
    return pool
  }

  /**
   * üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø—É–ª–∞
   */
  getPoolAnalytics(poolId: string) {
    const pool = this.pools.get(poolId)
    if (!pool) return null
    
    return {
      currentPrice: pool.ndtReserve / pool.tonReserve,
      volatility: pool.volatility,
      totalLiquidity: pool.totalLiquidity,
      priceHistory: pool.priceHistory.slice(-24), // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 24 —Ç–æ—á–∫–∏
      algorithm: this.selectAlgorithm(pool.volatility, 0, pool),
      stabilityScore: this.calculateStabilityScore(pool)
    }
  }

  /**
   * üéØ –†–∞—Å—á–µ—Ç –∏–Ω–¥–µ–∫—Å–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
   */
  private calculateStabilityScore(pool: LiquidityPool): number {
    const volatility = pool.volatility
    const liquidity = pool.totalLiquidity
    
    // –ò–Ω–¥–µ–∫—Å –æ—Ç 0 –¥–æ 100 (100 = –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å)
    const volatilityScore = Math.max(0, 100 - volatility * 5)
    const liquidityScore = Math.min(100, liquidity / 10000) // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
    
    return (volatilityScore + liquidityScore) / 2
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–æ–≤ –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
export { AdvancedAMM }
export type { AMMConfig, SwapParams, SwapResult, LiquidityPool, PricePoint }

// –≠–∫—Å–ø–æ—Ä—Ç —Å–∏–Ω–≥–ª—Ç–æ–Ω–∞
export const advancedAMM = new AdvancedAMM()
