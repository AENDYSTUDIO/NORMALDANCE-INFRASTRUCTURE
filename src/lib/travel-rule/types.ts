/**
 * üåç Travel Rule Service - FATF Compliance Types
 *
 * –¢–∏–ø—ã –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ Travel Rule –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ FATF
 * –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö –º–µ–∂–¥—É VASP (Virtual Asset Service Providers)
 */

// ============================================================================
// –ë–∞–∑–æ–≤—ã–µ —Ç–∏–ø—ã Travel Rule
// ============================================================================

/**
 * –°—Ç–∞—Ç—É—Å—ã –ø–µ—Ä–µ–¥–∞—á–∏ Travel Rule
 */
export type TravelRuleStatus = 
  | "PENDING"           // –û–∂–∏–¥–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
  | "SENT"              // –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—É—á–∞—é—â–µ–º—É VASP
  | "RECEIVED"          // –ü–æ–ª—É—á–µ–Ω–æ –æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ VASP
  | "ACKNOWLEDGED"      // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –ø–æ–ª—É—á–µ–Ω–∏–µ–º
  | "COMPLETED"         // –ó–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
  | "FAILED"            // –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏
  | "REJECTED"          // –û—Ç–∫–ª–æ–Ω–µ–Ω–æ –ø–æ–ª—É—á–∞—é—â–∏–º VASP
  | "EXPIRED";          // –ò—Å—Ç–µ–∫–ª–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è

/**
 * –¢–∏–ø—ã VASP (Virtual Asset Service Providers)
 */
export type VASPType = 
  | "EXCHANGE"          // –ö—Ä–∏–ø—Ç–æ–±–∏—Ä–∂–∞
  | "CUSTODIAN"         // –ö–∞—Å—Ç–æ–¥–∏–∞–Ω
  | "TRANSFER_PROVIDER" // –ü—Ä–æ–≤–∞–π–¥–µ—Ä –ø–µ—Ä–µ–≤–æ–¥–æ–≤
  | "ATM_KIOSK"         // –ë–∞–Ω–∫–æ–º–∞—Ç/–∫–∏–æ—Å–∫
  | "WALLET_PROVIDER"   // –ü—Ä–æ–≤–∞–π–¥–µ—Ä –∫–æ—à–µ–ª—å–∫–æ–≤
  | "MINING_POOL"       // –ú–∞–π–Ω–∏–Ω–≥ –ø—É–ª
  | "DEFI_PROTOCOL"     // DeFi –ø—Ä–æ—Ç–æ–∫–æ–ª
  | "NFT_MARKETPLACE"   // NFT –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å
  | "GAMING_PLATFORM"  // –ò–≥—Ä–æ–≤–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞
  | "OTHER";            // –î—Ä—É–≥–æ–µ

/**
 * –£—Ä–æ–≤–Ω–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è Travel Rule
 */
export type TravelRuleVerificationLevel = 
  | "BASIC"             // –ë–∞–∑–æ–≤–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è
  | "STANDARD"          // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è
  | "ENHANCED";         // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è

// ============================================================================
// –û—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã Travel Rule
// ============================================================================

/**
 * –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ VASP
 */
export interface VASPInfo {
  id: string;
  name: string;
  type: VASPType;
  registrationNumber?: string;
  jurisdiction: string; // ISO 3166-1 alpha-2
  address: {
    street: string;
    city: string;
    state?: string;
    postalCode: string;
    country: string;
  };
  contact: {
    email: string;
    phone?: string;
    website?: string;
  };
  regulatoryStatus: {
    isRegistered: boolean;
    licenseNumber?: string;
    regulatorName?: string;
    registrationDate?: string;
  };
  technicalContact?: {
    name: string;
    email: string;
    phone?: string;
  };
  complianceOfficer?: {
    name: string;
    email: string;
    phone?: string;
  };
}

/**
 * –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤ (Source of Funds)
 */
export interface SourceOfFunds {
  type: "SALARY" | "BUSINESS_INCOME" | "INVESTMENT" | "INHERITANCE" | "GIFT" | "LOAN" | "CRYPTO_MINING" | "OTHER";
  description?: string;
  amount?: number;
  currency?: string;
  documents?: string[]; // IPFS —Ö—ç—à–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
}

/**
 * –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–µ–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (Purpose of Transaction)
 */
export interface PurposeOfTransaction {
  type: "PERSONAL_EXPENSES" | "BUSINESS_EXPENSES" | "INVESTMENT" | "SAVINGS" | "GIFT" | "CHARITY" | "OTHER";
  description?: string;
  expectedUse?: string;
}

/**
 * –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–æ—Ä–æ–Ω–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
 */
export interface TransactionParty {
  vaspInfo: VASPInfo;
  customerInfo: {
    naturalPerson?: {
      name: {
        firstName: string;
        middleName?: string;
        lastName: string;
      };
      dateOfBirth: string; // ISO 8601
      placeOfBirth: string;
      nationality: string; // ISO 3166-1 alpha-2
      addresses: Array<{
        street: string;
        city: string;
        state?: string;
        postalCode: string;
        country: string;
        type: "RESIDENTIAL" | "BUSINESS" | "MAILING";
      }>;
      identificationDocuments?: Array<{
        type: "PASSPORT" | "NATIONAL_ID" | "DRIVING_LICENSE";
        number: string;
        issuingCountry: string;
        issueDate: string;
        expiryDate?: string;
      }>;
      contactInformation: {
        email?: string;
        phoneNumber?: string;
      };
    };
    legalPerson?: {
      name: string;
      registrationNumber: string;
      incorporationDate: string;
      jurisdiction: string;
      address: {
        street: string;
        city: string;
        state?: string;
        postalCode: string;
        country: string;
      };
      beneficialOwners?: Array<{
        name: {
          firstName: string;
          lastName: string;
        };
        nationality: string;
        dateOfBirth: string;
      }>;
      contactInformation: {
        email?: string;
        phoneNumber?: string;
      };
    };
  };
  walletAddress: string;
  verificationLevel: TravelRuleVerificationLevel;
  riskAssessment?: {
    riskScore: number; // 0-100
    riskLevel: "LOW" | "MEDIUM" | "HIGH" | "CRITICAL";
    lastAssessed: string;
  };
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ Travel Rule —Å–æ–æ–±—â–µ–Ω–∏—è
 */
export interface TravelRuleMessage {
  id: string;
  version: string; // –í–µ—Ä—Å–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä "1.0")
  timestamp: string; // ISO 8601
  transactionId: string; // ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –±–ª–æ–∫—á–µ–π–Ω–µ
  virtualAsset: {
    type: string; // "BTC", "ETH", "SOL", "USDC", "NDT" –∏ —Ç.–¥.
    amount: number;
    fiatValue?: number;
    fiatCurrency?: string;
  };
  originatingVASP: TransactionParty;
  benefitingVASP: TransactionParty;
  sourceOfFunds?: SourceOfFunds;
  purposeOfTransaction?: PurposeOfTransaction;
  additionalInformation?: {
    transactionDescription?: string;
    referenceNumber?: string;
    urgencyLevel?: "LOW" | "MEDIUM" | "HIGH";
    specialInstructions?: string;
  };
  complianceInformation: {
    screeningResults: {
      sanctionsScreening: {
        checked: boolean;
        matches: boolean;
        details?: string;
      };
      amlScreening: {
        checked: boolean;
        riskScore: number;
        flags: string[];
      };
    };
    regulatoryReporting: {
      reportable: boolean;
      reportType?: string;
      reportId?: string;
    };
  };
  technicalInformation: {
    protocol: string; // "IVMS101", "CAT", "OFAC", etc.
    format: string; // "JSON", "XML", etc.
    encryption: {
      algorithm: string;
      keyId?: string;
    };
    signature?: {
      algorithm: string;
      publicKey: string;
      value: string;
    };
  };
}

// ============================================================================
// CAT (Common Address Transaction) —Ñ–æ—Ä–º–∞—Ç
// ============================================================================

/**
 * CAT —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Travel Rule
 */
export interface CATMessage {
  header: {
    version: string;
    messageId: string;
    timestamp: string;
    sender: {
      vaspId: string;
      name: string;
      endpoint: string;
    };
    recipient: {
      vaspId: string;
      name: string;
      endpoint: string;
    };
  };
  payload: {
    transaction: {
      id: string;
      blockchain: string;
      asset: string;
      amount: number;
      fromAddress: string;
      toAddress: string;
      timestamp: string;
    };
    originator: {
      type: "NATURAL" | "LEGAL";
      name: string;
      dateOfBirth?: string;
      nationality?: string;
      address?: string;
      identificationNumber?: string;
    };
    beneficiary: {
      type: "NATURAL" | "LEGAL";
      name: string;
      dateOfBirth?: string;
      nationality?: string;
      address?: string;
      identificationNumber?: string;
    };
    purpose?: string;
    sourceOfFunds?: string;
  };
  security: {
    signature: string;
    publicKey: string;
    algorithm: string;
  };
}

// ============================================================================
// OFAC —Ñ–æ—Ä–º–∞—Ç
// ============================================================================

/**
 * OFAC —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–∞–Ω–∫—Ü–∏–æ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
 */
export interface OFACMessage {
  header: {
    version: string;
    timestamp: string;
    messageId: string;
    priority: "LOW" | "MEDIUM" | "HIGH" | "URGENT";
  };
  screeningRequest: {
    entities: Array<{
      type: "INDIVIDUAL" | "ENTITY";
      name: string;
      aliases?: string[];
      dateOfBirth?: string;
      nationality?: string;
      addresses?: string[];
      identificationNumbers?: string[];
      additionalInfo?: Record<string, any>;
    }>;
    transaction: {
      id: string;
      amount: number;
      currency: string;
      date: string;
      parties: Array<{
        type: "ORIGINATOR" | "BENEFICIARY";
        name: string;
        address?: string;
        accountNumber?: string;
      }>;
    };
  };
  response?: {
    matches: Array<{
      entity: {
        name: string;
        type: string;
        list: string;
        score: number;
      };
      confidence: number;
      details: string;
    }>;
    recommendation: "APPROVE" | "REVIEW" | "BLOCK";
    processedAt: string;
  };
}

// ============================================================================
// VASP —Ä–µ–µ—Å—Ç—Ä –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
// ============================================================================

/**
 * –ó–∞–ø–∏—Å—å –≤ —Ä–µ–µ—Å—Ç—Ä–µ VASP
 */
export interface VASPRegistryEntry {
  id: string;
  vaspInfo: VASPInfo;
  technicalEndpoints: {
    travelRuleEndpoint: string;
    ivms101Endpoint?: string;
    catEndpoint?: string;
    ofacEndpoint?: string;
    backupEndpoints?: string[];
  };
  supportedProtocols: string[]; // ["IVMS101", "CAT", "OFAC", etc.]
  supportedFormats: string[]; // ["JSON", "XML", etc.]
  encryptionKeys: Array<{
    keyId: string;
    algorithm: string;
    publicKey: string;
    validFrom: string;
    validUntil?: string;
  }>;
  status: "ACTIVE" | "INACTIVE" | "SUSPENDED";
  lastVerified: string;
  reputation: {
    score: number; // 0-100
    reviews: number;
    lastIncident?: string;
  };
}

/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Travel Rule —Å–µ—Ä–≤–∏—Å–∞
 */
export interface TravelRuleConfig {
  vaspInfo: VASPInfo;
  protocols: {
    ivms101: {
      enabled: boolean;
      endpoint: string;
      version: string;
    };
    cat: {
      enabled: boolean;
      endpoint: string;
      version: string;
    };
    ofac: {
      enabled: boolean;
      endpoint: string;
      apiKey?: string;
      updateInterval: number; // –≤ —á–∞—Å–∞—Ö
    };
  };
  security: {
    encryption: {
      algorithm: string;
      keyRotationInterval: number; // –≤ –¥–Ω—è—Ö
    };
    signature: {
      algorithm: string;
      keyId: string;
    };
  };
  compliance: {
    autoScreening: boolean;
    screeningThreshold: number; // 0-100
    reportingThreshold: number; // –≤ USD
    retentionPeriod: number; // –≤ –¥–Ω—è—Ö
  };
  timeouts: {
    messageExpiry: number; // –≤ —á–∞—Å–∞—Ö
    responseTimeout: number; // –≤ –º–∏–Ω—É—Ç–∞—Ö
    retryAttempts: number;
  };
}

// ============================================================================
// API –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
// ============================================================================

/**
 * –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É Travel Rule —Å–æ–æ–±—â–µ–Ω–∏—è
 */
export interface SendTravelRuleRequest {
  transactionId: string;
  recipientVaspId: string;
  protocol: "IVMS101" | "CAT" | "OFAC";
  message: TravelRuleMessage | CATMessage | OFACMessage;
  priority?: "LOW" | "MEDIUM" | "HIGH";
  encryptionKeyId?: string;
}

/**
 * –û—Ç–≤–µ—Ç –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É Travel Rule —Å–æ–æ–±—â–µ–Ω–∏—è
 */
export interface SendTravelRuleResponse {
  success: boolean;
  messageId?: string;
  status: TravelRuleStatus;
  timestamp: string;
  error?: {
    code: string;
    message: string;
    details?: any;
  };
}

/**
 * –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ Travel Rule —Å–æ–æ–±—â–µ–Ω–∏—è
 */
export interface ReceiveTravelRuleRequest {
  messageId?: string;
  transactionId?: string;
  senderVaspId?: string;
  status?: TravelRuleStatus;
  dateFrom?: string;
  dateTo?: string;
  limit?: number;
  offset?: number;
}

/**
 * –û—Ç–≤–µ—Ç –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ Travel Rule —Å–æ–æ–±—â–µ–Ω–∏–π
 */
export interface ReceiveTravelRuleResponse {
  success: boolean;
  messages: Array<{
    id: string;
    transactionId: string;
    senderVaspId: string;
    recipientVaspId: string;
    protocol: string;
    status: TravelRuleStatus;
    timestamp: string;
    message: TravelRuleMessage | CATMessage | OFACMessage;
  }>;
  totalCount: number;
  hasMore: boolean;
}

// ============================================================================
// –°–æ–±—ã—Ç–∏—è –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
// ============================================================================

/**
 * –¢–∏–ø—ã —Å–æ–±—ã—Ç–∏–π Travel Rule
 */
export type TravelRuleEventType = 
  | "MESSAGE_SENT"
  | "MESSAGE_RECEIVED"
  | "MESSAGE_ACKNOWLEDGED"
  | "MESSAGE_FAILED"
  | "SCREENING_MATCH"
  | "COMPLIANCE_FLAG"
  | "VASP_VERIFIED"
  | "ENCRYPTION_KEY_ROTATED";

/**
 * –°–æ–±—ã—Ç–∏–µ Travel Rule —Å–∏—Å—Ç–µ–º—ã
 */
export interface TravelRuleEvent {
  id: string;
  type: TravelRuleEventType;
  timestamp: string;
  messageId?: string;
  transactionId?: string;
  vaspId?: string;
  data: Record<string, any>;
  severity: "LOW" | "MEDIUM" | "HIGH" | "CRITICAL";
  processed: boolean;
}

// ============================================================================
// –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö —Ç–∏–ø–æ–≤
// ============================================================================

export * from "./types";