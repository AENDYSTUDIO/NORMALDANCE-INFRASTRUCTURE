/**
 * üîê Travel Rule Crypto Service
 *
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è, –ø–æ–¥–ø–∏—Å–∏ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö
 * –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ FATF –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
 */

import { createHash, createHmac, randomBytes, createCipheriv, createDecipheriv } from "crypto";
import { generateId } from "../aml-kyc/utils";

export interface TravelRuleSecurityConfig {
  encryption: {
    algorithm: string;
    keyRotationInterval: number; // –≤ –¥–Ω—è—Ö
  };
  signature: {
    algorithm: string;
    keyId: string;
  };
}

export interface EncryptionKey {
  keyId: string;
  algorithm: string;
  publicKey: string;
  privateKey?: string;
  validFrom: string;
  validUntil?: string;
}

export interface MessageSignature {
  signature: string;
  publicKey: string;
  algorithm: string;
  keyId: string;
}

export class TravelRuleCrypto {
  private config: TravelRuleSecurityConfig;
  private encryptionKeys: Map<string, EncryptionKey> = new Map();
  private signingKeys: Map<string, EncryptionKey> = new Map();

  constructor(config: TravelRuleSecurityConfig) {
    this.config = config;
    this.initializeKeys();
  }

  /**
   * –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  async encryptMessage(
    message: any,
    recipientKey: EncryptionKey
  ): Promise<any> {
    try {
      const messageString = JSON.stringify(message);
      const messageBuffer = Buffer.from(messageString, 'utf8');

      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è IV –¥–ª—è AES-GCM
      const iv = randomBytes(16); // 128 –±–∏—Ç IV –¥–ª—è AES
      const key = this.getEncryptionKey();

      // –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º AES-256-GCM
      const cipher = createCipheriv('aes-256-gcm', Buffer.from(key.privateKey!, 'hex'), iv);
      
      let encrypted = cipher.update(messageBuffer);
      encrypted = Buffer.concat([encrypted, cipher.final()]);
      
      const authTag = cipher.getAuthTag();

      // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
      const encryptedMessage = {
        encryptedData: encrypted.toString('base64'),
        iv: iv.toString('base64'),
        authTag: authTag.toString('base64'),
        keyId: recipientKey.keyId,
        algorithm: 'AES-256-GCM',
        timestamp: new Date().toISOString(),
      };

      return encryptedMessage;
    } catch (error) {
      console.error("Error encrypting message:", error);
      throw new Error(`Message encryption failed: ${error}`);
    }
  }

  /**
   * –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  async decryptMessage(encryptedMessage: any): Promise<any> {
    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
      if (!encryptedMessage.encryptedData || !encryptedMessage.iv || !encryptedMessage.authTag) {
        throw new Error("Invalid encrypted message format");
      }

      const keyId = encryptedMessage.keyId || this.config.signature.keyId;
      const key = this.getEncryptionKey(keyId);

      if (!key) {
        throw new Error(`Encryption key not found: ${keyId}`);
      }

      // –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º AES-256-GCM
      const encryptedData = Buffer.from(encryptedMessage.encryptedData, 'base64');
      const iv = Buffer.from(encryptedMessage.iv, 'base64');
      const authTag = Buffer.from(encryptedMessage.authTag, 'base64');

      const decipher = createDecipheriv('aes-256-gcm', Buffer.from(key.privateKey!, 'hex'), iv);
      decipher.setAuthTag(authTag);

      let decrypted = decipher.update(encryptedData);
      decrypted = Buffer.concat([decrypted, decipher.final()]);

      const messageString = decrypted.toString('utf8');
      return JSON.parse(messageString);
    } catch (error) {
      console.error("Error decrypting message:", error);
      throw new Error(`Message decryption failed: ${error}`);
    }
  }

  /**
   * –ü–æ–¥–ø–∏—Å—å —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  async signMessage(message: any): Promise<MessageSignature> {
    try {
      const messageString = JSON.stringify(message);
      const messageHash = createHash('sha256').update(messageString).digest();
      
      const signingKey = this.getSigningKey();
      
      // –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è ECDSA –∏–ª–∏ RSA
      // –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º HMAC-SHA256
      const signature = createHmac('sha256', Buffer.from(signingKey.privateKey!, 'hex'))
        .update(messageHash)
        .digest('hex');

      return {
        signature,
        publicKey: signingKey.publicKey,
        algorithm: this.config.signature.algorithm,
        keyId: signingKey.keyId,
      };
    } catch (error) {
      console.error("Error signing message:", error);
      throw new Error(`Message signing failed: ${error}`);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  async verifySignature(
    message: any,
    signature: string,
    publicKey: string
  ): Promise<boolean> {
    try {
      const messageString = JSON.stringify(message);
      const messageHash = createHash('sha256').update(messageString).digest();
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º HMAC-SHA256
      const expectedSignature = createHmac('sha256', Buffer.from(publicKey, 'hex'))
        .update(messageHash)
        .digest('hex');

      return signature === expectedSignature;
    } catch (error) {
      console.error("Error verifying signature:", error);
      return false;
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —Ö—ç—à–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  createMessageHash(message: any): string {
    const messageString = JSON.stringify(message);
    return createHash('sha256').update(messageString).digest('hex');
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
   */
  generateEncryptionKey(): EncryptionKey {
    const keyId = generateId("enc_key");
    const privateKey = randomBytes(32).toString('hex'); // 256 –±–∏—Ç –∫–ª—é—á –¥–ª—è AES
    const publicKey = this.derivePublicKey(privateKey);

    const now = new Date();
    const validUntil = new Date(now.getTime() + this.config.encryption.keyRotationInterval * 24 * 60 * 60 * 1000);

    const key: EncryptionKey = {
      keyId,
      algorithm: this.config.encryption.algorithm,
      publicKey,
      privateKey,
      validFrom: now.toISOString(),
      validUntil: validUntil.toISOString(),
    };

    this.encryptionKeys.set(keyId, key);
    return key;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞ –ø–æ–¥–ø–∏—Å–∏
   */
  generateSigningKey(): EncryptionKey {
    const keyId = generateId("sig_key");
    const privateKey = randomBytes(32).toString('hex'); // 256 –±–∏—Ç –∫–ª—é—á –¥–ª—è HMAC
    const publicKey = this.derivePublicKey(privateKey);

    const now = new Date();
    const validUntil = new Date(now.getTime() + this.config.encryption.keyRotationInterval * 24 * 60 * 60 * 1000);

    const key: EncryptionKey = {
      keyId,
      algorithm: this.config.signature.algorithm,
      publicKey,
      privateKey,
      validFrom: now.toISOString(),
      validUntil: validUntil.toISOString(),
    };

    this.signingKeys.set(keyId, key);
    return key;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
   */
  getEncryptionKey(keyId?: string): EncryptionKey {
    if (keyId) {
      const key = this.encryptionKeys.get(keyId);
      if (key) return key;
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –∫–ª—é—á
    const keys = Array.from(this.encryptionKeys.values());
    if (keys.length > 0) {
      return keys[0];
    }

    // –ï—Å–ª–∏ –∫–ª—é—á–µ–π –Ω–µ—Ç, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π
    return this.generateEncryptionKey();
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–∞ –ø–æ–¥–ø–∏—Å–∏
   */
  getSigningKey(keyId?: string): EncryptionKey {
    if (keyId) {
      const key = this.signingKeys.get(keyId);
      if (key) return key;
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª—é—á –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const defaultKey = this.signingKeys.get(this.config.signature.keyId);
    if (defaultKey) return defaultKey;

    // –ï—Å–ª–∏ –∫–ª—é—á–∞ –Ω–µ—Ç, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π
    return this.generateSigningKey();
  }

  /**
   * –†–æ—Ç–∞—Ü–∏—è –∫–ª—é—á–µ–π
   */
  async rotateKeys(): Promise<void> {
    try {
      console.log("Starting key rotation...");

      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –∫–ª—é—á–µ–π
      const newEncryptionKey = this.generateEncryptionKey();
      const newSigningKey = this.generateSigningKey();

      // –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π
      this.removeExpiredKeys();

      console.log("Key rotation completed successfully");
      console.log(`New encryption key: ${newEncryptionKey.keyId}`);
      console.log(`New signing key: ${newSigningKey.keyId}`);
    } catch (error) {
      console.error("Error during key rotation:", error);
      throw new Error(`Key rotation failed: ${error}`);
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π
   */
  getActiveKeys(): {
    encryption: EncryptionKey[];
    signing: EncryptionKey[];
  } {
    const now = new Date();
    
    const activeEncryptionKeys = Array.from(this.encryptionKeys.values()).filter(
      key => new Date(key.validFrom) <= now && (!key.validUntil || new Date(key.validUntil) > now)
    );

    const activeSigningKeys = Array.from(this.signingKeys.values()).filter(
      key => new Date(key.validFrom) <= now && (!key.validUntil || new Date(key.validUntil) > now)
    );

    return {
      encryption: activeEncryptionKeys,
      signing: activeSigningKeys,
    };
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–ª—é—á–∞
   */
  validateKey(key: EncryptionKey): boolean {
    try {
      const now = new Date();
      const validFrom = new Date(key.validFrom);
      const validUntil = key.validUntil ? new Date(key.validUntil) : null;

      if (validFrom > now) {
        return false; // –ö–ª—é—á –µ—â–µ –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω
      }

      if (validUntil && validUntil <= now) {
        return false; // –ö–ª—é—á –∏—Å—Ç–µ–∫
      }

      if (!key.publicKey) {
        return false; // –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á
      }

      return true;
    } catch (error) {
      console.error("Error validating key:", error);
      return false;
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ —Å–µ—Å—Å–∏–∏
   */
  createSessionToken(data: any, expiresIn: number = 3600): string {
    const now = Math.floor(Date.now() / 1000);
    const expiresAt = now + expiresIn;

    const tokenData = {
      data,
      iat: now,
      exp: expiresAt,
      jti: generateId("token"),
    };

    const tokenString = JSON.stringify(tokenData);
    const signature = createHmac('sha256', Buffer.from(this.getSigningKey().privateKey!, 'hex'))
      .update(tokenString)
      .digest('hex');

    return Buffer.from(`${tokenString}.${signature}`).toString('base64');
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ —Å–µ—Å—Å–∏–∏
   */
  verifySessionToken(token: string): any {
    try {
      const tokenBuffer = Buffer.from(token, 'base64');
      const tokenString = tokenBuffer.toString('utf8');
      const [dataString, signature] = tokenString.split('.');

      if (!dataString || !signature) {
        throw new Error("Invalid token format");
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏
      const expectedSignature = createHmac('sha256', Buffer.from(this.getSigningKey().privateKey!, 'hex'))
        .update(dataString)
        .digest('hex');

      if (signature !== expectedSignature) {
        throw new Error("Invalid token signature");
      }

      const tokenData = JSON.parse(dataString);
      const now = Math.floor(Date.now() / 1000);

      if (tokenData.exp && tokenData.exp < now) {
        throw new Error("Token expired");
      }

      return tokenData.data;
    } catch (error) {
      console.error("Error verifying session token:", error);
      throw new Error(`Token verification failed: ${error}`);
    }
  }

  // –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª—é—á–µ–π
   */
  private initializeKeys(): void {
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π
    this.generateEncryptionKey();
    this.generateSigningKey();

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π —Ä–æ—Ç–∞—Ü–∏–∏ –∫–ª—é—á–µ–π
    setInterval(() => {
      this.rotateKeys();
    }, this.config.encryption.keyRotationInterval * 24 * 60 * 60 * 1000); // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–Ω–µ–π –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
  }

  /**
   * –í—ã–≤–æ–¥ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞ –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ
   */
  private derivePublicKey(privateKey: string): string {
    // –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞
    // –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ö—ç—à –æ—Ç –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
    return createHash('sha256').update(privateKey).digest('hex');
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π
   */
  private removeExpiredKeys(): void {
    const now = new Date();

    // –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
    for (const [keyId, key] of this.encryptionKeys) {
      if (key.validUntil && new Date(key.validUntil) <= now) {
        this.encryptionKeys.delete(keyId);
        console.log(`Removed expired encryption key: ${keyId}`);
      }
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π –ø–æ–¥–ø–∏—Å–∏
    for (const [keyId, key] of this.signingKeys) {
      if (key.validUntil && new Date(key.validUntil) <= now) {
        this.signingKeys.delete(keyId);
        console.log(`Removed expired signing key: ${keyId}`);
      }
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Å–µ—Ä–≤–∏—Å–∞
export { TravelRuleCrypto };