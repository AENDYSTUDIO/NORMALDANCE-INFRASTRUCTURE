/**
 * üì± Telegram Integration 2025
 * 
 * –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ adoption:
 * - TON Space Native Integration
 * - Mini-App DEX Interface
 * - –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏
 * - –ü—É—à-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 */

export interface TelegramUser {
  id: number
  username?: string
  first_name: string
  last_name?: string
  language_code?: string
  is_premium?: boolean
  photo_url?: string
}

export interface TelegramPayment {
  id: string
  amount: number
  currency: 'TON' | 'NDT'
  description: string
  status: 'pending' | 'completed' | 'failed'
  timestamp: number
  from_user: TelegramUser
  to_user?: TelegramUser
  chat_id?: number
  message_id?: number
}

export interface TelegramNotification {
  id: string
  type: 'order_executed' | 'price_alert' | 'liquidity_opportunity' | 'volatility_warning'
  title: string
  message: string
  data: Record<string, unknown>
  timestamp: number
  sent: boolean
}

export interface SocialPayment {
  id: string
  from_user: TelegramUser
  to_user: TelegramUser
  amount: number
  currency: 'TON' | 'NDT'
  message?: string
  chat_id: number
  message_id: number
  status: 'pending' | 'completed' | 'declined'
  created_at: number
}

export interface TelegramMiniApp {
  id: string
  name: string
  description: string
  version: string
  features: string[]
  web_app_url: string
  bot_username: string
  is_verified: boolean
  stars_revenue_share: number
}

export class TelegramIntegration2025 {
  private botToken: string
  private webAppUrl: string
  private notifications: Map<number, TelegramNotification[]> = new Map()
  private socialPayments: Map<string, SocialPayment> = new Map()
  private miniApp: TelegramMiniApp

  constructor() {
    this.botToken = process.env.TELEGRAM_BOT_TOKEN || ''
    this.webAppUrl = process.env.TELEGRAM_WEB_APP_URL || 'https://normaldance.com/telegram'
    
    this.miniApp = {
      id: 'normaldance_dex',
      name: 'NormalDance DEX',
      description: '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π DEX —Å –≥–∏–±—Ä–∏–¥–Ω—ã–º–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏ AMM –∏ –∑–∞—â–∏—Ç–æ–π –æ—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏',
      version: '2025.1.0',
      features: [
        'hybrid_amm',
        'volatility_protection',
        'smart_limit_orders',
        'ml_predictions',
        'social_payments',
        'ton_space_integration'
      ],
      web_app_url: this.webAppUrl,
      bot_username: 'normaldance_dex_bot',
      is_verified: true,
      stars_revenue_share: 0.3 // 30% –æ—Ç Stars
    }
  }

  /**
   * üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Mini-App –≤ Telegram
   */
  async initializeMiniApp(): Promise<boolean> {
    try {
      // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Mini-App –≤ Telegram
      const response = await fetch('https://api.telegram.org/bot' + this.botToken + '/setWebhook', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          url: `${this.webAppUrl}/api/telegram/webhook`,
          allowed_updates: ['message', 'callback_query', 'inline_query', 'payment']
        })
      })

      const result = await response.json()
      return result.ok
    } catch (error) {
      console.error('Error initializing Telegram Mini-App:', error)
      return false
    }
  }

  /**
   * üí∞ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π —á–µ—Ä–µ–∑ Telegram
   */
  async processTelegramPayment(payment: TelegramPayment): Promise<boolean> {
    try {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–∞
      if (!this.validatePayment(payment)) {
        return false
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –≤ —Å–∏—Å—Ç–µ–º–µ
      const success = await this.executePayment(payment)
      
      if (success) {
        // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await this.sendPaymentConfirmation(payment)
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        payment.status = 'completed'
      } else {
        payment.status = 'failed'
        await this.sendPaymentError(payment)
      }

      return success
    } catch (error) {
      console.error('Error processing Telegram payment:', error)
      return false
    }
  }

  /**
   * üí∏ –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
   */
  async createSocialPayment(
    fromUser: TelegramUser,
    toUser: TelegramUser,
    amount: number,
    currency: 'TON' | 'NDT',
    chatId: number,
    messageId: number,
    message?: string
  ): Promise<SocialPayment> {
    const socialPayment: SocialPayment = {
      id: this.generatePaymentId(),
      from_user: fromUser,
      to_user: toUser,
      amount,
      currency,
      message,
      chat_id: chatId,
      message_id: messageId,
      status: 'pending',
      created_at: Date.now()
    }

    this.socialPayments.set(socialPayment.id, socialPayment)

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—É—á–∞—Ç–µ–ª—é
    await this.sendSocialPaymentNotification(socialPayment)

    return socialPayment
  }

  /**
   * üîî –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   */
  async sendNotification(userId: number, notification: Omit<TelegramNotification, 'id' | 'timestamp' | 'sent'>): Promise<boolean> {
    try {
      const fullNotification: TelegramNotification = {
        ...notification,
        id: this.generateNotificationId(),
        timestamp: Date.now(),
        sent: false
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      if (!this.notifications.has(userId)) {
        this.notifications.set(userId, [])
      }
      this.notifications.get(userId)!.push(fullNotification)

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      const success = await this.sendTelegramMessage(userId, {
        text: `üîî *${notification.title}*\n\n${notification.message}`,
        parse_mode: 'Markdown',
        reply_markup: this.getNotificationKeyboard(notification.type)
      })

      if (success) {
        fullNotification.sent = true
      }

      return success
    } catch (error) {
      console.error('Error sending notification:', error)
      return false
    }
  }

  /**
   * üìä –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≤ –≥—Ä—É–ø–ø—É/–∫–∞–Ω–∞–ª
   */
  async sendAnalyticsToChannel(channelId: string, analytics: Record<string, unknown>): Promise<boolean> {
    try {
      const message = this.formatAnalyticsMessage(analytics)
      
      return await this.sendTelegramMessage(channelId, {
        text: message,
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: 'üìä –û—Ç–∫—Ä—ã—Ç—å Dashboard',
                web_app: { url: `${this.webAppUrl}/dashboard` }
              }
            ],
            [
              {
                text: 'üíé –¢–æ—Ä–≥–æ–≤–∞—Ç—å',
                web_app: { url: `${this.webAppUrl}/dex` }
              }
            ]
          ]
        }
      })
    } catch (error) {
      console.error('Error sending analytics to channel:', error)
      return false
    }
  }

  /**
   * üéØ –°–æ–∑–¥–∞–Ω–∏–µ inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–≤–æ–ø–∞
   */
  createQuickSwapButton(from: 'TON' | 'NDT', to: 'TON' | 'NDT', amount?: number) {
    return {
      text: `üí± ${from} ‚Üí ${to}${amount ? ` (${amount})` : ''}`,
      web_app: {
        url: `${this.webAppUrl}/dex?action=swap&from=${from}&to=${to}${amount ? `&amount=${amount}` : ''}`
      }
    }
  }

  /**
   * üìà –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
   */
  createAnalyticsButton() {
    return {
      text: 'üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞',
      web_app: {
        url: `${this.webAppUrl}/analytics`
      }
    }
  }

  /**
   * üíß –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å—é
   */
  createLiquidityButton() {
    return {
      text: 'üíß –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å',
      web_app: {
        url: `${this.webAppUrl}/dex?tab=liquidity`
      }
    }
  }

  /**
   * üéØ –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–º–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
   */
  createSmartOrdersButton() {
    return {
      text: 'üéØ –£–º–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞',
      web_app: {
        url: `${this.webAppUrl}/dex?tab=orders`
      }
    }
  }

  /**
   * üîî –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ä–∞–±–æ—Ç–∞–≤—à–µ–º –æ—Ä–¥–µ—Ä–µ
   */
  async sendOrderExecutionNotification(userId: number, orderData: Record<string, unknown>): Promise<boolean> {
    const message = `üéØ *–û—Ä–¥–µ—Ä –∏—Å–ø–æ–ª–Ω–µ–Ω!*\n\n` +
      `–¢–∏–ø: ${orderData.type === 'buy' ? '–ü–æ–∫—É–ø–∫–∞' : '–ü—Ä–æ–¥–∞–∂–∞'}\n` +
      `–ü–∞—Ä–∞: ${orderData.from} ‚Üí ${orderData.to}\n` +
      `–°—É–º–º–∞: ${orderData.amount} ${orderData.from}\n` +
      `–ö—É—Ä—Å: ${orderData.executionRate}\n` +
      `–ü–æ–ª—É—á–µ–Ω–æ: ${orderData.outputAmount} ${orderData.to}\n` +
      `–ö–æ–º–∏—Å—Å–∏—è: ${orderData.fee} ${orderData.from}`

    return await this.sendNotification(userId, {
      type: 'order_executed',
      title: '–û—Ä–¥–µ—Ä –∏—Å–ø–æ–ª–Ω–µ–Ω',
      message,
      data: orderData
    })
  }

  /**
   * ‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
   */
  async sendVolatilityWarning(userId: number, volatility: number): Promise<boolean> {
    const message = `‚ö†Ô∏è *–í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å!*\n\n` +
      `–¢–µ–∫—É—â–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: ${volatility.toFixed(1)}%\n` +
      `–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:\n` +
      `‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞—â–∏—Ç–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã\n` +
      `‚Ä¢ –£–º–µ–Ω—å—à–∏—Ç—å —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–π\n` +
      `‚Ä¢ –í–∫–ª—é—á–∏—Ç—å —Å—Ç–æ–ø-–ª–æ—Å—Å—ã`

    return await this.sendNotification(userId, {
      type: 'volatility_warning',
      title: '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏',
      message,
      data: { volatility }
    })
  }

  /**
   * üí∞ –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
   */
  async sendArbitrageOpportunity(userId: number, opportunity: Record<string, unknown>): Promise<boolean> {
    const message = `üí∞ *–ê—Ä–±–∏—Ç—Ä–∞–∂–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å!*\n\n` +
      `–ò—Å—Ç–æ—á–Ω–∏–∫: ${opportunity.source}\n` +
      `–¶–µ–ª—å: ${opportunity.target}\n` +
      `–ü—Ä–∏–±—ã–ª—å: ${opportunity.netProfit.toFixed(2)} TON\n` +
      `–ü—Ä–æ—Ü–µ–Ω—Ç: ${opportunity.profitPercentage.toFixed(2)}%\n` +
      `–†–∏—Å–∫: ${opportunity.risk === 'low' ? '–ù–∏–∑–∫–∏–π' : opportunity.risk === 'medium' ? '–°—Ä–µ–¥–Ω–∏–π' : '–í—ã—Å–æ–∫–∏–π'}\n` +
      `–í—Ä–µ–º—è: ${Math.floor(opportunity.timeWindow / 60)} –º–∏–Ω`

    return await this.sendNotification(userId, {
      type: 'liquidity_opportunity',
      title: '–ê—Ä–±–∏—Ç—Ä–∞–∂–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å',
      message,
      data: opportunity
    })
  }

  /**
   * üìä –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π
   */
  private formatAnalyticsMessage(analytics: Record<string, unknown>): string {
    const market = analytics.market
    const liquidity = analytics.liquidity
    const trading = analytics.trading

    return `üìä *NormalDance DEX - –ê–Ω–∞–ª–∏—Ç–∏–∫–∞*\n\n` +
      `üíé *–†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:*\n` +
      `‚Ä¢ –¶–µ–Ω–∞ NDT: ${market?.currentPrice?.toFixed(4)} TON\n` +
      `‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ 24—á: ${market?.priceChange24h >= 0 ? '+' : ''}${market?.priceChange24h?.toFixed(2)}%\n` +
      `‚Ä¢ –û–±—ä–µ–º 24—á: ${this.formatCurrency(market?.volume24h || 0)}\n` +
      `‚Ä¢ –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: ${market?.volatility?.toFixed(1)}%\n\n` +
      `üíß *–õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å:*\n` +
      `‚Ä¢ –û–±—â–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: ${this.formatCurrency(liquidity?.totalLiquidity || 0)}\n` +
      `‚Ä¢ –ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã: ${liquidity?.liquidityProviders}\n` +
      `‚Ä¢ IL: ${liquidity?.impermanentLoss?.toFixed(2)}%\n\n` +
      `üìà *–¢–æ—Ä–≥–æ–≤–ª—è:*\n` +
      `‚Ä¢ –°–¥–µ–ª–æ–∫ 24—á: ${trading?.totalTrades?.toLocaleString()}\n` +
      `‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${trading?.successRate?.toFixed(1)}%\n` +
      `‚Ä¢ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≥–∞–∑–∞: ${trading?.gasEfficiency?.toFixed(1)}%\n\n` +
      `üõ°Ô∏è *–ó–∞—â–∏—Ç–∞ –∞–∫—Ç–∏–≤–Ω–∞* ‚Ä¢ ü§ñ *–ò–ò-–ø—Ä–æ–≥–Ω–æ–∑—ã* ‚Ä¢ ‚ö° *–ì–∏–±—Ä–∏–¥–Ω—ã–π AMM*`
  }

  /**
   * üîî –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  private getNotificationKeyboard(type: string) {
    switch (type) {
      case 'order_executed':
        return {
          inline_keyboard: [
            [
              {
                text: 'üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏',
                web_app: { url: `${this.webAppUrl}/dex?tab=orders` }
              }
            ]
          ]
        }
      
      case 'volatility_warning':
        return {
          inline_keyboard: [
            [
              {
                text: 'üõ°Ô∏è –í–∫–ª—é—á–∏—Ç—å –∑–∞—â–∏—Ç—É',
                web_app: { url: `${this.webAppUrl}/dex?tab=protection` }
              }
            ]
          ]
        }
      
      case 'liquidity_opportunity':
        return {
          inline_keyboard: [
            [
              {
                text: 'üí∞ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å',
                web_app: { url: `${this.webAppUrl}/dex?tab=arbitrage` }
              }
            ]
          ]
        }
      
      default:
        return {
          inline_keyboard: [
            [
              {
                text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å DEX',
                web_app: { url: `${this.webAppUrl}/dex` }
              }
            ]
          ]
        }
    }
  }

  /**
   * ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–∞
   */
  private validatePayment(payment: TelegramPayment): boolean {
    return payment.amount > 0 && 
           (payment.currency === 'TON' || payment.currency === 'NDT') &&
           payment.from_user.id > 0
  }

  /**
   * üí∞ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
   */
  private async executePayment(payment: TelegramPayment): Promise<boolean> {
    // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –ø–ª–∞—Ç–µ–∂–µ–π
    // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    return true
  }

  /**
   * ‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
   */
  private async sendPaymentConfirmation(payment: TelegramPayment): Promise<void> {
    const message = `‚úÖ *–ü–ª–∞—Ç–µ–∂ –≤—ã–ø–æ–ª–Ω–µ–Ω!*\n\n` +
      `–°—É–º–º–∞: ${payment.amount} ${payment.currency}\n` +
      `–û–ø–∏—Å–∞–Ω–∏–µ: ${payment.description}\n` +
      `–í—Ä–µ–º—è: ${new Date(payment.timestamp).toLocaleString('ru-RU')}`

    await this.sendTelegramMessage(payment.from_user.id, {
      text: message,
      parse_mode: 'Markdown'
    })
  }

  /**
   * ‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—à–∏–±–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
   */
  private async sendPaymentError(payment: TelegramPayment): Promise<void> {
    const message = `‚ùå *–û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–∞*\n\n` +
      `–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É ${payment.amount} ${payment.currency}.\n` +
      `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.`

    await this.sendTelegramMessage(payment.from_user.id, {
      text: message,
      parse_mode: 'Markdown'
    })
  }

  /**
   * üí∏ –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ
   */
  private async sendSocialPaymentNotification(payment: SocialPayment): Promise<void> {
    const message = `üí∏ *–ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂!*\n\n` +
      `–û—Ç: ${payment.from_user.first_name}${payment.from_user.username ? ` (@${payment.from_user.username})` : ''}\n` +
      `–°—É–º–º–∞: ${payment.amount} ${payment.currency}\n` +
      `${payment.message ? `–°–æ–æ–±—â–µ–Ω–∏–µ: "${payment.message}"` : ''}\n\n` +
      `–ü—Ä–∏–Ω—è—Ç—å –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å?`

    await this.sendTelegramMessage(payment.to_user.id, {
      text: message,
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: '‚úÖ –ü—Ä–∏–Ω—è—Ç—å',
              callback_data: `accept_payment_${payment.id}`
            },
            {
              text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å',
              callback_data: `decline_payment_${payment.id}`
            }
          ]
        ]
      }
    })
  }

  /**
   * üì± –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
   */
  private async sendTelegramMessage(chatId: string | number, message: Record<string, unknown> | string): Promise<boolean> {
    try {
      const response = await fetch(`https://api.telegram.org/bot${this.botToken}/sendMessage`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          chat_id: chatId,
          ...message
        })
      })

      const result = await response.json()
      return result.ok
    } catch (error) {
      console.error('Error sending Telegram message:', error)
      return false
    }
  }

  /**
   * üí∞ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã
   */
  private formatCurrency(amount: number): string {
    return new Intl.NumberFormat('ru-RU', {
      style: 'currency',
      currency: 'USD',
      minimumFractionDigits: 0,
      maximumFractionDigits: 0
    }).format(amount)
  }

  /**
   * üÜî –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID –ø–ª–∞—Ç–µ–∂–∞
   */
  private generatePaymentId(): string {
    return `payment_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
  }

  /**
   * üÜî –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  private generateNotificationId(): string {
    return `notification_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
  }

  /**
   * üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
   */
  getIntegrationStats() {
    const totalNotifications = Array.from(this.notifications.values())
      .reduce((sum, notifications) => sum + notifications.length, 0)
    
    const sentNotifications = Array.from(this.notifications.values())
      .flat()
      .filter(n => n.sent).length

    return {
      miniApp: this.miniApp,
      totalNotifications,
      sentNotifications,
      socialPayments: this.socialPayments.size,
      notificationDeliveryRate: totalNotifications > 0 ? (sentNotifications / totalNotifications) * 100 : 0
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Å–∏–Ω–≥–ª—Ç–æ–Ω–∞
export const telegramIntegration2025 = new TelegramIntegration2025()
