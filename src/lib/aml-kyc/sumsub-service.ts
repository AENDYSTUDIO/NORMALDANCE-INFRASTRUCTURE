/**
 * üîê Sumsub Service - Identity Verification Integration
 *
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Sumsub API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–º–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º–∏ KYC/AML
 */

import { DocumentType, KYCLevel, KYCStatus, PersonalData } from "./types";

import { ComplianceService } from "./compliance-service";
import { generateId } from "./utils";

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Prisma
import { db } from "../../lib/db";

export interface SumsubConfig {
  apiKey: string;
  secret: string;
  appId: string;
  apiUrl: string;
  webHookSecret?: string;
}

export interface SumsubApplicant {
  id: string;
  externalUserId: string;
  createdAt: string;
  email?: string;
  phone?: string;
  firstName?: string;
  lastName?: string;
  dob?: string; // Date of birth in YYYY-MM-DD format
  country?: string; // ISO 3166-1 alpha-2
  customAttributes?: Record<string, any>;
}

export interface SumsubCheckResult {
  id: string;
  status: "completed" | "pending" | "rejected" | "consider";
  reviewResult?: {
    reviewAnswer: "GREEN" | "RED" | "GRAY";
    moderationComment?: string;
    clientComment?: string;
  };
  createdAt: string;
  checkType: string;
  requirements?: Array<{
    id: string;
    type: string;
    status: string;
  }>;
}

export interface SumsubVerificationLevel {
  levelName: string;
  requiredDocuments: DocumentType[];
  additionalChecks: string[];
}

export class SumsubService {
  private config: SumsubConfig;
  private complianceService: ComplianceService;

  constructor(config: SumsubConfig) {
    this.config = config;
    this.complianceService = new ComplianceService();
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ Sumsub
   */
  async createApplicant(
    userId: string,
    email?: string,
    phone?: string,
    personalData?: PersonalData
  ): Promise<{ success: boolean; applicantId?: string; message?: string }> {
    try {
      // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
      const applicantData: Partial<SumsubApplicant> = {
        externalUserId: userId,
        email,
        phone,
      };

      if (personalData) {
        applicantData.firstName = personalData.firstName;
        applicantData.lastName = personalData.lastName;
        applicantData.dob = personalData.dateOfBirth;
        applicantData.country = personalData.nationality;
      }

      // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
      const requestBody = {
        externalUserId: applicantData.externalUserId,
        email: applicantData.email,
        phone: applicantData.phone,
        firstName: applicantData.firstName,
        lastName: applicantData.lastName,
        dob: applicantData.dob,
        country: applicantData.country,
        customAttributes: {
          platform: "NormalDance",
          createdAt: new Date().toISOString(),
        },
      };

      // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
      const headers = this.getAuthHeaders(
        "POST",
        "/resources/applicants",
        requestBody
      );

      // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ API Sumsub
      const response = await fetch(
        `${this.config.apiUrl}/resources/applicants`,
        {
          method: "POST",
          headers: {
            ...headers,
            "Content-Type": "application/json",
          },
          body: JSON.stringify(requestBody),
        }
      );

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Sumsub API error: ${response.status} - ${errorText}`);
      }

      const result = await response.json();

      return {
        success: true,
        applicantId: result.id,
        message: "Applicant created successfully",
      };
    } catch (error) {
      console.error("Error creating Sumsub applicant:", error);
      return {
        success: false,
        message: `Failed to create applicant: ${
          error instanceof Error ? error.message : "Unknown error"
        }`,
      };
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –≤–µ–±-—Å–∞–π—Ç–∞ (Web SDK)
   */
  async generateAccessToken(
    applicantId: string,
    levelName: string
  ): Promise<{ success: boolean; token?: string; message?: string }> {
    try {
      // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
      const headers = this.getAuthHeaders(
        "POST",
        `/resources/accessTokens?applicantId=${applicantId}&levelName=${levelName}`
      );

      // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ API Sumsub
      const response = await fetch(
        `${this.config.apiUrl}/resources/accessTokens?applicantId=${applicantId}&levelName=${levelName}`,
        {
          method: "POST",
          headers,
        }
      );

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Sumsub API error: ${response.status} - ${errorText}`);
      }

      const result = await response.json();

      return {
        success: true,
        token: result.token,
        message: "Access token generated successfully",
      };
    } catch (error) {
      console.error("Error generating Sumsub access token:", error);
      return {
        success: false,
        message: `Failed to generate access token: ${
          error instanceof Error ? error.message : "Unknown error"
        }`,
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–µ
   */
  async getApplicantInfo(applicantId: string): Promise<SumsubApplicant | null> {
    try {
      // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
      const headers = this.getAuthHeaders(
        "GET",
        `/resources/applicants/${applicantId}`
      );

      // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ API Sumsub
      const response = await fetch(
        `${this.config.apiUrl}/resources/applicants/${applicantId}`,
        {
          method: "GET",
          headers,
        }
      );

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Sumsub API error: ${response.status} - ${errorText}`);
      }

      const result = await response.json();

      return {
        id: result.id,
        externalUserId: result.externalUserId,
        createdAt: result.createdAt,
        email: result.email,
        phone: result.phone,
        firstName: result.firstName,
        lastName: result.lastName,
        dob: result.dob,
        country: result.country,
        customAttributes: result.customAttributes,
      };
    } catch (error) {
      console.error("Error fetching Sumsub applicant info:", error);
      return null;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
   */
  async getApplicantChecks(applicantId: string): Promise<SumsubCheckResult[]> {
    try {
      // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
      const headers = this.getAuthHeaders(
        "GET",
        `/resources/applicants/${applicantId}/checks`
      );

      // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ API Sumsub
      const response = await fetch(
        `${this.config.apiUrl}/resources/applicants/${applicantId}/checks`,
        {
          method: "GET",
          headers,
        }
      );

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Sumsub API error: ${response.status} - ${errorText}`);
      }

      const results = await response.json();

      return results.map((check: any) => ({
        id: check.id,
        status: check.status,
        reviewResult: check.reviewResult
          ? {
              reviewAnswer: check.reviewResult.reviewAnswer,
              moderationComment: check.reviewResult.moderationComment,
              clientComment: check.reviewResult.clientComment,
            }
          : undefined,
        createdAt: check.createdAt,
        checkType: check.checkType,
        requirements: check.requirements
          ? check.requirements.map((req: any) => ({
              id: req.id,
              type: req.type,
              status: req.status,
            }))
          : undefined,
      }));
    } catch (error) {
      console.error("Error fetching Sumsub applicant checks:", error);
      return [];
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
   */
  async submitDocument(
    applicantId: string,
    documentType: DocumentType,
    fileBuffer: Buffer,
    fileName: string
  ): Promise<{ success: boolean; imageId?: string; message?: string }> {
    try {
      // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è Sumsub
      const sumsubDocType = this.mapDocumentTypeToSumsub(documentType);

      // –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞
      const formData = new FormData();
      formData.append(
        "source",
        new Blob([fileBuffer], { type: "application/octet-stream" })
      );
      formData.append("idDocType", sumsubDocType);

      // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–±–µ–∑ Content-Type, —Ç.–∫. –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è multipart/form-data)
      const headers = this.getAuthHeaders(
        "POST",
        `/resources/applicants/${applicantId}/documents`
      );

      // –î–ª—è multipart –∑–∞–ø—Ä–æ—Å–∞ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
      // Content-Type –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –±—Ä–∞—É–∑–µ—Ä–æ–º —Å boundary
      const fetchHeaders = {
        ...headers,
        // –£–¥–∞–ª—è–µ–º Content-Type, —á—Ç–æ–±—ã –±—Ä–∞—É–∑–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–∏–ª –µ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º boundary
      };

      // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ API Sumsub
      const response = await fetch(
        `${this.config.apiUrl}/resources/applicants/${applicantId}/documents`,
        {
          method: "POST",
          headers: fetchHeaders as HeadersInit,
          body: formData as any, // –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ any –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å FormData
        }
      );

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Sumsub API error: ${response.status} - ${errorText}`);
      }

      const result = await response.json();

      return {
        success: true,
        imageId: result.imageId,
        message: "Document submitted successfully",
      };
    } catch (error) {
      console.error("Error submitting document to Sumsub:", error);
      return {
        success: false,
        message: `Failed to submit document: ${
          error instanceof Error ? error.message : "Unknown error"
        }`,
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ Sumsub
   */
  async getVerificationLevel(
    levelName: string
  ): Promise<SumsubVerificationLevel | null> {
    try {
      // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
      const headers = this.getAuthHeaders(
        "GET",
        `/resources/settings/applications/${this.config.appId}/levels/${levelName}`
      );

      // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ API Sumsub
      const response = await fetch(
        `${this.config.apiUrl}/resources/settings/applications/${this.config.appId}/levels/${levelName}`,
        {
          method: "GET",
          headers,
        }
      );

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Sumsub API error: ${response.status} - ${errorText}`);
      }

      const result = await response.json();

      // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ Sumsub –≤ –Ω–∞—à–∏ —Ç–∏–ø—ã
      const requiredDocuments: DocumentType[] = [];
      if (result.requirements && Array.isArray(result.requirements)) {
        for (const req of result.requirements) {
          if (
            req.type === "ID" ||
            req.type === "PASSPORT" ||
            req.type === "DRIVERS"
          ) {
            requiredDocuments.push("PASSPORT");
          } else if (
            req.type === "UTILITY_BILL" ||
            req.type === "BANK_STATEMENT"
          ) {
            requiredDocuments.push("UTILITY_BILL");
          } else if (req.type === "SELFIE") {
            requiredDocuments.push("SELFIE");
          }
        }
      }

      return {
        levelName: result.name || levelName,
        requiredDocuments,
        additionalChecks: result.checks || [],
      };
    } catch (error) {
      console.error("Error fetching Sumsub verification level:", error);
      return null;
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±—Ö—É–∫–∞ –æ—Ç Sumsub
   */
  async handleWebhook(payload: any, signature: string): Promise<boolean> {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ –≤–µ–±—Ö—É–∫–∞, –µ—Å–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω —Å–µ–∫—Ä–µ—Ç
    if (this.config.webHookSecret) {
      // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏
      // const expectedSignature = this.calculateWebhookSignature(payload);
      // if (signature !== expectedSignature) {
      //   console.error("Invalid webhook signature");
      //   return false;
      // }
    }

    try {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –≤–µ–±—Ö—É–∫–∞
      const { type, applicantId, reviewResult } = payload;

      if (
        type === "applicant.statusChanged" ||
        type === "applicant.reviewResultChanged"
      ) {
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ KYC –≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ
        await this.updateKYCStatusFromWebhook(applicantId, reviewResult);
      }

      return true;
    } catch (error) {
      console.error("Error handling Sumsub webhook:", error);
      return false;
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ KYC –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏ Sumsub
   */
  private async updateKYCStatusFromWebhook(
    applicantId: string,
    reviewResult: any
  ): Promise<void> {
    try {
      // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è KYC –ø–æ applicantId
      const kycProfile = await db.kYCProfile.findFirst({
        where: {
          additionalData: {
            path: ["sumsubApplicantId"],
            equals: applicantId,
          },
        },
      });

      if (!kycProfile) {
        console.error(`KYC profile not found for applicant ID: ${applicantId}`);
        return;
      }

      // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –∏ —É—Ä–æ–≤–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ Sumsub
      let newStatus: KYCStatus = "PENDING";
      let newLevel: KYCLevel = kycProfile.level as KYCLevel;

      if (reviewResult && reviewResult.reviewAnswer) {
        switch (reviewResult.reviewAnswer) {
          case "GREEN":
            newStatus = "VERIFIED";
            // –ü–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
            if (reviewResult.type && reviewResult.type.includes("advanced")) {
              newLevel = "ENHANCED";
            } else {
              newLevel = "STANDARD";
            }
            break;
          case "RED":
            newStatus = "REJECTED";
            break;
          case "GRAY":
            newStatus = "IN_REVIEW";
            break;
          default:
            newStatus = "PENDING";
        }
      }

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è KYC
      await db.kYCProfile.update({
        where: { id: kycProfile.id },
        data: {
          status: newStatus,
          level: newLevel,
          lastUpdated: new Date(),
          additionalData: {
            ...kycProfile.additionalData,
            sumsubLastResult: reviewResult,
            sumsubLastUpdate: new Date().toISOString(),
          },
        },
      });

      // –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –∫–æ–º–ø–ª–∞–µ–Ω—Å–∞
      await this.complianceService.createComplianceEvent({
        type:
          newStatus === "VERIFIED"
            ? "KYC_APPROVED"
            : newStatus === "REJECTED"
            ? "KYC_REJECTED"
            : "KYC_SUBMITTED",
        userId: kycProfile.userId,
        walletAddress: kycProfile.walletAddress,
        data: {
          applicantId,
          previousStatus: kycProfile.status,
          newStatus,
          reviewResult,
        },
        severity: newStatus === "REJECTED" ? "HIGH" : "MEDIUM",
      });
    } catch (error) {
      console.error("Error updating KYC status from webhook:", error);
    }
  }

  /**
   * –ö–∞—Ä—Ç–∞ —Ç–∏–ø–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç Sumsub
   */
  private mapDocumentTypeToSumsub(documentType: DocumentType): string {
    switch (documentType) {
      case "PASSPORT":
        return "PASSPORT";
      case "NATIONAL_ID":
        return "ID_CARD";
      case "DRIVING_LICENSE":
        return "DRIVERS";
      case "RESIDENCE_PERMIT":
        return "RESIDENCE_PERMIT";
      case "TAX_ID":
        return "TAX_ID";
      case "UTILITY_BILL":
        return "UTILITY_BILL";
      case "BANK_STATEMENT":
        return "BANK_STATEMENT";
      case "SELFIE":
        return "SELFIE";
      default:
        return "OTHER";
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è API Sumsub
   */
  private getAuthHeaders(
    method: string,
    path: string,
    body: any = null
  ): Record<string, string> {
    const timestamp = Date.now().toString();
    const methodUpper = method.toUpperCase();

    // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
    let stringToSign = timestamp + methodUpper + path;
    if (body) {
      const bodyStr = typeof body === "string" ? body : JSON.stringify(body);
      stringToSign += bodyStr;
    }

    // –í Node.js –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è HMAC-SHA256 –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å crypto
    // –ù–æ –ø–æ—Å–∫–æ–ª—å–∫—É –º—ã –≤ –±—Ä–∞—É–∑–µ—Ä–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º Web Crypto API
    const signature = this.calculateHMAC(this.config.secret, stringToSign);

    return {
      "X-App-Id": this.config.appId,
      "X-Timestamp": timestamp,
      "X-Nonce": generateId("nonce"),
      "X-Signature": signature,
    };
  }

  /**
   * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ HMAC-SHA256 –ø–æ–¥–ø–∏—Å–∏
   */
  private calculateHMAC(secret: string, message: string): string {
    // –í –±—Ä–∞—É–∑–µ—Ä–Ω–æ–π —Å—Ä–µ–¥–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º Web Crypto API
    // –í Node.js —Å—Ä–µ–¥–µ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å crypto –º–æ–¥—É–ª—å
    // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –æ–±–µ–∏–º–∏ —Å—Ä–µ–¥–∞–º–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –±—É–¥–µ—Ç –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç —Å—Ä–µ–¥—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è

    // –≠—Ç–æ –∑–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É
    // –í Node.js: const crypto = require('crypto');
    // return crypto.createHmac('sha256', secret).update(message).digest('hex');

    // –î–ª—è –±—Ä–∞—É–∑–µ—Ä–∞: —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Web Crypto API
    console.warn(
      "HMAC calculation needs to be implemented based on runtime environment"
    );
    return "IMPLEMENT_HMAC_CALCULATION"; // –ó–∞–≥–ª—É—à–∫–∞
  }
}
