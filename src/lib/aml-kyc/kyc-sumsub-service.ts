/**
 * üîê KYC Sumsub Service - Enhanced KYC with Sumsub Integration
 *
 * –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π KYC —Å–µ—Ä–≤–∏—Å —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Sumsub –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
 * –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–º–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º–∏ –∫–æ–º–ø–ª–∞–µ–Ω—Å–∞
 */

import {
  CreateKYCRequest,
  DocumentType,
  KYCLevel,
  KYCStatus,
  KYCVerificationResponse,
} from "./types";

import { ComplianceService } from "./compliance-service";
import { KYCService } from "./kyc-service";
import { SumsubConfig, SumsubService } from "./sumsub-service";

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Prisma
import { db } from "../../lib/db";

export interface KYCVerificationLevel {
  levelName: "basic" | "standard" | "enhanced" | "enterprise";
  displayName: string;
  requiredDocuments: DocumentType[];
  additionalChecks: string[];
  maxTransactionLimit?: number;
  features: string[];
}

export interface SumsubKYCRequest extends CreateKYCRequest {
  verificationLevel: "basic" | "standard" | "enhanced" | "enterprise";
  useSumsub?: boolean;
}

export interface SumsubKYCResponse extends KYCVerificationResponse {
  sumsubApplicantId?: string;
  sumsubAccessToken?: string;
  verificationLevel?: string;
  nextSteps?: string[];
}

export class KYCSumsubService {
  private kycService: KYCService;
  private sumsubService: SumsubService;
  private complianceService: ComplianceService;
  private sumsubConfig: SumsubConfig;

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
  private static readonly VERIFICATION_LEVELS: Record<
    string,
    KYCVerificationLevel
  > = {
    basic: {
      levelName: "basic",
      displayName: "–ë–∞–∑–æ–≤–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è",
      requiredDocuments: ["SELFIE"],
      additionalChecks: ["email_verification", "phone_verification"],
      maxTransactionLimit: 1000,
      features: ["basic_trading", "limited_withdrawals"],
    },
    standard: {
      levelName: "standard",
      displayName: "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è",
      requiredDocuments: ["PASSPORT", "SELFIE"],
      additionalChecks: ["address_verification", "identity_verification"],
      maxTransactionLimit: 10000,
      features: ["full_trading", "standard_withdrawals", "nft_minting"],
    },
    enhanced: {
      levelName: "enhanced",
      displayName: "–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è",
      requiredDocuments: ["PASSPORT", "SELFIE", "UTILITY_BILL"],
      additionalChecks: ["enhanced_due_diligence", "source_of_funds"],
      maxTransactionLimit: 50000,
      features: [
        "full_trading",
        "enhanced_withdrawals",
        "nft_minting",
        "staking",
      ],
    },
    enterprise: {
      levelName: "enterprise",
      displayName: "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è",
      requiredDocuments: [
        "PASSPORT",
        "SELFIE",
        "UTILITY_BILL",
        "BANK_STATEMENT",
      ],
      additionalChecks: [
        "corporate_verification",
        "ubo_verification",
        "enhanced_due_diligence",
      ],
      maxTransactionLimit: 100000,
      features: [
        "full_trading",
        "enterprise_withdrawals",
        "nft_minting",
        "staking",
        "api_access",
      ],
    },
  };

  constructor(sumsubConfig: SumsubConfig) {
    this.kycService = new KYCService();
    this.sumsubService = new SumsubService(sumsubConfig);
    this.complianceService = new ComplianceService();
    this.sumsubConfig = sumsubConfig;
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ KYC –ø—Ä–æ—Ñ–∏–ª—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Sumsub
   */
  async createKYCProfileWithSumsub(
    request: SumsubKYCRequest
  ): Promise<SumsubKYCResponse> {
    try {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞
      const validationErrors = this.validateSumsubKYCRequest(request);
      if (validationErrors.length > 0) {
        return {
          success: false,
          status: "REJECTED",
          level: "BASIC",
          message: "Validation failed",
          errors: validationErrors,
        };
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
      const existingProfile = await this.kycService.getKYCProfileByUserId(
        request.userId
      );
      if (existingProfile) {
        return {
          success: false,
          status: existingProfile.status,
          level: existingProfile.level,
          message: "KYC profile already exists for this user",
        };
      }

      let sumsubApplicantId: string | undefined;
      let sumsubAccessToken: string | undefined;

      // –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Sumsub –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
      if (request.useSumsub !== false) {
        // –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –≤ Sumsub
        const sumsubResult = await this.sumsubService.createApplicant(
          request.userId,
          undefined, // email –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ
          undefined, // phone –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ
          request.personalData
        );

        if (!sumsubResult.success) {
          return {
            success: false,
            status: "REJECTED",
            level: "BASIC",
            message: `Sumsub integration failed: ${sumsubResult.message}`,
          };
        }

        sumsubApplicantId = sumsubResult.applicantId;

        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è Sumsub SDK
        const tokenResult = await this.sumsubService.generateAccessToken(
          sumsubApplicantId,
          this.mapLevelToSumsubLevel(request.verificationLevel)
        );

        if (tokenResult.success) {
          sumsubAccessToken = tokenResult.token;
        }
      }

      // –°–æ–∑–¥–∞–Ω–∏–µ KYC –ø—Ä–æ—Ñ–∏–ª—è –≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ
      const kycRequest: CreateKYCRequest = {
        userId: request.userId,
        walletAddress: request.walletAddress,
        personalData: request.personalData,
        addresses: request.addresses,
        documents: request.documents,
      };

      const kycResult = await this.kycService.createKYCProfile(kycRequest);

      if (!kycResult.success) {
        return {
          ...kycResult,
          sumsubApplicantId,
          sumsubAccessToken,
        };
      }

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ Sumsub
      if (sumsubApplicantId) {
        await this.updateProfileWithSumsubData(
          kycResult.profileId!,
          sumsubApplicantId!,
          request.verificationLevel
        );
      }

      // –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –∫–æ–º–ø–ª–∞–µ–Ω—Å–∞
      await this.complianceService.createComplianceEvent({
        type: "KYC_SUBMITTED",
        userId: request.userId,
        walletAddress: request.walletAddress,
        data: {
          profileId: kycResult.profileId,
          verificationLevel: request.verificationLevel,
          useSumsub: request.useSumsub !== false,
          sumsubApplicantId,
        },
        severity: "LOW",
      });

      const levelConfig =
        KYCSumsubService.VERIFICATION_LEVELS[request.verificationLevel];
      const mappedLevel = this.mapSumsubLevelToKYCLevel(
        request.verificationLevel
      );

      return {
        success: true,
        profileId: kycResult.profileId,
        status: "PENDING",
        level: mappedLevel,
        message: "KYC profile created successfully with Sumsub integration",
        sumsubApplicantId,
        sumsubAccessToken,
        verificationLevel: request.verificationLevel,
        nextSteps: this.getNextStepsForLevel(request.verificationLevel),
      };
    } catch (error) {
      console.error("Error creating KYC profile with Sumsub:", error);
      return {
        success: false,
        status: "REJECTED",
        level: "BASIC",
        message: "Internal error occurred during KYC profile creation",
        errors: [error instanceof Error ? error.message : "Unknown error"],
      };
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑ Sumsub
   */
  async processSumsubVerificationResult(
    applicantId: string,
    reviewResult: any
  ): Promise<{ success: boolean; message?: string }> {
    try {
      // –ü–æ–∏—Å–∫ KYC –ø—Ä–æ—Ñ–∏–ª—è –ø–æ applicant ID
      const kycProfile = await (db as any).kYCProfile.findFirst({
        where: {
          additionalData: {
            path: ["sumsubApplicantId"],
            equals: applicantId,
          },
        },
      });

      if (!kycProfile) {
        return {
          success: false,
          message: "KYC profile not found for applicant",
        };
      }

      // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ Sumsub
      let newStatus: KYCStatus = "PENDING";
      let newLevel: KYCLevel = kycProfile.level as KYCLevel;

      if (reviewResult && reviewResult.reviewAnswer) {
        switch (reviewResult.reviewAnswer) {
          case "GREEN":
            newStatus = "VERIFIED";
            // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –Ω–∞ —Ç–∏–ø–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
            const verificationLevel = kycProfile.additionalData
              ?.verificationLevel as string;
            newLevel = this.mapSumsubLevelToKYCLevel(verificationLevel);
            break;
          case "RED":
            newStatus = "REJECTED";
            break;
          case "GRAY":
            newStatus = "IN_REVIEW";
            break;
          default:
            newStatus = "PENDING";
        }
      }

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ KYC –ø—Ä–æ—Ñ–∏–ª—è
      await this.kycService.updateKYCStatus(
        kycProfile.id,
        newStatus,
        newLevel,
        "SumsubSystem",
        `Sumsub verification result: ${reviewResult?.reviewAnswer}`
      );

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
      await prisma.kYCProfile.update({
        where: { id: kycProfile.id },
        data: {
          additionalData: {
            ...kycProfile.additionalData,
            sumsubLastResult: reviewResult,
            sumsubLastUpdate: new Date().toISOString(),
          },
        },
      });

      return {
        success: true,
        message: `KYC status updated to ${newStatus}`,
      };
    } catch (error) {
      console.error("Error processing Sumsub verification result:", error);
      return {
        success: false,
        message: "Internal error occurred during verification processing",
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
   */
  getAvailableVerificationLevels(): KYCVerificationLevel[] {
    return Object.values(KYCSumsubService.VERIFICATION_LEVELS);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Ä–æ–≤–Ω–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
   */
  getVerificationLevel(levelName: string): KYCVerificationLevel | null {
    return KYCSumsubService.VERIFICATION_LEVELS[levelName] || null;
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async upgradeVerificationLevel(
    userId: string,
    newLevel: "basic" | "standard" | "enhanced" | "enterprise"
  ): Promise<{ success: boolean; message?: string; accessToken?: string }> {
    try {
      const profile = await this.kycService.getKYCProfileByUserId(userId);
      if (!profile) {
        return {
          success: false,
          message: "KYC profile not found",
        };
      }

      const currentLevel = (profile as any).additionalData
        ?.verificationLevel as string;
      if (currentLevel === newLevel) {
        return {
          success: false,
          message: "User already has this verification level",
        };
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –¥–ª—è –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
      const levelConfig = KYCSumsubService.VERIFICATION_LEVELS[newLevel];
      if (!levelConfig) {
        return {
          success: false,
          message: "Invalid verification level",
        };
      }

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ Sumsub
      const sumsubApplicantId = profile.additionalData
        ?.sumsubApplicantId as string;
      let accessToken: string | undefined;

      if (sumsubApplicantId) {
        const tokenResult = await this.sumsubService.generateAccessToken(
          sumsubApplicantId,
          this.mapLevelToSumsubLevel(newLevel)
        );

        if (tokenResult.success) {
          accessToken = tokenResult.token;
        }
      }

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
      await (db as any).kYCProfile.update({
        where: { id: profile.id },
        data: {
          additionalData: {
            ...(profile as any).additionalData,
            verificationLevel: newLevel,
            levelUpgradeRequested: new Date().toISOString(),
          },
        },
      });

      return {
        success: true,
        message: `Verification level upgrade initiated to ${newLevel}`,
        accessToken,
      };
    } catch (error) {
      console.error("Error upgrading verification level:", error);
      return {
        success: false,
        message: "Internal error occurred during level upgrade",
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑ Sumsub
   */
  async getSumsubVerificationStatus(applicantId: string): Promise<{
    status: string;
    checks: any[];
    lastUpdate: string;
  } | null> {
    try {
      const checks = await this.sumsubService.getApplicantChecks(applicantId);
      const applicantInfo = await this.sumsubService.getApplicantInfo(
        applicantId
      );

      if (!applicantInfo) {
        return null;
      }

      return {
        status: this.determineOverallStatus(checks),
        checks,
        lastUpdate: applicantInfo.createdAt,
      };
    } catch (error) {
      console.error("Error getting Sumsub verification status:", error);
      return null;
    }
  }

  // –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è Sumsub KYC –∑–∞–ø—Ä–æ—Å–∞
   */
  private validateSumsubKYCRequest(request: SumsubKYCRequest): string[] {
    const errors: string[] = [];

    // –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
    if (!request.userId || request.userId.trim() === "") {
      errors.push("User ID is required");
    }

    if (!request.walletAddress || request.walletAddress.trim() === "") {
      errors.push("Wallet address is required");
    }

    if (!request.verificationLevel) {
      errors.push("Verification level is required");
    } else if (
      !KYCSumsubService.VERIFICATION_LEVELS[request.verificationLevel]
    ) {
      errors.push("Invalid verification level");
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!request.personalData.firstName || !request.personalData.lastName) {
      errors.push(
        "First name and last name are required for Sumsub verification"
      );
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —É—Ä–æ–≤–Ω—è
    const levelConfig =
      KYCSumsubService.VERIFICATION_LEVELS[request.verificationLevel];
    if (levelConfig && request.documents) {
      const providedDocTypes = request.documents.map((doc) => doc.type);

      for (const requiredDoc of levelConfig.requiredDocuments) {
        if (!providedDocTypes.includes(requiredDoc)) {
          errors.push(
            `Document type ${requiredDoc} is required for ${request.verificationLevel} level`
          );
        }
      }
    }

    return errors;
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —Å –¥–∞–Ω–Ω—ã–º–∏ Sumsub
   */
  private async updateProfileWithSumsubData(
    profileId: string,
    applicantId: string,
    verificationLevel: string
  ): Promise<void> {
    await (db as any).kYCProfile.update({
      where: { id: profileId },
      data: {
        additionalData: {
          sumsubApplicantId: applicantId,
          verificationLevel,
          sumsubIntegrated: true,
          sumsubIntegrationDate: new Date().toISOString(),
        },
      },
    });
  }

  /**
   * –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è –≤ —Ñ–æ—Ä–º–∞—Ç Sumsub
   */
  private mapLevelToSumsubLevel(level: string): string {
    const mapping: Record<string, string> = {
      basic: "basic-kyc",
      standard: "standard-kyc",
      enhanced: "enhanced-kyc",
      enterprise: "enterprise-kyc",
    };
    return mapping[level] || "basic-kyc";
  }

  /**
   * –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ Sumsub —É—Ä–æ–≤–Ω—è –≤ KYC —É—Ä–æ–≤–µ–Ω—å
   */
  private mapSumsubLevelToKYCLevel(level: string): KYCLevel {
    const mapping: Record<string, KYCLevel> = {
      basic: "BASIC",
      standard: "STANDARD",
      enhanced: "ENHANCED",
      enterprise: "PREMIUM",
    };
    return mapping[level] || "BASIC";
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–æ–≤ –¥–ª—è —É—Ä–æ–≤–Ω—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
   */
  private getNextStepsForLevel(level: string): string[] {
    const levelConfig = KYCSumsubService.VERIFICATION_LEVELS[level];
    if (!levelConfig) return [];

    const steps: string[] = [];

    if (levelConfig.requiredDocuments.length > 0) {
      steps.push(
        `Upload required documents: ${levelConfig.requiredDocuments.join(", ")}`
      );
    }

    if (levelConfig.additionalChecks.length > 0) {
      steps.push(
        `Complete additional checks: ${levelConfig.additionalChecks.join(", ")}`
      );
    }

    steps.push("Wait for verification completion");
    steps.push("Check email for verification status");

    return steps;
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–≤–µ—Ä–æ–∫
   */
  private determineOverallStatus(checks: any[]): string {
    if (checks.length === 0) return "PENDING";

    const completedChecks = checks.filter(
      (check) => check.status === "completed"
    );
    const rejectedChecks = checks.filter(
      (check) =>
        check.status === "rejected" ||
        (check.reviewResult && check.reviewResult.reviewAnswer === "RED")
    );

    if (rejectedChecks.length > 0) return "REJECTED";
    if (completedChecks.length === checks.length) return "COMPLETED";
    return "IN_PROGRESS";
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Å–µ—Ä–≤–∏—Å–∞
export { KYCSumsubService };
