/**
 * –û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è NormalDance
 * –£—Å–∫–æ—Ä–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤, –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ, –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
 */

import { PrismaClient } from '@prisma/client'

interface QueryStats {
  query: string
  executionTime: number
  timestamp: number
  parameters: unknown[]
  resultCount: number
}

interface OptimizationRule {
  pattern: RegExp
  suggestion: string
  priority: 'high' | 'medium' | 'low'
}

interface IndexRecommendation {
  table: string
  columns: string[]
  type: 'btree' | 'hash' | 'gin' | 'gist'
  reason: string
  estimatedImprovement: number
}

class DatabaseOptimizer {
  private prisma: PrismaClient
  private queryHistory: QueryStats[] = []
  private slowQueryThreshold = 1000 // 1 —Å–µ–∫—É–Ω–¥–∞
  private maxHistorySize = 1000
  private optimizationRules: OptimizationRule[] = [
    {
      pattern: /SELECT \* FROM/gi,
      suggestion: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –≤–º–µ—Å—Ç–æ SELECT *',
      priority: 'high'
    },
    {
      pattern: /WHERE.*LIKE '%[^%]'/gi,
      suggestion: '–ò–∑–±–µ–≥–∞–π—Ç–µ —à–∞–±–ª–æ–Ω–æ–≤ LIKE —Å –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞–º–∏ –≤ –Ω–∞—á–∞–ª–µ',
      priority: 'high'
    },
    {
      pattern: /ORDER BY.*RAND()/gi,
      suggestion: 'RAND() –æ—á–µ–Ω—å –º–µ–¥–ª–µ–Ω–Ω—ã–π, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –º–µ—Ç–æ–¥—ã —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏',
      priority: 'high'
    },
    {
      pattern: /GROUP BY.*COUNT\(\*\)/gi,
      suggestion: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ COUNT(1) –≤–º–µ—Å—Ç–æ COUNT(*) –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏',
      priority: 'medium'
    },
    {
      pattern: /HAVING COUNT\(\*\) > [0-9]/gi,
      suggestion: '–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ WHERE –≤–º–µ—Å—Ç–æ HAVING –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏',
      priority: 'medium'
    }
  ]

  constructor(prisma: PrismaClient) {
    this.prisma = prisma
  }

  /**
   * –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
   */
  async executeQuery<T>(
    query: () => Promise<T>,
    queryName: string,
    parameters: unknown[] = []
  ): Promise<T> {
    const startTime = Date.now()
    
    try {
      const result = await query()
      const executionTime = Date.now() - startTime
      
      // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
      this.logQuery(queryName, parameters, executionTime, Array.isArray(result) ? result.length : 1)
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–µ–¥–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
      if (executionTime > this.slowQueryThreshold) {
        this.analyzeSlowQuery(queryName, parameters, executionTime)
      }
      
      return result
    } catch (error) {
      const executionTime = Date.now() - startTime
      this.logQuery(queryName, parameters, executionTime, 0, error)
      throw error
    }
  }

  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
   */
  private logQuery(
    query: string,
    parameters: unknown[],
    executionTime: number,
    resultCount: number,
    error?: any
  ): void {
    const queryStats: QueryStats = {
      query,
      executionTime,
      timestamp: Date.now(),
      parameters,
      resultCount
    }

    this.queryHistory.push(queryStats)

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
    if (this.queryHistory.length > this.maxHistorySize) {
      this.queryHistory = this.queryHistory.slice(-this.maxHistorySize)
    }

    // –õ–æ–≥–∏—Ä—É–µ–º –º–µ–¥–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    if (executionTime > this.slowQueryThreshold) {
      console.warn(`Slow query detected: ${query} (${executionTime}ms)`)
    }
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
   */
  private analyzeSlowQuery(query: string, parameters: any[], executionTime: number): void {
    const suggestions = this.getOptimizationSuggestions(query)
    
    console.group(`üêå Slow Query Analysis: ${query}`)
    console.log(`Execution time: ${executionTime}ms`)
    console.log(`Parameters:`, parameters)
    console.log(`Suggestions:`, suggestions)
    console.groupEnd()
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
   */
  private getOptimizationSuggestions(query: string): string[] {
    const suggestions: string[] = []

    for (const rule of this.optimizationRules) {
      if (rule.pattern.test(query)) {
        suggestions.push(`[${rule.priority.toUpperCase()}] ${rule.suggestion}`)
      }
    }

    // –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è NormalDance
    if (query.includes('tracks') && query.includes('JOIN')) {
      suggestions.push('[HIGH] –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –µ—Å—Ç—å –∏–Ω–¥–µ–∫—Å—ã –Ω–∞ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–∞—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ tracks')
    }

    if (query.includes('play_history') && !query.includes('INDEX')) {
      suggestions.push('[MEDIUM] –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –Ω–∞ user_id –∏ track_id –≤ play_history')
    }

    if (query.includes('likes') && query.includes('WHERE')) {
      suggestions.push('[MEDIUM] –î–æ–±–∞–≤—å—Ç–µ —Å–æ—Å—Ç–∞–≤–Ω–æ–π –∏–Ω–¥–µ–∫—Å –Ω–∞ user_id –∏ track_id –≤ —Ç–∞–±–ª–∏—Ü–µ likes')
    }

    return suggestions
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
   */
  getQueryStats() {
    if (this.queryHistory.length === 0) {
      return {
        totalQueries: 0,
        averageExecutionTime: 0,
        slowQueries: 0,
        queriesPerSecond: 0
      }
    }

    const totalQueries = this.queryHistory.length
    const slowQueries = this.queryHistory.filter(q => q.executionTime > this.slowQueryThreshold).length
    const averageExecutionTime = this.queryHistory.reduce((sum, q) => sum + q.executionTime, 0) / totalQueries
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –≤ —Å–µ–∫—É–Ω–¥—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç
    const fiveMinutesAgo = Date.now() - 5 * 60 * 1000
    const recentQueries = this.queryHistory.filter(q => q.timestamp > fiveMinutesAgo)
    const queriesPerSecond = recentQueries.length / 300

    return {
      totalQueries,
      averageExecutionTime: Math.round(averageExecutionTime),
      slowQueries,
      queriesPerSecond: Math.round(queriesPerSecond * 100) / 100,
      topSlowQueries: this.queryHistory
        .sort((a, b) => b.executionTime - a.executionTime)
        .slice(0, 5)
        .map(q => ({
          query: q.query,
          executionTime: q.executionTime,
          resultCount: q.resultCount
        }))
    }
  }

  /**
   * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–∫–æ–≤ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
   */
  async getTracksWithCache(
    options: {
      limit?: number
      offset?: number
      genre?: string
      artistId?: string
      sortBy?: 'createdAt' | 'plays' | 'likes'
      sortOrder?: 'asc' | 'desc'
    } = {}
  ) {
    const cacheKey = `tracks:${JSON.stringify(options)}`
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–µ—à–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ Redis/–∫–µ—à–∞)
    // const cached = await this.getFromCache(cacheKey)
    // if (cached) return cached

    const {
      limit = 20,
      offset = 0,
      genre,
      artistId,
      sortBy = 'createdAt',
      sortOrder = 'desc'
    } = options

    return this.executeQuery(async () => {
      const where: any = {}
      
      if (genre) {
        where.genre = genre
      }
      
      if (artistId) {
        where.artistId = artistId
      }

      const orderBy: any = {}
      orderBy[sortBy] = sortOrder

      const tracks = await this.prisma.track.findMany({
        where,
        orderBy,
        skip: offset,
        take: limit,
        include: {
          artist: {
            select: {
              id: true,
              username: true,
              avatar: true
            }
          },
          _count: {
            select: {
              likes: true,
              comments: true,
              playHistory: true
            }
          }
        }
      })

      // –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Redis/–∫–µ—à)
      // await this.setCache(cacheKey, tracks, { ttl: 300 }) // 5 –º–∏–Ω—É—Ç

      return tracks
    }, 'getTracksWithCache', [options])
  }

  /**
   * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π
   */
  async getUserPlayHistory(
    userId: string,
    options: {
      limit?: number
      offset?: number
      startDate?: Date
      endDate?: Date
    } = {}
  ) {
    const cacheKey = `playHistory:${userId}:${JSON.stringify(options)}`
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–µ—à–∞
    // const cached = await this.getFromCache(cacheKey)
    // if (cached) return cached

    const {
      limit = 50,
      offset = 0,
      startDate,
      endDate
    } = options

    return this.executeQuery(async () => {
      const where: any = {
        userId
      }
      
      if (startDate) {
        where.createdAt = { gte: startDate }
      }
      
      if (endDate) {
        where.createdAt = { ...where.createdAt, lte: endDate }
      }

      const history = await this.prisma.playHistory.findMany({
        where,
        include: {
          track: {
            include: {
              artist: {
                select: {
                  id: true,
                  username: true,
                  avatar: true
                }
              }
            }
          }
        },
        orderBy: {
          createdAt: 'desc'
        },
        skip: offset,
        take: limit
      })

      // –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
      // await this.setCache(cacheKey, history, { ttl: 600 }) // 10 –º–∏–Ω—É—Ç

      return history
    }, 'getUserPlayHistory', [userId, options])
  }

  /**
   * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
   */
  async getRecommendations(userId: string, limit: number = 10) {
    const cacheKey = `recommendations:${userId}:${limit}`
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–µ—à–∞
    // const cached = await this.getFromCache(cacheKey)
    // if (cached) return cached

    return this.executeQuery(async () => {
      // –ü–æ–ª—É—á–∞–µ–º –∂–∞–Ω—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ª—É—à–∞–µ—Ç —á–∞—â–µ –≤—Å–µ–≥–æ
      const userGenres = await this.prisma.playHistory.groupBy({
        by: ['track'],
        where: { userId },
        _count: { track: true },
        orderBy: { _count: { track: 'desc' } },
        take: 5
      })

      if (userGenres.length === 0) {
        // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç—Ä–µ–∫–∏
        return this.prisma.track.findMany({
          include: {
            artist: {
              select: {
                id: true,
                username: true,
                avatar: true
              }
            },
            _count: {
              select: {
                likes: true,
                playHistory: true
              }
            }
          },
          orderBy: { playCount: 'desc' },
          take: limit
        })
      }

      // –ü–æ–ª—É—á–∞–µ–º –∂–∞–Ω–ª—ã –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
      const genreIds = userGenres.map(g => g.track.genre)

      // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∂–∞–Ω—Ä–æ–≤ –∏ –∞—Ä—Ç–∏—Å—Ç–æ–≤
      const recommendations = await this.prisma.track.findMany({
        where: {
          genre: { in: genreIds },
          artistId: { not: userId } // –ò—Å–∫–ª—é—á–∞–µ–º —Ç—Ä–µ–∫–∏ —Å–∞–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        },
        include: {
          artist: {
            select: {
              id: true,
              username: true,
              avatar: true
            }
          },
          _count: {
            select: {
              likes: true,
              playHistory: true
            }
          }
        },
        orderBy: [
          { playCount: 'desc' },
          { likeCount: 'desc' }
        ],
        take: limit
      })

      // –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
      // await this.setCache(cacheKey, recommendations, { ttl: 1800 }) // 30 –º–∏–Ω—É—Ç

      return recommendations
    }, 'getRecommendations', [userId, limit])
  }

  /**
   * –ü–∞–∫–µ—Ç–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   */
  async batchUpdateStats(trackIds: string[], updates: { plays?: number; likes?: number }) {
    return this.executeQuery(async () => {
      const updatePromises = trackIds.map(trackId => 
        this.prisma.track.update({
          where: { id: trackId },
          data: updates
        })
      )

      return await Promise.all(updatePromises)
    }, 'batchUpdateStats', [trackIds, updates])
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
   */
  async analyzePerformance() {
    const queryStats = this.getQueryStats()
    
    // –ê–Ω–∞–ª–∏–∑ –∏–Ω–¥–µ–∫—Å–æ–≤ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ —Å–∏—Å—Ç–µ–º–µ PostgreSQL)
    const indexRecommendations: IndexRecommendation[] = [
      {
        table: 'play_history',
        columns: ['user_id', 'track_id'],
        type: 'btree',
        reason: '–£—Å–∫–æ—Ä–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π',
        estimatedImprovement: 85
      },
      {
        table: 'likes',
        columns: ['user_id', 'track_id'],
        type: 'btree',
        reason: '–£—Å–∫–æ—Ä–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–æ–∫ –ª–∞–π–∫–æ–≤ –∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤',
        estimatedImprovement: 75
      },
      {
        table: 'tracks',
        columns: ['artist_id', 'genre'],
        type: 'btree',
        reason: '–£—Å–∫–æ—Ä–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –∞—Ä—Ç–∏—Å—Ç–∞–º –∏ –∂–∞–Ω—Ä–∞–º',
        estimatedImprovement: 65
      },
      {
        table: 'users',
        columns: ['email', 'username'],
        type: 'btree',
        reason: '–£—Å–∫–æ—Ä–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
        estimatedImprovement: 90
      }
    ]

    return {
      queryStats,
      indexRecommendations,
      optimizationSuggestions: this.getOptimizationSuggestions(''),
      databaseHealth: {
        connectionPool: {
          active: 5,
          idle: 10,
          total: 15
        },
        memoryUsage: '45MB',
        cacheHitRate: '78%'
      }
    }
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  async cleanupOldData() {
    const thirtyDaysAgo = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000)
    
    return this.executeQuery(async () => {
      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
      const deletedHistory = await this.prisma.playHistory.deleteMany({
        where: {
          createdAt: { lt: thirtyDaysAgo }
        }
      })

      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ª–∞–π–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
      const deletedLikes = await this.prisma.like.deleteMany({
        where: {
          createdAt: { lt: thirtyDaysAgo }
        }
      })

      // –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤
      this.queryHistory = this.queryHistory.filter(q => q.timestamp > thirtyDaysAgo)

      return {
        deletedHistory: deletedHistory.count,
        deletedLikes: deletedLikes.count,
        queryHistoryCleaned: this.queryHistory.length
      }
    }, 'cleanupOldData', [])
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   */
  generatePerformanceReport() {
    const stats = this.getQueryStats()
    const analysis = this.analyzePerformance()

    return {
      timestamp: new Date().toISOString(),
      summary: {
        totalQueries: stats.totalQueries,
        averageExecutionTime: `${stats.averageExecutionTime}ms`,
        slowQueries: stats.slowQueries,
        performanceScore: this.calculatePerformanceScore(stats)
      },
      recommendations: {
        indexes: analysis.indexRecommendations,
        queryOptimizations: analysis.optimizationSuggestions,
        maintenance: [
          '–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤',
          '–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö',
          '–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å—ã —Å –¥–ª–∏—Ç–µ–ª—å–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è'
        ]
      },
      detailedStats: stats
    }
  }

  /**
   * –†–∞—Å—á–µ—Ç –æ—Ü–µ–Ω–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   */
  private calculatePerformanceScore(stats: any): number {
    const baseScore = 100
    const slowQueryPenalty = stats.slowQueries * 2
    const executionTimePenalty = stats.averageExecutionTime / 10
    const qpsBonus = Math.min(stats.queriesPerSecond * 2, 20)
    
    return Math.max(0, baseScore - slowQueryPenalty - executionTimePenalty + qpsBonus)
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞
export function createDatabaseOptimizer(prisma: PrismaClient): DatabaseOptimizer {
  return new DatabaseOptimizer(prisma)
}

// –•—É–∫–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ React
export function useDatabaseOptimizer(prisma: PrismaClient) {
  const optimizer = createDatabaseOptimizer(prisma)
  const [stats, setStats] = useState(optimizer.getQueryStats())

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  useEffect(() => {
    const interval = setInterval(() => {
      setStats(optimizer.getQueryStats())
    }, 5000)

    return () => clearInterval(interval)
  }, [optimizer])

  return {
    stats,
    executeQuery: optimizer.executeQuery.bind(optimizer),
    getTracksWithCache: optimizer.getTracksWithCache.bind(optimizer),
    getUserPlayHistory: optimizer.getUserPlayHistory.bind(optimizer),
    getRecommendations: optimizer.getRecommendations.bind(optimizer),
    batchUpdateStats: optimizer.batchUpdateStats.bind(optimizer),
    analyzePerformance: optimizer.analyzePerformance.bind(optimizer),
    cleanupOldData: optimizer.cleanupOldData.bind(optimizer),
    generatePerformanceReport: optimizer.generatePerformanceReport.bind(optimizer)
  }
}

export default DatabaseOptimizer