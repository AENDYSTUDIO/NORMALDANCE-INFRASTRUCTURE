"use client";

import React, { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { useWalletContext } from "./wallet-provider";
import { TelegramUtils } from "@/lib/wallet/utils";
import { logger } from "@/lib/utils/logger";

/**
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è Invisible Wallet
 */
export function InvisibleWalletDemo() {
  const { 
    connected, 
    publicKey, 
    balance, 
    isInvisibleWallet, 
    starsBalance,
    recoverySetup,
    purchaseWithStars,
    setupRecovery,
    connect,
    disconnect,
    error 
  } = useWalletContext();
  
  const [isPurchasing, setIsPurchasing] = useState(false);
  const [purchaseAmount, setPurchaseAmount] = useState(100);
  const [isSettingUpRecovery, setIsSettingUpRecovery] = useState(false);

  useEffect(() => {
    logger.info("InvisibleWalletDemo mounted", {
      isInvisibleWallet,
      connected,
      publicKey: publicKey?.toBase58()
    });
  }, [isInvisibleWallet, connected, publicKey]);

  const handlePurchaseWithStars = async () => {
    if (!purchaseWithStars) {
      logger.error("purchaseWithStars not available");
      return;
    }

    setIsPurchasing(true);
    try {
      const result = await purchaseWithStars(
        purchaseAmount,
        `–ü–æ–∫—É–ø–∫–∞ ${purchaseAmount} NDT —Ç–æ–∫–µ–Ω–æ–≤`
      );
      
      logger.info("Stars purchase completed", result);
      alert(`–ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞!\nStars: ${result.starsAmount}\nSOL: ${result.solAmount}\nNDT: ${result.ndtAmount}`);
    } catch (error) {
      logger.error("Stars purchase failed", error as Error);
      alert(`–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    } finally {
      setIsPurchasing(false);
    }
  };

  const handleSetupRecovery = async () => {
    if (!setupRecovery) {
      logger.error("setupRecovery not available");
      return;
    }

    setIsSettingUpRecovery(true);
    try {
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–±–æ—Ä –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
      const mockContacts = [
        {
          id: '123456789',
          username: 'trusted_contact_1',
          firstName: 'Alice',
          isVerified: true,
          trustLevel: 0.9
        },
        {
          id: '987654321',
          username: 'trusted_contact_2',
          firstName: 'Bob',
          isVerified: true,
          trustLevel: 0.8
        }
      ];

      await setupRecovery(mockContacts);
      logger.info("Recovery setup completed");
      alert("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ!");
    } catch (error) {
      logger.error("Recovery setup failed", error as Error);
      alert(`–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    } finally {
      setIsSettingUpRecovery(false);
    }
  };

  const formatAddress = (address: string) => {
    return `${address.slice(0, 4)}...${address.slice(-4)}`;
  };

  if (!TelegramUtils.isTelegramWebApp()) {
    return (
      <Card className="w-full max-w-md mx-auto">
        <CardHeader>
          <CardTitle>Invisible Wallet –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</CardTitle>
          <CardDescription>
            Invisible Wallet —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ Telegram Mini App
          </CardDescription>
        </CardHeader>
        <CardContent>
          <p className="text-sm text-muted-foreground">
            –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–∫—Ä–æ–π—Ç–µ —ç—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ Telegram –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Invisible Wallet.
          </p>
        </CardContent>
      </Card>
    );
  }

  return (
    <div className="w-full max-w-2xl mx-auto space-y-6 p-4">
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <CardTitle className="flex items-center gap-2">
              Invisible Wallet
              {isInvisibleWallet && (
                <Badge variant="secondary">–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π</Badge>
              )}
            </CardTitle>
            <div className="flex items-center gap-2">
              {connected && (
                <Badge variant="outline" className="text-green-600 border-green-600">
                  –ü–æ–¥–∫–ª—é—á–µ–Ω
                </Badge>
              )}
              {isInvisibleWallet && (
                <Badge variant="outline" className="text-blue-600 border-blue-600">
                  Telegram
                </Badge>
              )}
            </div>
          </div>
          <CardDescription>
            –ë–µ—Å—à–æ–≤–Ω—ã–π –∫–æ—à–µ–ª–µ–∫ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∫–ª—é—á–∞–º–∏
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          {error && (
            <div className="p-3 bg-red-50 border border-red-200 rounded-md">
              <p className="text-sm text-red-600">–û—à–∏–±–∫–∞: {error}</p>
            </div>
          )}

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="space-y-2">
              <h4 className="text-sm font-medium">–°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</h4>
              <div className="flex items-center gap-2">
                <div className={`w-3 h-3 rounded-full ${connected ? 'bg-green-500' : 'bg-red-500'}`} />
                <span className="text-sm">
                  {connected ? '–ü–æ–¥–∫–ª—é—á–µ–Ω' : '–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω'}
                </span>
              </div>
            </div>

            <div className="space-y-2">
              <h4 className="text-sm font-medium">–¢–∏–ø –∫–æ—à–µ–ª—å–∫–∞</h4>
              <div className="text-sm">
                {isInvisibleWallet ? 'Invisible Wallet' : '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–æ—à–µ–ª–µ–∫'}
              </div>
            </div>

            {publicKey && (
              <div className="space-y-2">
                <h4 className="text-sm font-medium">–ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á</h4>
                <div className="text-sm font-mono bg-muted p-2 rounded">
                  {formatAddress(publicKey.toBase58())}
                </div>
              </div>
            )}

            {balance !== null && (
              <div className="space-y-2">
                <h4 className="text-sm font-medium">–ë–∞–ª–∞–Ω—Å SOL</h4>
                <div className="text-sm font-semibold">
                  {balance.toFixed(6)} SOL
                </div>
              </div>
            )}

            {starsBalance !== null && (
              <div className="space-y-2">
                <h4 className="text-sm font-medium">–ë–∞–ª–∞–Ω—Å Stars</h4>
                <div className="text-sm font-semibold">
                  {starsBalance} Stars
                </div>
              </div>
            )}

            {recoverySetup !== undefined && (
              <div className="space-y-2">
                <h4 className="text-sm font-medium">–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ</h4>
                <div className="flex items-center gap-2">
                  <div className={`w-3 h-3 rounded-full ${recoverySetup ? 'bg-green-500' : 'bg-yellow-500'}`} />
                  <span className="text-sm">
                    {recoverySetup ? '–ù–∞—Å—Ç—Ä–æ–µ–Ω–æ' : '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ'}
                  </span>
                </div>
              </div>
            )}
          </div>

          <div className="flex flex-wrap gap-2 pt-4">
            {!connected && (
              <Button onClick={connect} variant="default">
                –ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫–æ—à–µ–ª–µ–∫
              </Button>
            )}
            
            {connected && (
              <Button onClick={disconnect} variant="outline">
                –û—Ç–∫–ª—é—á–∏—Ç—å
              </Button>
            )}

            {isInvisibleWallet && connected && purchaseWithStars && (
              <div className="flex items-center gap-2">
                <input
                  type="number"
                  value={purchaseAmount}
                  onChange={(e) => setPurchaseAmount(Number(e.target.value))}
                  min={1}
                  max={10000}
                  className="w-24 px-2 py-1 border rounded text-sm"
                />
                <Button 
                  onClick={handlePurchaseWithStars} 
                  disabled={isPurchasing}
                  variant="secondary"
                >
                  {isPurchasing ? '–ü–æ–∫—É–ø–∫–∞...' : '–ö—É–ø–∏—Ç—å –∑–∞ Stars'}
                </Button>
              </div>
            )}

            {isInvisibleWallet && connected && setupRecovery && !recoverySetup && (
              <Button 
                onClick={handleSetupRecovery} 
                disabled={isSettingUpRecovery}
                variant="outline"
              >
                {isSettingUpRecovery ? '–ù–∞—Å—Ç—Ä–æ–π–∫–∞...' : '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ'}
              </Button>
            )}
          </div>
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ Invisible Wallet</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
            <div className="space-y-2">
              <h5 className="font-medium">üîê –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å</h5>
              <ul className="space-y-1 text-muted-foreground">
                <li>‚Ä¢ –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–π</li>
                <li>‚Ä¢ –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ AES-256-GCM</li>
                <li>‚Ä¢ –°–æ—Ü–∏–∞–ª—å–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ</li>
              </ul>
            </div>
            
            <div className="space-y-2">
              <h5 className="font-medium">‚ö° –£–¥–æ–±—Å—Ç–≤–æ</h5>
              <ul className="space-y-1 text-muted-foreground">
                <li>‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è</li>
                <li>‚Ä¢ –ü–æ–∫—É–ø–∫–∏ –∑–∞ Telegram Stars</li>
                <li>‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ seed —Ñ—Ä–∞–∑</li>
              </ul>
            </div>
            
            <div className="space-y-2">
              <h5 className="font-medium">üåê –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è</h5>
              <ul className="space-y-1 text-muted-foreground">
                <li>‚Ä¢ –ù–∞—Ç–∏–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –≤ Telegram</li>
                <li>‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è</li>
                <li>‚Ä¢ –û—Ñ—Ñ–ª–∞–π–Ω –ø–æ–¥–ø–∏—Å—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π</li>
              </ul>
            </div>
            
            <div className="space-y-2">
              <h5 className="font-medium">üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ</h5>
              <ul className="space-y-1 text-muted-foreground">
                <li>‚Ä¢ –ß–µ—Ä–µ–∑ Telegram –∞–∫–∫–∞—É–Ω—Ç</li>
                <li>‚Ä¢ –ß–µ—Ä–µ–∑ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã</li>
                <li>‚Ä¢ –ë–µ–∑ seed —Ñ—Ä–∞–∑—ã</li>
              </ul>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}

export default InvisibleWalletDemo;