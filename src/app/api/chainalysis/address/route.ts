/**
 * üîó Chainalysis Address Analysis API
 *
 * API —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∞–¥—Ä–µ—Å–æ–≤ —á–µ—Ä–µ–∑ Chainalysis
 */

import { NextRequest, NextResponse } from "next/server";
import { ChainalysisService } from "@/lib/aml-kyc/chainalysis-service";
import { ChainalysisAddressAnalysisRequest } from "@/lib/aml-kyc/chainalysis-types";

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const { address, asset, includeTransactions, transactionLimit, includeExposure, includeIdentifications } = body;
    
    if (!address) {
      return NextResponse.json(
        { success: false, error: { code: "MISSING_ADDRESS", message: "Address is required" } },
        { status: 400 }
      );
    }

    if (!asset) {
      return NextResponse.json(
        { success: false, error: { code: "MISSING_ASSET", message: "Asset is required" } },
        { status: 400 }
      );
    }

    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–∞–ª–∏–∑
    const analysisRequest: ChainalysisAddressAnalysisRequest = {
      address,
      asset,
      includeTransactions: includeTransactions || false,
      transactionLimit: transactionLimit || 100,
      includeExposure: includeExposure !== false,
      includeIdentifications: includeIdentifications !== false,
    };

    // –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ Chainalysis
    const chainalysisService = new ChainalysisService();
    const result = await chainalysisService.analyzeAddress(analysisRequest);

    return NextResponse.json(result, { status: 200 });
  } catch (error) {
    console.error("Error in Chainalysis address analysis API:", error);
    return NextResponse.json(
      {
        success: false,
        error: {
          code: "INTERNAL_ERROR",
          message: "Internal server error during address analysis",
        },
      },
      { status: 500 }
    );
  }
}

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const address = searchParams.get("address");
    const asset = searchParams.get("asset") as any;

    if (!address) {
      return NextResponse.json(
        { success: false, error: { code: "MISSING_ADDRESS", message: "Address is required" } },
        { status: 400 }
      );
    }

    if (!asset) {
      return NextResponse.json(
        { success: false, error: { code: "MISSING_ASSET", message: "Asset is required" } },
        { status: 400 }
      );
    }

    // –ü–æ–ª—É—á–∞–µ–º –æ—Ü–µ–Ω–∫—É —Ä–∏—Å–∫–∞ –∞–¥—Ä–µ—Å–∞
    const chainalysisService = new ChainalysisService();
    const riskResult = await chainalysisService.getAddressRisk(address, asset);

    return NextResponse.json(
      { success: true, data: riskResult },
      { status: 200 }
    );
  } catch (error) {
    console.error("Error in Chainalysis address risk API:", error);
    return NextResponse.json(
      {
        success: false,
        error: {
          code: "INTERNAL_ERROR",
          message: "Internal server error during risk assessment",
        },
      },
      { status: 500 }
    );
  }
}