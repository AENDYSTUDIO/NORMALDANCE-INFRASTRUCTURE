/**
 * üîó Chainalysis Portfolio Analysis API
 *
 * API —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è –∞–¥—Ä–µ—Å–æ–≤ —á–µ—Ä–µ–∑ Chainalysis
 */

import { NextRequest, NextResponse } from "next/server";
import { ChainalysisService } from "@/lib/aml-kyc/chainalysis-service";
import { ChainalysisPortfolioAnalysisRequest } from "@/lib/aml-kyc/chainalysis-types";

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const { addresses, asset, includeTransactions, transactionLimit, includeExposure, includeIdentifications } = body;
    
    if (!addresses || !Array.isArray(addresses) || addresses.length === 0) {
      return NextResponse.json(
        { success: false, error: { code: "MISSING_ADDRESSES", message: "Addresses array is required" } },
        { status: 400 }
      );
    }

    if (!asset) {
      return NextResponse.json(
        { success: false, error: { code: "MISSING_ASSET", message: "Asset is required" } },
        { status: 400 }
      );
    }

    if (addresses.length > 100) {
      return NextResponse.json(
        { success: false, error: { code: "TOO_MANY_ADDRESSES", message: "Maximum 100 addresses allowed per request" } },
        { status: 400 }
      );
    }

    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–∞–ª–∏–∑
    const analysisRequest: ChainalysisPortfolioAnalysisRequest = {
      addresses,
      asset,
      includeTransactions: includeTransactions || false,
      transactionLimit: transactionLimit || 50,
      includeExposure: includeExposure !== false,
      includeIdentifications: includeIdentifications !== false,
    };

    // –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ Chainalysis
    const chainalysisService = new ChainalysisService();
    const result = await chainalysisService.analyzePortfolio(analysisRequest);

    return NextResponse.json(result, { status: 200 });
  } catch (error) {
    console.error("Error in Chainalysis portfolio analysis API:", error);
    return NextResponse.json(
      {
        success: false,
        error: {
          code: "INTERNAL_ERROR",
          message: "Internal server error during portfolio analysis",
        },
      },
      { status: 500 }
    );
  }
}

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const addressesParam = searchParams.get("addresses");
    const asset = searchParams.get("asset") as any;

    if (!addressesParam) {
      return NextResponse.json(
        { success: false, error: { code: "MISSING_ADDRESSES", message: "Addresses parameter is required" } },
        { status: 400 }
      );
    }

    if (!asset) {
      return NextResponse.json(
        { success: false, error: { code: "MISSING_ASSET", message: "Asset parameter is required" } },
        { status: 400 }
      );
    }

    // –ü–∞—Ä—Å–∏–º –∞–¥—Ä–µ—Å–∞ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    const addresses = addressesParam.split(",").map(addr => addr.trim()).filter(addr => addr.length > 0);

    if (addresses.length === 0) {
      return NextResponse.json(
        { success: false, error: { code: "INVALID_ADDRESSES", message: "No valid addresses provided" } },
        { status: 400 }
      );
    }

    if (addresses.length > 100) {
      return NextResponse.json(
        { success: false, error: { code: "TOO_MANY_ADDRESSES", message: "Maximum 100 addresses allowed per request" } },
        { status: 400 }
      );
    }

    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–∞–ª–∏–∑
    const analysisRequest: ChainalysisPortfolioAnalysisRequest = {
      addresses,
      asset,
      includeTransactions: false, // –î–ª—è GET –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ –≤–∫–ª—é—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      includeExposure: true,
      includeIdentifications: true,
    };

    // –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ Chainalysis
    const chainalysisService = new ChainalysisService();
    const result = await chainalysisService.analyzePortfolio(analysisRequest);

    return NextResponse.json(result, { status: 200 });
  } catch (error) {
    console.error("Error in Chainalysis portfolio GET API:", error);
    return NextResponse.json(
      {
        success: false,
        error: {
          code: "INTERNAL_ERROR",
          message: "Internal server error during portfolio analysis",
        },
      },
      { status: 500 }
    );
  }
}