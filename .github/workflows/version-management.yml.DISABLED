name: Version Management and Release (SemVer 2.0.0)

on:
  push:
    branches: [main, develop]
    tags: ["v*"]
  release:
    types: [published, created]
  pull_request:
    types: [closed]
    branches: [main]
  workflow_dispatch:
    inputs:
      version-type:
        description: "Version type (major, minor, patch)"
        required: true
        type: choice
        options:
          - major
          - minor
          - patch
          - prerelease
      prerelease-type:
        description: "Pre-release type (alpha, beta, rc)"
        required: false
        type: choice
        options:
          - alpha
          - beta
          - rc
      environment:
        description: "Target environment (staging, production)"
        required: true
        type: choice
        options:
          - staging
          - production
      pre-release:
        description: "Mark as pre-release"
        required: false
        type: boolean
        default: false

env:
  NODE_VERSION: "20.x"

jobs:
  # 1. Version Validation (SemVer 2.0.0 compliant)
  version-validation:
    name: Version Validation (SemVer 2.0)
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true

    outputs:
      should-release: ${{ steps.check.outputs.should-release }}
      version-type: ${{ steps.check.outputs.version-type }}
      is-prerelease: ${{ steps.check.outputs.is-prerelease }}
      prerelease-type: ${{ steps.check.outputs.prerelease-type }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: "**/package-lock.json"

      - name: Install dependencies
        run: npm ci

      - name: Analyze commits for SemVer 2.0.0 compliance
        id: check
        run: |
          # Analyze commit messages to determine version type according to SemVer 2.0.0
          COMMITS=$(git log --oneline --no-merges -n 20 HEAD~1..HEAD || git log --oneline --no-merges -n 10 HEAD~1..HEAD)
          SHOULD_RELEASE="false"
          VERSION_TYPE="patch"
          IS_PRERELEASE="false"
          PRERELEASE_TYPE=""

          # Check for breaking changes (major) - SemVer 2.0.0 compliant
          if echo "$COMMITS" | grep -iE "(feat!|BREAKING CHANGE|breaking change|major|incompatible|api.*change)" > /dev/null; then
            VERSION_TYPE="major"
            SHOULD_RELEASE="true"
          # Check for new features (minor) - SemVer 2.0.0 compliant
          elif echo "$COMMITS" | grep -iE "(feat|feature|add|new)" > /dev/null; then
            VERSION_TYPE="minor"
            SHOULD_RELEASE="true"
          # Check for bug fixes (patch) - SemVer 2.0.0 compliant
          elif echo "$COMMITS" | grep -iE "(fix|bug|error|issue)" > /dev/null; then
            VERSION_TYPE="patch"
            SHOULD_RELEASE="true"
          # Check for pre-release indicators
          elif echo "$COMMITS" | grep -iE "(alpha|beta|rc|prerelease)" > /dev/null; then
            VERSION_TYPE="prerelease"
            IS_PRERELEASE="true"
            # Default to alpha if not specified
            PRERELEASE_TYPE="alpha"
            SHOULD_RELEASE="true"
          fi

          # Extract pre-release type from commit if available
          if [ "$IS_PRERELEASE" = "true" ]; then
            PRERELEASE_TYPE=$(echo "$COMMITS" | grep -iE "(alpha|beta|rc)" | head -n 1 | grep -ioE "(alpha|beta|rc)" | head -n 1 || echo "alpha")
          fi

          echo "should-release=$SHOULD_RELEASE" >> $GITHUB_OUTPUT
          echo "version-type=$VERSION_TYPE" >> $GITHUB_OUTPUT
          echo "is-prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          echo "prerelease-type=$PRERELEASE_TYPE" >> $GITHUB_OUTPUT

    # 2. Version Management (SemVer 2.0 compliant)
  version-management:
    name: Version Management (SemVer 2.0)
    runs-on: ubuntu-latest
    needs: [version-validation]
    if: >-
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true && needs.version-validation.outputs.should-release == 'true') ||
      github.event_name == 'release'

    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
      environment: ${{ steps.environment.outputs.environment }}
      is-prerelease: ${{ steps.version.outputs.is-prerelease }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: "**/package-lock.json"

      - name: Install dependencies
        run: npm ci

      - name: Determine environment
        id: environment
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            ENVIRONMENT="${{ github.event.inputs.environment }}"
          elif [ "${{ github.event_name }}" == "pull_request" ]; then
            ENVIRONMENT="staging"
          else
            ENVIRONMENT="production"
          fi
          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT

      - name: Generate SemVer 2.0.0 compliant version
        id: version
        run: |
          # Get current version from package.json
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"

          # Determine version type
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            VERSION_TYPE="${{ github.event.inputs.version-type }}"
            if [ "$VERSION_TYPE" == "prerelease" ]; then
              PRERELEASE_TYPE="${{ github.event.inputs.prerelease-type }}"
            fi
          elif [ "${{ github.event_name }}" == "pull_request" ]; then
            VERSION_TYPE="${{ needs.version-validation.outputs.version-type }}"
            PRERELEASE_TYPE="${{ needs.version-validation.outputs.prerelease-type }}"
          else
            VERSION_TYPE="patch"
            PRERELEASE_TYPE=""
          fi

          # Use the new version-manager.js script for SemVer 2.0.0 compliance
          if [ "$VERSION_TYPE" == "major" ] || [ "$VERSION_TYPE" == "minor" ] || [ "$VERSION_TYPE" == "patch" ]; then
            # Standard version bump
            npm run version:$VERSION_TYPE
          elif [ "$VERSION_TYPE" == "prerelease" ] || [ "${{ needs.version-validation.outputs.is-prerelease }}" == "true" ]; then
            # Pre-release version bump - use specified type or default
            if [ -n "$PRERELEASE_TYPE" ]; then
              npm run version:$PRERELEASE_TYPE
            else
              npm run version:alpha
            fi
          else
            # Default to patch
            npm run version:patch
          fi

          # Get the new version after running the script
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "New version: $NEW_VERSION"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$NEW_VERSION" >> $GITHUB_OUTPUT

          # Check if this is a pre-release
          if [[ "$NEW_VERSION" == *-* ]]; then
            echo "is-prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "is-prerelease=false" >> $GITHUB_OUTPUT
          fi

      - name: Update CHANGELOG.md with SemVer 2.0 format
        run: |
          # Run the changelog generation from the version manager
          node scripts/version-manager.js changelog

      - name: Commit and push version updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          git add package.json CHANGELOG.md
          git commit -m "chore(release): Update version to ${{ steps.version.outputs.version }}"
          git push

      - name: Create and push tag
        run: |
          git tag -a "v${{ steps.version.outputs.version }}" -m "Release version ${{ steps.version.outputs.version }}"
          git push origin "v${{ steps.version.outputs.version }}"

    # 3. Release Management (SemVer 2.0 compliant)
  release-management:
    name: Release Management (SemVer 2.0)
    runs-on: ubuntu-latest
    needs: [version-management, version-validation]
    if: >-
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true && needs.version-validation.outputs.should-release == 'true')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.version-management.outputs.tag }}
          release_name: Release ${{ needs.version-management.outputs.version }}
          prerelease: ${{ needs.version-management.outputs.is-prerelease }}
          draft: falsets.should-release == 'true') ||
      github.event_name == 'release'

    environment: ${{ needs.version-management.outputs.environment }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: "**/package-lock.json"

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm run test

      - name: Build application
        run: npm run build

      - name: Security scan
        run: npm run security:check

      - name: Create release artifacts with SemVer 2.0.0 tags
        run: |
          mkdir -p release-artifacts

          # Create zip archive
          zip -r release-artifacts/normaldance-v${{ steps.version-management.outputs.version }}.zip .next/ public/ dist/ || echo "Build artifacts not found, packaging source"
          if [ ! -f "release-artifacts/normaldance-v${{ steps.version-management.outputs.version }}.zip" ]; then
            zip -r release-artifacts/normaldance-v${{ steps.version-management.outputs.version }}.zip . -x ".git/*" "node_modules/*" "*.md" "tests/*"
          fi

          # Create tar.gz archive
          tar -czf release-artifacts/normaldance-v${{ steps.version-management.outputs.version }}.tar.gz .next/ public/ dist/ || echo "Build artifacts not found, packaging source"
          if [ ! -f "release-artifacts/normaldance-v${{ steps.version-management.outputs.version }}.tar.gz" ]; then
            tar -czf release-artifacts/normaldance-v${{ steps.version-management.outputs.version }}.tar.gz . --exclude=".git" --exclude="node_modules" --exclude="*.md" --exclude="tests"
          fi

          # Create Docker image with SemVer 2.0.0 tag
          if [ -f "Dockerfile" ]; then
            docker build -t normaldance:v${{ steps.version-management.outputs.version }} .
            docker save normaldance:v${{ steps.version-management.outputs.version }} | gzip > release-artifacts/normaldance-v${{ steps.version-management.outputs.version }}.docker.tar.gz
          fi

      - name: Upload release artifacts
        uses: actions/upload-artifact@v3
        with:
          name: release-artifacts
          path: release-artifacts/
          retention-days: 90

      - name: Create GitHub Release with SemVer 2.0.0 compliance
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version-management.outputs.version }}
          name: "NormalDance v${{ steps.version-management.outputs.version }}"
          body: |
            ## NormalDance v${{ steps.version-management.outputs.version }}

            This release follows [SemVer 2.0](https://semver.org/spec/v2.0.0.html) specification.

            ### Environment: ${{ needs.version-management.outputs.environment }}

            ### Version Information
            - **Version**: ${{ steps.version-management.outputs.version }}
            - **Type**: ${{ contains(steps.version-management.outputs.version, '-') && 'Pre-release' || 'Release' }}
            - **Published**: $(date -Iseconds)

            ### What's Changed
            See the [CHANGELOG.md](CHANGELOG.md) for detailed information about this release.

            ### Installation
            \`\`
            npm install normaldance@${{ steps.version-management.outputs.version }}
            \`\`

            ### Docker Image
            \`\`\`
            docker pull normaldance/normaldance:v${{ steps.version-management.outputs.version }}
            \`\`\`

            ### Support
            For support, please visit our [GitHub Issues](https://github.com/normaldance/normaldance/issues) or join our [Discord](https://discord.gg/normaldance).
          files: |
            release-artifacts/normaldance-v${{ steps.version-management.outputs.version }}.zip
            release-artifacts/normaldance-v${{ steps.version-management.outputs.version }}.tar.gz
            release-artifacts/normaldance-v${{ steps.version-management.outputs.version }}.docker.tar.gz
          draft: false
          prerelease: ${{ steps.version-management.outputs.is-prerelease == 'true' || github.event.inputs.pre-release == 'true' }}
          generate_release_notes: true

    # 4. Deployment (SemVer 2.0.0 aware)
  deployment:
    name: Deploy to ${{ needs.version-management.outputs.environment }}
    runs-on: ubuntu-latest
    needs: [version-management, release-management]
    if: needs.release-management.result == 'success'
    environment: ${{ needs.version-management.outputs.environment }}

    steps:
      - name: Download release artifacts
        uses: actions/download-artifact@v3
        with:
          name: release-artifacts
          path: release-artifacts/

      - name: Deploy to staging with SemVer 2.0.0
        if: needs.version-management.outputs.environment == 'staging'
        run: |
          echo "Deploying SemVer 2.0.0 compliant version ${{ steps.version-management.outputs.version }} to staging environment..."
          # Add staging deployment logic here
          # Example: Deploy to Vercel staging
          # npm run deploy:staging

          # For pre-release versions, use different deployment strategy
          if [[ "${{ steps.version-management.outputs.version }}" == *-* ]]; then
            echo "Pre-release version detected: ${{ steps.version-management.outputs.version }}"
            # Add special handling for pre-release versions
          fi

      - name: Deploy to production with SemVer 2.0.0
        if: needs.version-management.outputs.environment == 'production'
        run: |
          echo "Deploying SemVer 2.0.0 compliant version ${{ steps.version-management.outputs.version }} to production environment..."
          # Add production deployment logic here
          # Example: Deploy to production
          # npm run deploy:production

          # Block production deployment for pre-release versions
          if [[ "${{ steps.version-management.outputs.version }}" == *-* ]]; then
            echo "ERROR: Pre-release versions cannot be deployed to production"
            exit 1
          fi

      - name: Run smoke tests
        run: |
          echo "Running smoke tests for version ${{ steps.version-management.outputs.version }}..."
          npm run test:e2e || echo "Smoke tests failed, but continuing..."

      - name: Health check
        run: |
          echo "Performing health check for version ${{ steps.version-management.outputs.version }}..."
          # Add version-specific health check if needed
          curl -f ${{ needs.version-management.outputs.environment == 'production' && 'https://dnb1st.ru' || 'https://staging.dnb1st.ru' }}/api/health

    # 5. Notification (SemVer 2.0.0 compliant)
  notification:
    name: Notification
    runs-on: ubuntu-latest
    needs: [version-management, release-management, deployment]
    if: always()

    steps:
      - name: Send SemVer 2.0.0 compliant notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: "#deployments"
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
          custom_payload: |
            {
              "attachments": [
                {
                  "color": "${{ needs.deployment.result == 'success' ? 'good' : needs.deployment.result == 'failure' ? 'danger' : 'warning' }}",
                  "title": "Version Management (SemVer 2.0.0) - ${{ needs.version-management.outputs.environment }}",
                  "title_link": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
                  "text": "Version ${{ needs.version-management.outputs.version }} ${{ needs.deployment.result == 'success' ? 'deployed successfully' : 'deployment failed' }}!",
                  "fields": [
                    {
                      "title": "Repository",
                      "value": "${{ github.repository }}",
                      "short": true
                    },
                    {
                      "title": "Version",
                      "value": "${{ needs.version-management.outputs.version }}",
                      "short": true
                    },
                    {
                      "title": "SemVer Type",
                      "value": "${{ contains(needs.version-management.outputs.version, '-') ? 'Pre-release' : 'Release' }}",
                      "short": true
                    },
                    {
                      "title": "Tag",
                      "value": "${{ needs.version-management.outputs.tag }}",
                      "short": true
                    },
                    {
                      "title": "Environment",
                      "value": "${{ needs.version-management.outputs.environment }}",
                      "short": true
                    },
                    {
                      "title": "Deployment",
                      "value": "${{ needs.deployment.result }}",
                      "short": true
                    }
                  ]
                }
              ]
            }
