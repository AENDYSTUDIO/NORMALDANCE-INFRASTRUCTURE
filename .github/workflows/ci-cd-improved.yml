name: CI/CD Pipeline - Enhanced

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: "20.10.0"
  NEXT_TELEMETRY_DISABLED: 1

jobs:
  # Проверка версии Node.js
  node-version-check:
    name: Node.js Version Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Verify Node.js version
        run: |
          NODE_VERSION=$(node --version)
          echo "Node.js version: $NODE_VERSION"
          if [[ $(node -e "console.log(Number(process.version.split('.')[1]) >= 17 ? 'OK' : 'FAIL')") == "FAIL" ]]; then
            echo "Node.js version must be 18.17 or higher"
            exit 1
          fi

  # Установка зависимостей с кэшированием
  setup-dependencies:
    name: Setup Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
            .next/cache
          key: ${{ runner.os }}-node-${{ env.NODE_VERSION }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ env.NODE_VERSION }}-

  # Проверка безопасности
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: setup-dependencies
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=moderate

  # Проверка типов и линтинг
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    needs: setup-dependencies
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run type check
        run: npm run type-check

      - name: Run linting
        run: npm run lint

  # Запуск unit тестов
 unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: [setup-dependencies, code-quality]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:unit --ci --coverage --testTimeout=300
        env:
          CI: true
          NODE_ENV: test

  # Запуск интеграционных тестов с PostgreSQL
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [setup-dependencies, code-quality]
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Setup Prisma
        run: npx prisma generate

      - name: Run database migrations
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db

      - name: Run integration tests
        run: npm run test:integration -- --ci --testTimeout=60000
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          CI: true
          NODE_ENV: test

  # Сборка приложения
 build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production
          NEXT_PUBLIC_APP_URL: https://normaldance.com
          DATABASE_URL: ${{ secrets.DATABASE_URL || 'postgresql://postgres:postgres@localhost:5432/test_db' }}

  # Запуск E2E тестов
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 30
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run E2E tests
        run: npm run test:e2e
        env:
          CI: true
          NODE_ENV: test

  # Сборка артефактов
  build-artifacts:
    name: Build Artifacts
    runs-on: ubuntu-latest
    needs: [build, e2e-tests]
    if: success()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nextjs-build
          path: .next/
          retention-days: 30

  # Уведомление о статусе
  notification:
    name: Status Notification
    runs-on: ubuntu-latest
    needs: [node-version-check, setup-dependencies, security-audit, code-quality, unit-tests, integration-tests, build, e2e-tests, build-artifacts]
    if: always()
    steps:
      - name: Status notification
        run: |
          if [[ "${{ needs.node-version-check.result }}" == "success" && 
               "${{ needs.setup-dependencies.result }}" == "success" && 
               "${{ needs.security-audit.result }}" == "success" && 
               "${{ needs.code-quality.result }}" == "success" && 
               "${{ needs.unit-tests.result }}" == "success" && 
               "${{ needs.integration-tests.result }}" == "success" && 
               "${{ needs.build.result }}" == "success" && 
               "${{ needs.e2e-tests.result }}" == "success" && 
               "${{ needs.build-artifacts.result }}" == "success" ]]; then
            echo "✅ All checks passed successfully!"
          else
            echo "❌ Some checks failed!"
            exit 1
          fi
