name: Cleanup Preview Deployments

on:
  # –ó–∞–ø—É—Å–∫ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é - —Ä–∞–∑ –≤ –¥–µ–Ω—å –≤ 3:00 —É—Ç—Ä–∞ UTC (6:00 —É—Ç—Ä–∞ –ø–æ –ú–æ—Å–∫–≤–µ)
  schedule:
    - cron: "0 3 * * *"

  # –ó–∞–ø—É—Å–∫ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ PR (–≤–∫–ª—é—á–∞—è —Å–ª–∏—è–Ω–∏–µ)
  pull_request:
    types: [closed]
    branches: [main, develop]

  # –ó–∞–ø—É—Å–∫ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ issues
  issues:
    types: [closed]

  # –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫
  workflow_dispatch:
    inputs:
      dry_run:
        description: "Dry run mode (no actual deletions)"
        required: false
        default: false
        type: boolean
      force_cleanup:
        description: "Force cleanup of all deployments (except protected)"
        required: false
        default: false
        type: boolean
      max_age_days:
        description: "Maximum age of deployments to keep (in days)"
        required: false
        default: 7
        type: number
      skip_notifications:
        description: "Skip notifications"
        required: false
        default: false
        type: boolean

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
  SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

jobs:
  emergency-disable:
    if: false # EMERGENCY DISABLE - 982 workflows
    runs-on: ubuntu-latest
    steps:
      - name: Emergency Disabled
        run: echo "This workflow is temporarily disabled due to 982 active workflows"
  # 1. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ—á–∏—Å—Ç–∫–∏
  determine-cleanup-config:
    name: Determine Cleanup Configuration
    runs-on: ubuntu-latest
    outputs:
      dry_run: ${{ steps.config.outputs.dry_run }}
      max_age_days: ${{ steps.config.outputs.max_age_days }}
      skip_notifications: ${{ steps.config.outputs.skip_notifications }}
      force_cleanup: ${{ steps.config.outputs.force_cleanup }}
      cleanup_threshold: ${{ steps.config.outputs.cleanup_threshold }}

    steps:
      - name: Determine cleanup configuration
        id: config
        run: |
          # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ dry run
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            DRY_RUN="${{ github.event.inputs.dry_run }}"
            MAX_AGE_DAYS="${{ github.event.inputs.max_age_days }}"
            SKIP_NOTIFICATIONS="${{ github.event.inputs.skip_notifications }}"
            FORCE_CLEANUP="${{ github.event.inputs.force_cleanup }}"
          else
            DRY_RUN="false"
            MAX_AGE_DAYS="7"
            SKIP_NOTIFICATIONS="false"
            FORCE_CLEANUP="false"
          fi

          # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–∞ –æ—á–∏—Å—Ç–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ–±—ã—Ç–∏—è
          if [ "${{ github.event_name }}" == "pull_request" ] && [ "${{ github.event.action }}" == "closed" ]; then
            CLEANUP_THRESHOLD="1" # –ü—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ PR —É–¥–∞–ª—è–µ–º —Å—Ä–∞–∑—É
          elif [ "${{ github.event_name }}" == "pull_request" ] && [ "${{ github.event.action }}" == "merged" ]; then
            CLEANUP_THRESHOLD="1" # –ü—Ä–∏ —Å–ª–∏—è–Ω–∏–∏ PR —É–¥–∞–ª—è–µ–º —Å—Ä–∞–∑—É
          else
            CLEANUP_THRESHOLD="${MAX_AGE_DAYS}" # –í –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–æ–∑—Ä–∞—Å—Ç
          fi

          echo "dry_run=$DRY_RUN" >> $GITHUB_OUTPUT
          echo "max_age_days=$MAX_AGE_DAYS" >> $GITHUB_OUTPUT
          echo "skip_notifications=$SKIP_NOTIFICATIONS" >> $GITHUB_OUTPUT
          echo "force_cleanup=$FORCE_CLEANUP" >> $GITHUB_OUTPUT
          echo "cleanup_threshold=$CLEANUP_THRESHOLD" >> $GITHUB_OUTPUT

          echo "Cleanup Configuration:"
          echo "  Dry Run: $DRY_RUN"
          echo "  Max Age Days: $MAX_AGE_DAYS"
          echo "  Skip Notifications: $SKIP_NOTIFICATIONS"
          echo "  Force Cleanup: $FORCE_CLEANUP"
          echo "  Cleanup Threshold: $CLEANUP_THRESHOLD"

  # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ preview –¥–µ–ø–ª–æ–µ–≤
  get-preview-deployments:
    name: Get Preview Deployments
    runs-on: ubuntu-latest
    needs: determine-cleanup-config
    outputs:
      deployments: ${{ steps.deployments.outputs.deployments }}
      total_count: ${{ steps.deployments.outputs.total_count }}

    steps:
      - name: Get preview deployments
        id: deployments
        run: |
          # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö preview –¥–µ–ø–ª–æ–µ–≤ –∏–∑ Vercel
          echo "Fetching preview deployments from Vercel..."

          DEPLOYMENTS=$(curl -s -H "Authorization: Bearer ${{ env.VERCEL_TOKEN }}" \
            "https://api.vercel.com/v4/deployments?project=${{ env.VERCEL_PROJECT_ID }}&state=ready" | \
            jq -c '.[] | select(.type == "preview")')

          # –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
          TOTAL_COUNT=$(echo "$DEPLOYMENTS" | jq -s 'length')
          echo "total_count=$TOTAL_COUNT" >> $GITHUB_OUTPUT

          # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–µ–ø–ª–æ–µ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
          echo "$DEPLOYMENTS" > /tmp/deployments.json
          echo "deployments<<EOF" >> $GITHUB_OUTPUT
          cat /tmp/deployments.json >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          echo "Found $TOTAL_COUNT preview deployments"

  # 3. –ê–Ω–∞–ª–∏–∑ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–µ–ø–ª–æ–µ–≤
  analyze-deployments:
    name: Analyze Deployments
    runs-on: ubuntu-latest
    needs: [determine-cleanup-config, get-preview-deployments]
    outputs:
      deployments_to_delete: ${{ steps.filter.outputs.deployments_to_delete }}
      deployments_to_keep: ${{ steps.filter.outputs.deployments_to_keep }}
      protected_deployments: ${{ steps.filter.outputs.protected_deployments }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: "**/package-lock.json"

      - name: Install dependencies
        run: npm ci

      - name: Filter deployments
        id: filter
        env:
          DEPLOYMENTS: ${{ needs.get-preview-deployments.outputs.deployments }}
          DRY_RUN: ${{ needs.determine-cleanup-config.outputs.dry_run }}
          MAX_AGE_DAYS: ${{ needs.determine-cleanup-config.outputs.max_age_days }}
          CLEANUP_THRESHOLD: ${{ needs.determine-cleanup-config.outputs.cleanup_threshold }}
          FORCE_CLEANUP: ${{ needs.determine-cleanup-config.outputs.force_cleanup }}
        run: |
          # –ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–µ–ø–ª–æ–µ–≤
          node scripts/cleanup-preview-deployments-enhanced.js \
            --deployments "$DEPLOYMENTS" \
            --dry-run "$DRY_RUN" \
            --max-age-days "$MAX_AGE_DAYS" \
            --cleanup-threshold "$CLEANUP_THRESHOLD" \
            --force-cleanup "$FORCE_CLEANUP" \
            --output-json

          # –ß—Ç–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
          if [ -f "/tmp/cleanup-report.json" ]; then
            DEPLOYMENTS_TO_DELETE=$(jq -c '.deployments_to_delete // []' /tmp/cleanup-report.json)
            DEPLOYMENTS_TO_KEEP=$(jq -c '.deployments_to_keep // []' /tmp/cleanup-report.json)
            PROTECTED_DEPLOYMENTS=$(jq -c '.protected_deployments // []' /tmp/cleanup-report.json)
            
            echo "deployments_to_delete<<EOF" >> $GITHUB_OUTPUT
            echo "$DEPLOYMENTS_TO_DELETE" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            
            echo "deployments_to_keep<<EOF" >> $GITHUB_OUTPUT
            echo "$DEPLOYMENTS_TO_KEEP" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            
            echo "protected_deployments<<EOF" >> $GITHUB_OUTPUT
            echo "$PROTECTED_DEPLOYMENTS" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

  # 4. –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö preview –¥–µ–ø–ª–æ–µ–≤
  cleanup-deployments:
    name: Cleanup Deployments
    runs-on: ubuntu-latest
    needs: [determine-cleanup-config, analyze-deployments]
    if: ${{ needs.analyze-deployments.outputs.deployments_to_delete != '[]' }}

    steps:
      - name: Delete old deployments
        id: delete
        env:
          DEPLOYMENTS_TO_DELETE: ${{ needs.analyze-deployments.outputs.deployments_to_delete }}
          DRY_RUN: ${{ needs.determine-cleanup-config.outputs.dry_run }}
        run: |
          echo "Starting cleanup of old preview deployments..."
          echo "Deployments to delete: $DEPLOYMENTS_TO_DELETE"

          if [ "$DRY_RUN" = "true" ]; then
            echo "üîç DRY RUN MODE - No actual deletions will be performed"
            echo "Deployments that would be deleted:"
            echo "$DEPLOYMENTS_TO_DELETE" | jq -r '.[] | "  - \(.id) (\(.name) - \(.createdAt))"'
          else
            echo "üóëÔ∏è  DELETING old preview deployments..."
            
            # –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –¥–µ–ø–ª–æ—è
            echo "$DEPLOYMENTS_TO_DELETE" | jq -c '.[]' | while read -r deployment; do
              DEPLOYMENT_ID=$(echo "$deployment" | jq -r '.id')
              DEPLOYMENT_NAME=$(echo "$deployment" | jq -r '.name')
              
              echo "Deleting deployment: $DEPLOYMENT_NAME (ID: $DEPLOYMENT_ID)"
              
              # –£–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Vercel API
              curl -s -X DELETE \
                -H "Authorization: Bearer ${{ env.VERCEL_TOKEN }}" \
                "https://api.vercel.com/v4/deployments/$DEPLOYMENT_ID" || echo "Failed to delete deployment: $DEPLOYMENT_ID"
            done
          fi

  # 5. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  send-notifications:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [determine-cleanup-config, analyze-deployments, cleanup-deployments]
    if: ${{ needs.determine-cleanup-config.outputs.skip_notifications != 'true' }}

    steps:
      - name: Send cleanup notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: "#deployments"
          webhook_url: ${{ env.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
          custom_payload: |
            {
              "attachments": [
                {
                  "color": "${{ job.status == 'success' ? 'good' : job.status == 'failure' ? 'danger' : 'warning' }}",
                  "title": "üßπ Preview Deployments Cleanup - ${{ job.status }}",
                  "title_link": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
                  "text": "Cleanup of old preview deployments completed",
                  "fields": [
                    {
                      "title": "Repository",
                      "value": "${{ github.repository }}",
                      "short": true
                    },
                    {
                      "title": "Trigger",
                      "value": "${{ github.event_name }}",
                      "short": true
                    },
                    {
                      "title": "Total Deployments",
                      "value": "${{ needs.get-preview-deployments.outputs.total_count }}",
                      "short": true
                    },
                    {
                      "title": "Deployments to Delete",
                      "value": "$(echo '${{ needs.analyze-deployments.outputs.deployments_to_delete }}' | jq -r 'length // 0')",
                      "short": true
                    },
                    {
                      "title": "Protected Deployments",
                      "value": "$(echo '${{ needs.analyze-deployments.outputs.protected_deployments }}' | jq -r 'length // 0')",
                      "short": true
                    },
                    {
                      "title": "Dry Run",
                      "value": "${{ needs.determine-cleanup-config.outputs.dry_run }}",
                      "short": true
                    },
                    {
                      "title": "Cleanup Date",
                      "value": "$(date -u '+%Y-%m-%d %H:%M:%S UTC')",
                      "short": false
                    }
                  ],
                  "footer": "NORMALDANCE Cleanup Bot",
                  "ts": ${{ github.event.created_at || '' }}
                }
              ]
            }

  # 6. –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
  create-report:
    name: Create Cleanup Report
    runs-on: ubuntu-latest
    needs: [determine-cleanup-config, analyze-deployments, cleanup-deployments]
    if: always()

    steps:
      - name: Generate cleanup report
        run: |
          echo "## üßπ Preview Deployments Cleanup Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Repository:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Configuration:**" >> $GITHUB_STEP_SUMMARY
          echo "- Dry Run: ${{ needs.determine-cleanup-config.outputs.dry_run }}" >> $GITHUB_STEP_SUMMARY
          echo "- Max Age Days: ${{ needs.determine-cleanup-config.outputs.max_age_days }}" >> $GITHUB_STEP_SUMMARY
          echo "- Force Cleanup: ${{ needs.determine-cleanup-config.outputs.force_cleanup }}" >> $GITHUB_STEP_SUMMARY
          echo "- Cleanup Threshold: ${{ needs.determine-cleanup-config.outputs.cleanup_threshold }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Results:**" >> $GITHUB_STEP_SUMMARY
          echo "- Total Deployments Found: ${{ needs.get-preview-deployments.outputs.total_count }}" >> $GITHUB_STEP_SUMMARY
          echo "- Deployments to Delete: $(echo '${{ needs.analyze-deployments.outputs.deployments_to_delete }}' | jq -r 'length // 0')" >> $GITHUB_STEP_SUMMARY
          echo "- Protected Deployments: $(echo '${{ needs.analyze-deployments.outputs.protected_deployments }}' | jq -r 'length // 0')" >> $GITHUB_STEP_SUMMARY
          echo "- Deployments Kept: $(echo '${{ needs.analyze-deployments.outputs.deployments_to_keep }}' | jq -r 'length // 0')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Deployments to Delete:**" >> $GITHUB_STEP_SUMMARY
          if [ "$(echo '${{ needs.analyze-deployments.outputs.deployments_to_delete }}' | jq -r 'length // 0')" -gt 0 ]; then
            echo '${{ needs.analyze-deployments.outputs.deployments_to_delete }}' | jq -r '.[] | "  - \(.name) (\(.createdAt))"' >> $GITHUB_STEP_SUMMARY
          else
            echo "  None" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Protected Deployments:**" >> $GITHUB_STEP_SUMMARY
          if [ "$(echo '${{ needs.analyze-deployments.outputs.protected_deployments }}' | jq -r 'length // 0')" -gt 0 ]; then
            echo '${{ needs.analyze-deployments.outputs.protected_deployments }}' | jq -r '.[] | "  - \(.name) (\(.createdAt))"' >> $GITHUB_STEP_SUMMARY
          else
            echo "  None" >> $GITHUB_STEP_SUMMARY
          fi
