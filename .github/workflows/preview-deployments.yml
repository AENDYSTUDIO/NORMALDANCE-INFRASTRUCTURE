name: Preview Deployments

on:
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches: [main, develop]

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}

jobs:
  emergency-disable:
    if: false # EMERGENCY DISABLE - 982 workflows
    runs-on: ubuntu-latest
    steps:
      - name: Emergency Disabled
        run: echo "This workflow is temporarily disabled due to 982 active workflows"
  # 1. Preview Deployment Job
  preview-deploy:
    name: Preview Deployment
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action != 'closed'

    outputs:
      preview-url: ${{ steps.deploy.outputs.url }}
      deployment-id: ${{ steps.deploy.outputs.deployment-id }}
      pr-number: ${{ github.event.number }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: "**/package-lock.json"

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npm run db:generate

      - name: Run tests
        run: npm test
        env:
          NODE_ENV: test
          DATABASE_URL: "file:./dev.db"

      - name: Deploy to Vercel Preview
        id: deploy
        uses: vercel/action@v1
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          scope: ${{ github.repository_owner }}
          working-directory: .
          framework: "next"
          output-directory: ".next"
          install-command: "npm ci"
          build-command: "npm run build"
          dev-command: "npm run dev"
          alias: "pr-${{ github.event.number }}-${{ github.sha }}"
          environment: "preview"
          public: false

      - name: Comment PR with deployment info
        uses: actions/github-script@v7
        with:
          script: |
            const { preview-url, deployment-id } = process.env;
            const comment = `
            ðŸš€ **Preview Deployment Ready!**

            **URL**: ${preview-url}
            **Deployment ID**: ${deployment-id}
            **PR**: #${{ github.event.number }}
            **Branch**: ${{ github.head_ref }}
            **Commit**: ${{ github.sha }}

            ---
            ðŸ“‹ **Preview Features:**
            - Isolated environment for testing
            - Latest changes from this PR
            - Temporary deployment (auto-deleted after 24h or PR merge)
            - Full application functionality

            ðŸ”— **Direct Links:**
            - Application: ${preview-url}
            - Health Check: ${preview-url}/api/health
            - API Documentation: ${preview-url}/api/docs

            âš¡ **Performance Tips:**
            - First load may take longer due to cold start
            - Subsequent loads will be faster with caching
            - Use incognito mode for testing fresh state
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

            // Update PR description with preview URL
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });

            const updatedBody = `${pr.data.body}\n\n---\n\nðŸš€ **Preview URL**: ${preview-url}`;

            await github.rest.pulls.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              body: updatedBody
            });

            // Set deployment status
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment-id,
              state: 'success',
              description: 'Preview deployment completed successfully',
              environment: 'preview',
              environment_url: preview-url
            });

            // Set environment variables
            process.env.PREVIEW_URL = preview-url;
            process.env.DEPLOYMENT_ID = deployment-id;

  # 2. Cleanup Old Preview Deployments
  cleanup-preview:
    name: Cleanup Old Preview Deployments
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action != 'opened'

    steps:
      - name: Get preview deployments
        uses: actions/github-script@v7
        with:
          script: |
            // Get all preview deployments for this repository
            const deployments = await github.rest.repos.listDeployments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              environment: 'preview',
              per_page: 50
            });

            // Filter deployments older than 24 hours
            const twentyFourHoursAgo = new Date(Date.now() - 24 * 60 * 60 * 1000);
            const oldDeployments = deployments.data.filter(deployment => 
              new Date(deployment.created_at) < twentyFourHoursAgo &&
              deployment.environment === 'preview'
            );

            // Delete old deployments
            for (const deployment of oldDeployments) {
              await github.rest.repos.deleteDeployment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                deployment_id: deployment.id
              });
            }

            console.log(`Cleaned up ${oldDeployments.length} old preview deployments`);

  # 3. PR Closed Cleanup
  pr-cleanup:
    name: PR Cleanup
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'closed'

    steps:
      - name: Delete Vercel deployment
        uses: actions/github-script@v7
        with:
          script: |
            // Get PR number
            const prNumber = context.issue.number;

            // Find Vercel deployment by alias
            const vercelDeployments = await fetch(`https://api.vercel.com/v4/deployments?project=${process.env.VERCEL_PROJECT_ID}`, {
              headers: {
                'Authorization': `Bearer ${process.env.VERCEL_TOKEN}`
              }
            });

            const deploymentsData = await vercelDeployments.json();
            const deploymentToDelete = deploymentsData.find(d => 
              d.name === `pr-${prNumber}` && 
              d.state === 'ready'
            );

            if (deploymentToDelete) {
              await fetch(`https://api.vercel.com/v4/deployments/${deploymentToDelete.id}`, {
                method: 'DELETE',
                headers: {
                  'Authorization': `Bearer ${process.env.VERCEL_TOKEN}`
                }
              });
              
              console.log(`Deleted Vercel deployment: ${deploymentToDelete.id}`);
            }

            // Delete GitHub deployment
            const deployments = await github.rest.repos.listDeployments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              environment: 'preview',
              per_page: 50
            });

            const prDeployment = deployments.data.find(d => 
              d.environment === 'preview' && 
              d.payload?.pr_number === prNumber
            );

            if (prDeployment) {
              await github.rest.repos.deleteDeployment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                deployment_id: prDeployment.id
              });
              
              console.log(`Deleted GitHub deployment: ${prDeployment.id}`);
            }

  # 4. Status Check
  status-check:
    name: Status Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Set deployment status
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.issue.number;

            // Check if preview deployment exists
            const deployments = await github.rest.repos.listDeployments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              environment: 'preview',
              per_page: 10
            });

            const prDeployment = deployments.data.find(d => 
              d.environment === 'preview' && 
              d.payload?.pr_number === prNumber
            );

            if (prDeployment) {
              await github.rest.repos.createDeploymentStatus({
                owner: context.repo.owner,
                repo: context.repo.repo,
                deployment_id: prDeployment.id,
                state: 'success',
                description: 'Preview deployment is ready',
                environment: 'preview',
                environment_url: process.env.PREVIEW_URL || `https://pr-${prNumber}-${context.sha}.vercel.app`
              });
            } else {
              await github.rest.repos.createDeploymentStatus({
                owner: context.repo.owner,
                repo: context.repo.repo,
                deployment_id: prDeployment?.id || 0,
                state: 'pending',
                description: 'Preview deployment pending',
                environment: 'preview'
              });
            }
