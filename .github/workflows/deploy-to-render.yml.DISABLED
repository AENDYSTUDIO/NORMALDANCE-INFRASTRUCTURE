name: Deploy to Render

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "production"
        type: choice
        options:
          - production
          - staging
          - preview
      service:
        description: "Service to deploy"
        required: true
        default: "dnb1st-ru"
        type: choice
        options:
          - dnb1st-ru
          - dnb1st-store

env:
  NODE_VERSION: "20.x"
  RENDER_API_TOKEN: ${{ secrets.RENDER_API_TOKEN }}
  RENDER_SERVICE_ID_DNB1ST_RU: ${{ secrets.RENDER_SERVICE_ID_DNB1ST_RU }}
  RENDER_SERVICE_ID_DNB1ST_STORE: ${{ secrets.RENDER_SERVICE_ID_DNB1ST_STORE }}
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

jobs:
  emergency-disable:
    if: false # EMERGENCY DISABLE - 982 workflows
    runs-on: ubuntu-latest
    steps:
      - name: Emergency Disabled
        run: echo "This workflow is temporarily disabled due to 982 active workflows"
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run tests
        run: npm test
        env:
          NODE_OPTIONS: --experimental-vm-modules

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            .next/
            out/
          retention-days: 7

  deploy-dnb1st-ru:
    name: Deploy dnb1st.ru
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository

    environment:
      name: ${{ github.ref_name == 'main' && 'production' || 'staging' }}
      url: https://dnb1st-ru.onrender.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Deploy to Render
        run: |
          # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
          if [[ "${{ github.ref_name }}" == "main" ]]; then
            ENVIRONMENT="production"
            SERVICE_ID="${{ env.RENDER_SERVICE_ID_DNB1ST_RU }}"
          else
            ENVIRONMENT="staging"
            SERVICE_ID="${{ env.RENDER_SERVICE_ID_DNB1ST_RU }}"
          fi

          echo "Deploying dnb1st.ru to $ENVIRONMENT environment..."
          echo "Service ID: $SERVICE_ID"

          # –°–æ–∑–¥–∞–µ–º –¥–µ–ø–ª–æ–π –Ω–∞ Render
          curl -X POST \
            -H "Authorization: Bearer ${{ env.RENDER_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "{
              \"service_id\": \"$SERVICE_ID\",
              \"env\": \"$ENVIRONMENT\",
              \"git\": {
                \"branch\": \"${{ github.ref_name }}\",
                \"commit_sha\": \"${{ github.sha }}\"
              },
              \"env_vars\": [
                {
                  \"key\": \"COMMIT_SHA\",
                  \"value\": \"${{ github.sha }}\"
                },
                {
                  \"key\": \"BRANCH_NAME\",
                  \"value\": \"${{ github.ref_name }}\"
                },
                {
                  \"key\": \"DEPLOY_ENVIRONMENT\",
                  \"value\": \"$ENVIRONMENT\"
                }
              ]
            }" \
            "https://api.render.com/v1/services/$SERVICE_ID/deploys"

          echo "Deployment triggered successfully for dnb1st.ru"

      - name: Monitor deployment
        run: |
          SERVICE_ID="${{ env.RENDER_SERVICE_ID_DNB1ST_RU }}"

          # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–µ–ø–ª–æ—è
          echo "Waiting for deployment to complete..."
          for i in {1..30}; do
            DEPLOY_STATUS=$(curl -s \
              -H "Authorization: Bearer ${{ env.RENDER_API_TOKEN }}" \
              "https://api.render.com/v1/services/$SERVICE_ID/deploys" | \
              jq -r '.[0].status')
            
            echo "Deployment status: $DEPLOY_STATUS"
            
            if [[ "$DEPLOY_STATUS" == "succeeded" ]]; then
              echo "‚úÖ Deployment successful"
              
              # –ü—Ä–æ–≤–µ—Ä—è–µ–º health endpoint
              HEALTH_CHECK=$(curl -s -o /dev/null -w "%{http_code}" \
                "https://dnb1st-ru.onrender.com/api/health")
              
              if [[ "$HEALTH_CHECK" == "200" ]]; then
                echo "‚úÖ Health check passed"
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Slack
                curl -X POST \
                  -H "Content-type: application/json" \
                  -d "{
                    \"text\": \"üöÄ Deployment successful for dnb1st.ru\",
                    \"attachments\": [
                      {
                        \"color\": \"good\",
                        \"fields\": [
                          {
                            \"title\": \"Service\",
                            \"value\": \"dnb1st.ru\",
                            \"short\": true
                          },
                          {
                            \"title\": \"Environment\",
                            \"value\": \"$ENVIRONMENT\",
                            \"short\": true
                          },
                          {
                            \"title\": \"Commit\",
                            \"value\": \"${{ github.sha }}\",
                            \"short\": true
                          },
                          {
                            \"title\": \"URL\",
                            \"value\": \"https://dnb1st-ru.onrender.com\",
                            \"short\": false
                          }
                        ]
                      }
                    ]
                  }" \
                  "${{ env.SLACK_WEBHOOK_URL }}"
              else
                echo "‚ùå Health check failed"
                exit 1
              fi
              break
            elif [[ "$DEPLOY_STATUS" == "failed" ]]; then
              echo "‚ùå Deployment failed"
              
              # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ Slack
              curl -X POST \
                -H "Content-type: application/json" \
                -d "{
                  \"text\": \"‚ùå Deployment failed for dnb1st.ru\",
                  \"attachments\": [
                    {
                      \"color\": \"danger\",
                      \"fields\": [
                        {
                          \"title\": \"Service\",
                          \"value\": \"dnb1st.ru\",
                          \"short\": true
                        },
                        {
                          \"title\": \"Environment\",
                          \"value\": \"$ENVIRONMENT\",
                          \"short\": true
                        },
                        {
                          \"title\": \"Status\",
                          \"value\": \"$DEPLOY_STATUS\",
                          \"short\": true
                        },
                        {
                          \"title\": \"Commit\",
                          \"value\": \"${{ github.sha }}\",
                          \"short\": false
                        }
                      ]
                    }
                  ]
                }" \
                "${{ env.SLACK_WEBHOOK_URL }}"
              exit 1
            fi
            
            sleep 30
          done

          echo "‚ùå Deployment timeout"
          exit 1

  deploy-dnb1st-store:
    name: Deploy dnb1st.store
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository

    environment:
      name: ${{ github.ref_name == 'main' && 'production' || 'staging' }}
      url: https://dnb1st-store.onrender.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Deploy to Render
        run: |
          # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
          if [[ "${{ github.ref_name }}" == "main" ]]; then
            ENVIRONMENT="production"
            SERVICE_ID="${{ env.RENDER_SERVICE_ID_DNB1ST_STORE }}"
          else
            ENVIRONMENT="staging"
            SERVICE_ID="${{ env.RENDER_SERVICE_ID_DNB1ST_STORE }}"
          fi

          echo "Deploying dnb1st.store to $ENVIRONMENT environment..."
          echo "Service ID: $SERVICE_ID"

          # –°–æ–∑–¥–∞–µ–º –¥–µ–ø–ª–æ–π –Ω–∞ Render
          curl -X POST \
            -H "Authorization: Bearer ${{ env.RENDER_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "{
              \"service_id\": \"$SERVICE_ID\",
              \"env\": \"$ENVIRONMENT\",
              \"git\": {
                \"branch\": \"${{ github.ref_name }}\",
                \"commit_sha\": \"${{ github.sha }}\"
              },
              \"env_vars\": [
                {
                  \"key\": \"COMMIT_SHA\",
                  \"value\": \"${{ github.sha }}\"
                },
                {
                  \"key\": \"BRANCH_NAME\",
                  \"value\": \"${{ github.ref_name }}\"
                },
                {
                  \"key\": \"DEPLOY_ENVIRONMENT\",
                  \"value\": \"$ENVIRONMENT\"
                }
              ]
            }" \
            "https://api.render.com/v1/services/$SERVICE_ID/deploys"

          echo "Deployment triggered successfully for dnb1st.store"

      - name: Monitor deployment
        run: |
          SERVICE_ID="${{ env.RENDER_SERVICE_ID_DNB1ST_STORE }}"

          # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–µ–ø–ª–æ—è
          echo "Waiting for deployment to complete..."
          for i in {1..30}; do
            DEPLOY_STATUS=$(curl -s \
              -H "Authorization: Bearer ${{ env.RENDER_API_TOKEN }}" \
              "https://api.render.com/v1/services/$SERVICE_ID/deploys" | \
              jq -r '.[0].status')
            
            echo "Deployment status: $DEPLOY_STATUS"
            
            if [[ "$DEPLOY_STATUS" == "succeeded" ]]; then
              echo "‚úÖ Deployment successful"
              
              # –ü—Ä–æ–≤–µ—Ä—è–µ–º health endpoint
              HEALTH_CHECK=$(curl -s -o /dev/null -w "%{http_code}" \
                "https://dnb1st-store.onrender.com/api/health")
              
              if [[ "$HEALTH_CHECK" == "200" ]]; then
                echo "‚úÖ Health check passed"
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Slack
                curl -X POST \
                  -H "Content-type: application/json" \
                  -d "{
                    \"text\": \"üöÄ Deployment successful for dnb1st.store\",
                    \"attachments\": [
                      {
                        \"color\": \"good\",
                        \"fields\": [
                          {
                            \"title\": \"Service\",
                            \"value\": \"dnb1st.store\",
                            \"short\": true
                          },
                          {
                            \"title\": \"Environment\",
                            \"value\": \"$ENVIRONMENT\",
                            \"short\": true
                          },
                          {
                            \"title\": \"Commit\",
                            \"value\": \"${{ github.sha }}\",
                            \"short\": true
                          },
                          {
                            \"title\": \"URL\",
                            \"value\": \"https://dnb1st-store.onrender.com\",
                            \"short\": false
                          }
                        ]
                      }
                    ]
                  }" \
                  "${{ env.SLACK_WEBHOOK_URL }}"
              else
                echo "‚ùå Health check failed"
                exit 1
              fi
              break
            elif [[ "$DEPLOY_STATUS" == "failed" ]]; then
              echo "‚ùå Deployment failed"
              
              # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ Slack
              curl -X POST \
                -H "Content-type: application/json" \
                -d "{
                  \"text\": \"‚ùå Deployment failed for dnb1st.store\",
                  \"attachments\": [
                    {
                      \"color\": \"danger\",
                      \"fields\": [
                        {
                          \"title\": \"Service\",
                          \"value\": \"dnb1st.store\",
                          \"short\": true
                        },
                        {
                          \"title\": \"Environment\",
                          \"value\": \"$ENVIRONMENT\",
                          \"short\": true
                        },
                        {
                          \"title\": \"Status\",
                          \"value\": \"$DEPLOY_STATUS\",
                          \"short\": true
                        },
                        {
                          \"title\": \"Commit\",
                          \"value\": \"${{ github.sha }}\",
                          \"short\": false
                        }
                      ]
                    }
                  ]
                }" \
                "${{ env.SLACK_WEBHOOK_URL }}"
              exit 1
            fi
            
            sleep 30
          done

          echo "‚ùå Deployment timeout"
          exit 1

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level moderate

      - name: Run high/critical security audit
        run: npm audit --audit-level high --audit-level critical
        continue-on-error: true

  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: [test, build]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Run performance tests
        run: npm run test:performance
        continue-on-error: true

  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs:
      [deploy-dnb1st-ru, deploy-dnb1st-store, security-scan, performance-test]
    if: always()

    steps:
      - name: Send notification
        run: |
          if [[ "${{ needs.deploy-dnb1st-ru.result }}" == "success" ]] && \
             [[ "${{ needs.deploy-dnb1st-store.result }}" == "success" ]]; then
            EMOJI="‚úÖ"
            COLOR="good"
            STATUS="Success"
          else
            EMOJI="‚ùå"
            COLOR="danger"
            STATUS="Failed"
          fi

          curl -X POST \
            -H "Content-type: application/json" \
            -d "{
              \"text\": \"$EMOJI Pipeline $STATUS for DNB1ST\",
              \"attachments\": [
                {
                  \"color\": \"$COLOR\",
                  \"fields\": [
                    {
                      \"title\": \"Repository\",
                      \"value\": \"${{ github.repository }}\",
                      \"short\": true
                    },
                    {
                      \"title\": \"Branch\",
                      \"value\": \"${{ github.ref_name }}\",
                      \"short\": true
                    },
                    {
                      \"title\": \"Commit\",
                      \"value\": \"${{ github.sha }}\",
                      \"short\": true
                    },
                    {
                      \"title\": \"Status\",
                      \"value\": \"$STATUS\",
                      \"short\": true
                    },
                    {
                      \"title\": \"URL\",
                      \"value\": \"${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\",
                      \"short\": false
                    }
                  ]
                }
              ]
            }" \
            "${{ env.SLACK_WEBHOOK_URL }}"
