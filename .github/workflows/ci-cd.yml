name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  emergency-disable:
    if: false # EMERGENCY DISABLE - 982 workflows
    runs-on: ubuntu-latest
    steps:
      - name: Emergency Disabled
        run: echo "This workflow is temporarily disabled due to 982 active workflows"
  # 1. Code Quality Checks
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: "**/package-lock.json"

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run TypeScript checks
        run: npm run type-check

      - name: Run security audit
        run: npm audit --audit-level moderate

  # 2. Unit and Integration Tests
  tests:
    name: Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-suite: [unit, integration]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: "**/package-lock.json"

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npm run db:generate

      - name: Run database migrations
        run: npm run db:migrate

      - name: Run ${{ matrix.test-suite }} tests
        run: npm run test:${{ matrix.test-suite }}
        env:
          NODE_ENV: test
          DATABASE_URL: "file:./dev.db"

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: ${{ matrix.test-suite }}
          name: ${{ matrix.test-suite }}-coverage

  # 3. Build Docker Images
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [code-quality, tests]

    outputs:
      web-image: ${{ steps.meta.outputs.tags }}
      api-image: ${{ steps.meta.outputs.tags-api }}
      websocket-image: ${{ steps.meta.outputs.tags-websocket }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push web image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push API image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.api
          push: true
          tags: ${{ steps.meta.outputs.tags-api }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push WebSocket image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.websocket
          push: true
          tags: ${{ steps.meta.outputs.tags-websocket }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # 4. Security Scans
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [build]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: "trivy-results.sarif"

  # 5. Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "v1.28.0"

      - name: Configure kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > ~/.kube/config

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: "v3.11.0"

      - name: Deploy to staging
        run: |
          helm upgrade --install normaldance-staging ./helm/normaldance \
            --namespace staging \
            --create-namespace \
            --set image.tag=${{ github.sha }} \
            --set image.tag-api=${{ github.sha }} \
            --set image.tag-websocket=${{ github.sha }} \
            --set env.NODE_ENV=staging \
            --set env.DATABASE_URL="${{ secrets.DATABASE_URL_STAGING }}" \
            --set env.SOLANA_RPC_URL="${{ secrets.SOLANA_RPC_URL_STAGING }}" \
            --set env.NEXTAUTH_URL="${{ secrets.NEXTAUTH_URL_STAGING }}" \
            --set env.NEXTAUTH_SECRET="${{ secrets.NEXTAUTH_SECRET_STAGING }}" \
            --wait \
            --timeout=600s

  # 6. Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "v1.28.0"

      - name: Configure kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > ~/.kube/config

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: "v3.11.0"

      - name: Deploy to production
        run: |
          helm upgrade --install normaldance-prod ./helm/normaldance \
            --namespace production \
            --create-namespace \
            --set image.tag=${{ github.sha }} \
            --set image.tag-api=${{ github.sha }} \
            --set image.tag-websocket=${{ github.sha }} \
            --set env.NODE_ENV=production \
            --set env.DATABASE_URL="${{ secrets.DATABASE_URL_PRODUCTION }}" \
            --set env.SOLANA_RPC_URL="${{ secrets.SOLANA_RPC_URL_PRODUCTION }}" \
            --set env.NEXTAUTH_URL="${{ secrets.NEXTAUTH_URL_PRODUCTION }}" \
            --set env.NEXTAUTH_SECRET="${{ secrets.NEXTAUTH_SECRET_PRODUCTION }}" \
            --wait \
            --timeout=600s

  # 7. Database Migration
  migrate-database:
    name: Database Migration
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "v1.28.0"

      - name: Configure kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > ~/.kube/config

      - name: Run database migration
        run: |
          kubectl exec -it deployment/normaldance-staging-api -n staging -- npm run db:migrate

  # 8. Performance Testing
  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install k6
        run: |
          curl -L https://github.com/grafana/k6/releases/download/v0.47.0/k6-v0.47.0-linux-amd64.tar.gz | tar xvz --strip-components 1
          sudo mv k6 /usr/local/bin/

      - name: Run performance tests
        run: |
          k6 run --out json=performance-results.json tests/performance/load-test.js
          k6 run --out json=performance-results-stress.js tests/performance/stress-test.js

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: performance-results.json
          retention-days: 30

  # 9. Documentation Update
  update-docs:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: "**/package-lock.json"

      - name: Install dependencies
        run: npm ci

      - name: Generate API documentation
        run: npm run docs:generate

      - name: Deploy documentation
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add docs/
          git commit -m "Update API documentation" || exit 0
          git push

  # 10. Notification
  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production, update-docs]
    if: always()

    steps:
      - name: Send deployment notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: "#deployments"
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
          custom_payload: |
            {
              "attachments": [
                {
                  "color": "${{ job.status == 'success' ? 'good' : job.status == 'failure' ? 'danger' : 'warning' }}",
                  "title": "${{ github.workflow }} - ${{ job.status }}",
                  "title_link": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
                  "text": "Deployment to ${{ needs.deploy-staging.environment.name || needs.deploy-production.environment.name }} completed",
                  "fields": [
                    {
                      "title": "Repository",
                      "value": "${{ github.repository }}",
                      "short": true
                    },
                    {
                      "title": "Commit",
                      "value": "${{ github.sha }}",
                      "short": true
                    },
                    {
                      "title": "Environment",
                      "value": "${{ needs.deploy-staging.environment.name || needs.deploy-production.environment.name }}",
                      "short": true
                    }
                  ]
                }
              ]
            }
