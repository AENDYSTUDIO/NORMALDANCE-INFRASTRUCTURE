name: 🚀 NORMAL DANCE - Unified CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    paths-ignore:
      - "docs/**"
      - "*.md"
      - ".gitignore"
  pull_request:
    branches: [main, develop]
  release:
    types: [published]

env:
  NODE_VERSION: "20.x"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 🧪 Quality Gates
  quality-check:
    name: 🔍 Quality & Security Check
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache-deps.outputs.cache-hit }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 🔒 Cache dependencies
        id: cache-deps
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            node_modules
            .next
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: 📦 Install dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: npm ci

      - name: 🔍 Run ESLint
        run: npm run lint

      - name: 🔒 Security Audit (High & Critical)
        run: npm audit --audit-level high --audit-level critical

      - name: 🔐 Secrets Detection
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: 🧪 Run Tests
        run: npm test
        continue-on-error: false

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/cobertura-coverage.xml
          flags: unittests
          name: codecov-umbrella

  # 🏗️ Build & Test
  build-application:
    name: 🏗️ Build Application
    runs-on: ubuntu-latest
    needs: quality-check
    if: success()

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: 📦 Build Docker image
        run: |
          docker build \
            -f docker/nextjs.Dockerfile \
            -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
            -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            .

      - name: 🔐 Security scan with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: "sarif"
          output: "trivy-results.sarif"

      - name: 📊 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

      - name: 🐳 Push Docker image
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

      - name: 📦 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            .next/
            out/
          retention-days: 7

  # 🚀 Deploy to Staging
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-application
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push' && success()
    environment: staging

    steps:
      - name: 🚀 Deploy to Render
        run: |
          curl -X POST \
            -H "Authorization: Bearer ${{ secrets.RENDER_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{
              "service_id": "${{ secrets.RENDER_SERVICE_ID_STAGING }}",
              "env": "staging",
              "git": {
                "branch": "develop",
                "commit_sha": "${{ github.sha }}"
              }
            }' \
            "https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID_STAGING }}/deploys"

  # 🚀 Deploy to Production
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: build-application
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && success()
    environment: production

    steps:
      - name: ✅ Production Deployment Approval
        uses: juliangruber/approve-action@v2
        with:
          comment: "🚀 Ready to deploy to production?"
        continue-on-error: true

      - name: 🚀 Deploy to Render
        run: |
          curl -X POST \
            -H "Authorization: Bearer ${{ secrets.RENDER_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{
              "service_id": "${{ secrets.RENDER_SERVICE_ID_PRODUCTION }}",
              "env": "production",
              "git": {
                "branch": "main",
                "commit_sha": "${{ github.sha }}"
              }
            }' \
            "https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID_PRODUCTION }}/deploys"

  # 🚀 Deploy Kubernetes
  deploy-kubernetes:
    name: ☸️ Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: build-application
    if: github.event_name == 'release' && success()

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Configure kubectl
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG }}

      - name: 🚀 Deploy with Helm
        run: |
          helm upgrade --install normaldance ./helm/normaldance \
            --namespace production \
            --create-namespace \
            --values ./helm/normaldance/values-production.yaml \
            --set image.tag=${{ github.sha }} \
            --atomic \
            --timeout 10m

      - name: 🏃‍♂️ Run smoke tests
        run: |
          kubectl wait --for=condition=available --timeout=300s deployment/normaldance --namespace production
          kubectl run test-pod --image=curlimages/curl --rm -i --restart=Never -- \
            curl -f http://normaldance.production/health

  # 📊 Monitor & Notify
  post-deploy:
    name: 📊 Post-Deploy Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production, deploy-kubernetes]
    if: always()

    steps:
      - name: 📊 Health Check
        run: |
          # Implement health checks for deployed services
          echo "Running post-deploy health checks..."

      - name: 📢 Notify Team
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: ✅ Success Notification
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          text: "🎉 Deployment completed successfully!"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # 🧹 Cleanup
  cleanup:
    name: 🧹 Cleanup Resources
    runs-on: ubuntu-latest
    if: always()
    needs: [quality-check, build-application]

    steps:
      - name: 🗑️ Clean up old packages
        run: |
          # Clean up old Docker images, cache, etc.
          echo "Cleaning up old resources..."

      - name: 📦 Clean up old artifacts
        uses: c-hive/gha-remove-artifacts@v1
        with:
          age: "1 week"
          skip-recent: 5
