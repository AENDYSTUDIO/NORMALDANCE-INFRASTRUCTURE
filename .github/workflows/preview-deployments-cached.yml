name: Preview Deployments with Caching

on:
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches: [main, develop]

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
  NODE_VERSION: "20"

jobs:
  emergency-disable:
    if: false # EMERGENCY DISABLE - 982 workflows
    runs-on: ubuntu-latest
    steps:
      - name: Emergency Disabled
        run: echo "This workflow is temporarily disabled due to 982 active workflows"
  # 1. Cache Analysis and Invalidation
  cache-analysis:
    name: Cache Analysis and Invalidation
    runs-on: ubuntu-latest
    outputs:
      should-invalidate-node-modules: ${{ steps.check.outputs.should-invalidate-node-modules }}
      should-invalidate-next-cache: ${{ steps.check.outputs.should-invalidate-next-cache }}
      should-invalidate-prisma: ${{ steps.check.outputs.should-invalidate-prisma }}
      should-invalidate-mobile: ${{ steps.check.outputs.should-invalidate-mobile }}
      cache-key: ${{ steps.key.outputs.cache-key }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Check cache invalidation
        id: check
        run: |
          # Check if cache should be invalidated based on file changes
          SHOULD_INVALIDATE_NODE_MODULES=false
          SHOULD_INVALIDATE_NEXT_CACHE=false
          SHOULD_INVALIDATE_PRISMA=false
          SHOULD_INVALIDATE_MOBILE=false

          # Check for dependency changes
          if git diff --name-only HEAD~1 HEAD | grep -E "(package\.json|package-lock\.json|yarn\.lock|pnpm-lock\.yaml)" > /dev/null; then
            SHOULD_INVALIDATE_NODE_MODULES=true
            SHOULD_INVALIDATE_PRISMA=true
            SHOULD_INVALIDATE_MOBILE=true
          fi

          # Check for Next.js config changes
          if git diff --name-only HEAD~1 HEAD | grep -E "(next\.config\.|tsconfig\.json)" > /dev/null; then
            SHOULD_INVALIDATE_NEXT_CACHE=true
          fi

          # Check for Prisma schema changes
          if git diff --name-only HEAD~1 HEAD | grep -E "(prisma/schema\.prisma|prisma/migrations)" > /dev/null; then
            SHOULD_INVALIDATE_PRISMA=true
          fi

          # Check for mobile app changes
          if git diff --name-only HEAD~1 HEAD | grep -E "mobile-app/" | grep -v "mobile-app/node_modules" > /dev/null; then
            SHOULD_INVALIDATE_MOBILE=true
          fi

          echo "should-invalidate-node-modules=$SHOULD_INVALIDATE_NODE_MODULES" >> $GITHUB_OUTPUT
          echo "should-invalidate-next-cache=$SHOULD_INVALIDATE_NEXT_CACHE" >> $GITHUB_OUTPUT
          echo "should-invalidate-prisma=$SHOULD_INVALIDATE_PRISMA" >> $GITHUB_OUTPUT
          echo "should-invalidate-mobile=$SHOULD_INVALIDATE_MOBILE" >> $GITHUB_OUTPUT

      - name: Generate cache key
        id: key
        run: |
          # Generate cache key based on file hashes
          NODE_MODULES_HASH=$(find . -name "package-lock.json" -exec sha256sum {} \; | cut -d' ' -f1 | sha256sum | cut -d' ' -f1)
          NEXT_HASH=$(find . -name "*.js" -o -name "*.jsx" -o -name "*.ts" -o -name "*.tsx" -o -name "*.json" -o -name "next.config.*" | head -10 | xargs sha256sum | cut -d' ' -f1 | sha256sum | cut -d' ' -f1)
          PRISMA_HASH=$(find . -name "prisma/schema.prisma" -exec sha256sum {} \; | cut -d' ' -f1 | sha256sum | cut -d' ' -f1)
          MOBILE_HASH=$(find mobile-app/ -name "package.json" -o -name "package-lock.json" -o -name "*.gradle" -o -name "*.xml" | xargs sha256sum | cut -d' ' -f1 | sha256sum | cut -d' ' -f1)

          CACHE_KEY="cache-${NODE_MODULES_HASH:0:8}-${NEXT_HASH:0:8}-${PRISMA_HASH:0:8}-${MOBILE_HASH:0:8}"
          echo "cache-key=$CACHE_KEY" >> $GITHUB_OUTPUT

  # 2. Setup and Cache Restore
  setup-and-restore:
    name: Setup and Cache Restore
    runs-on: ubuntu-latest
    needs: cache-analysis
    outputs:
      cache-hit: ${{ steps.restore.outputs.cache-hit }}
      cache-restore-time: ${{ steps.restore.outputs.cache-restore-time }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: "**/package-lock.json"

      - name: Restore node_modules cache
        id: restore
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            mobile-app/node_modules
          key: ${{ needs.cache-analysis.outputs.cache-key }}-node-modules
          restore-keys: |
            ${{ needs.cache-analysis.outputs.cache-key }}-node-modules-
            ${{ needs.cache-analysis.outputs.cache-key }}-node-modules
            node-modules-
            node-modules
          timeout-minutes: 5

      - name: Measure cache restore time
        id: timing
        run: |
          echo "cache-restore-time=$(echo $(( $(date +%s) - CACHE_START_TIME )))" >> $GITHUB_OUTPUT
          echo "CACHE_START_TIME=$(date +%s)" >> $GITHUB_ENV

  # 3. Install Dependencies
  install-dependencies:
    name: Install Dependencies
    runs-on: ubuntu-latest
    needs: [cache-analysis, setup-and-restore]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          # Install main app dependencies
          npm ci

          # Install mobile app dependencies if cache miss
          if [ "${{ needs.setup-and-restore.outputs.cache-hit }}" != "true" ]; then
            cd mobile-app
            npm ci
            cd ..
          fi

  # 4. Generate Prisma Client
  generate-prisma:
    name: Generate Prisma Client
    runs-on: ubuntu-latest
    needs: [cache-analysis, install-dependencies]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npm run db:generate

  # 5. Run Tests
  run-tests:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: [cache-analysis, generate-prisma]
    outputs:
      test-results: ${{ steps.test.outputs.test-results }}
      test-duration: ${{ steps.test.outputs.test-duration }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Restore test cache
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
            test-results
          key: ${{ needs.cache-analysis.outputs.cache-key }}-test-cache
          restore-keys: |
            ${{ needs.cache-analysis.outputs.cache-key }}-test-cache-
            ${{ needs.cache-analysis.outputs.cache-key }}-test-cache
            test-cache-
            test-cache
          timeout-minutes: 3

      - name: Run tests
        id: test
        run: |
          START_TIME=$(date +%s)
          npm test
          END_TIME=$(date +%s)
          echo "test-results=$?" >> $GITHUB_OUTPUT
          echo "test-duration=$((END_TIME - START_TIME))" >> $GITHUB_OUTPUT

  # 6. Build Application
  build-app:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [cache-analysis, run-tests]
    outputs:
      build-cache-hit: ${{ steps.restore.outputs.cache-hit }}
      build-duration: ${{ steps.build.outputs.build-duration }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Restore build cache
        id: restore
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
          key: ${{ needs.cache-analysis.outputs.cache-key }}-next-cache
          restore-keys: |
            ${{ needs.cache-analysis.outputs.cache-key }}-next-cache-
            ${{ needs.cache-analysis.outputs.cache-key }}-next-cache
            next-cache-
            next-cache
          timeout-minutes: 3

      - name: Build application
        id: build
        run: |
          START_TIME=$(date +%s)
          npm run build
          END_TIME=$(date +%s)
          echo "build-duration=$((END_TIME - START_TIME))" >> $GITHUB_OUTPUT

  # 7. Save Build Cache
  save-build-cache:
    name: Save Build Cache
    runs-on: ubuntu-latest
    needs: [cache-analysis, build-app]
    if: github.event_name == 'pull_request' && github.event.action != 'closed'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Save build cache
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
          key: ${{ needs.cache-analysis.outputs.cache-key }}-next-cache
          timeout-minutes: 3

  # 8. Deploy to Vercel Preview
  deploy-to-vercel:
    name: Deploy to Vercel Preview
    runs-on: ubuntu-latest
    needs: [cache-analysis, build-app, save-build-cache]
    if: github.event_name == 'pull_request' && github.event.action != 'closed'
    outputs:
      preview-url: ${{ steps.deploy.outputs.url }}
      deployment-id: ${{ steps.deploy.outputs.deployment-id }}
      pr-number: ${{ github.event.number }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Deploy to Vercel Preview
        id: deploy
        uses: vercel/action@v1
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          scope: ${{ github.repository_owner }}
          working-directory: .
          framework: "next"
          output-directory: ".next"
          install-command: "npm ci"
          build-command: "npm run build"
          dev-command: "npm run dev"
          alias: "pr-${{ github.event.number }}-${{ github.sha }}"
          environment: "preview"
          public: false

      - name: Comment PR with deployment info
        uses: actions/github-script@v7
        with:
          script: |
            const { preview-url, deployment-id } = process.env;
            const comment = `
            🚀 **Preview Deployment Ready!**

            **URL**: ${preview-url}
            **Deployment ID**: ${deployment-id}
            **PR**: #${{ github.event.number }}
            **Branch**: ${{ github.head_ref }}
            **Commit**: ${{ github.sha }}

            ---
            📋 **Preview Features:**
            - Isolated environment for testing
            - Latest changes from this PR
            - Temporary deployment (auto-deleted after 24h or PR merge)
            - Full application functionality

            🔗 **Direct Links:**
            - Application: ${preview-url}
            - Health Check: ${preview-url}/api/health
            - API Documentation: ${preview-url}/api/docs

            ⚡ **Performance Tips:**
            - First load may take longer due to cold start
            - Subsequent loads will be faster with caching
            - Use incognito mode for testing fresh state
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

            // Update PR description with preview URL
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });

            const updatedBody = `${pr.data.body}\n\n---\n\n🚀 **Preview URL**: ${preview-url}`;

            await github.rest.pulls.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              body: updatedBody
            });

            // Set deployment status
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment-id,
              state: 'success',
              description: 'Preview deployment completed successfully',
              environment: 'preview',
              environment_url: preview-url
            });

            // Set environment variables
            process.env.PREVIEW_URL = preview-url;
            process.env.DEPLOYMENT_ID = deployment-id;

  # 9. Cache Monitoring
  cache-monitoring:
    name: Cache Monitoring
    runs-on: ubuntu-latest
    needs: [cache-analysis, setup-and-restore, build-app]
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Generate cache report
        run: |
          node scripts/cache-manager.js report

      - name: Generate cache metrics
        run: |
          node scripts/cache-monitor.js metrics

      - name: Check cache alerts
        run: |
          node scripts/cache-monitor.js alerts

      - name: Upload cache report
        uses: actions/upload-artifact@v4
        with:
          name: cache-report-${{ github.run_id }}
          path: |
            ./tmp/cache-report.json
            ./tmp/cache-monitor-report.json
          retention-days: 7

  # 10. Cleanup Old Preview Deployments
  cleanup-preview:
    name: Cleanup Old Preview Deployments
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action != 'opened'

    steps:
      - name: Get preview deployments
        uses: actions/github-script@v7
        with:
          script: |
            // Get all preview deployments for this repository
            const deployments = await github.rest.repos.listDeployments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              environment: 'preview',
              per_page: 50
            });

            // Filter deployments older than 24 hours
            const twentyFourHoursAgo = new Date(Date.now() - 24 * 60 * 60 * 1000);
            const oldDeployments = deployments.data.filter(deployment => 
              new Date(deployment.created_at) < twentyFourHoursAgo &&
              deployment.environment === 'preview'
            );

            // Delete old deployments
            for (const deployment of oldDeployments) {
              await github.rest.repos.deleteDeployment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                deployment_id: deployment.id
              });
            }

            console.log(`Cleaned up ${oldDeployments.length} old preview deployments`);

  # 11. PR Closed Cleanup
  pr-cleanup:
    name: PR Cleanup
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'closed'

    steps:
      - name: Delete Vercel deployment
        uses: actions/github-script@v7
        with:
          script: |
            // Get PR number
            const prNumber = context.issue.number;

            // Find Vercel deployment by alias
            const vercelDeployments = await fetch(`https://api.vercel.com/v4/deployments?project=${process.env.VERCEL_PROJECT_ID}`, {
              headers: {
                'Authorization': `Bearer ${process.env.VERCEL_TOKEN}`
              }
            });

            const deploymentsData = await vercelDeployments.json();
            const deploymentToDelete = deploymentsData.find(d => 
              d.name === `pr-${prNumber}` && 
              d.state === 'ready'
            );

            if (deploymentToDelete) {
              await fetch(`https://api.vercel.com/v4/deployments/${deploymentToDelete.id}`, {
                method: 'DELETE',
                headers: {
                  'Authorization': `Bearer ${process.env.VERCEL_TOKEN}`
                }
              });
              
              console.log(`Deleted Vercel deployment: ${deploymentToDelete.id}`);
            }

            // Delete GitHub deployment
            const deployments = await github.rest.repos.listDeployments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              environment: 'preview',
              per_page: 50
            });

            const prDeployment = deployments.data.find(d => 
              d.environment === 'preview' && 
              d.payload?.pr_number === prNumber
            );

            if (prDeployment) {
              await github.rest.repos.deleteDeployment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                deployment_id: prDeployment.id
              });
              
              console.log(`Deleted GitHub deployment: ${prDeployment.id}`);
            }

  # 12. Status Check
  status-check:
    name: Status Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Set deployment status
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.issue.number;

            // Check if preview deployment exists
            const deployments = await github.rest.repos.listDeployments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              environment: 'preview',
              per_page: 10
            });

            const prDeployment = deployments.data.find(d => 
              d.environment === 'preview' && 
              d.payload?.pr_number === prNumber
            );

            if (prDeployment) {
              await github.rest.repos.createDeploymentStatus({
                owner: context.repo.owner,
                repo: context.repo.repo,
                deployment_id: prDeployment.id,
                state: 'success',
                description: 'Preview deployment is ready',
                environment: 'preview',
                environment_url: process.env.PREVIEW_URL || `https://pr-${prNumber}-${context.sha}.vercel.app`
              });
            } else {
              await github.rest.repos.createDeploymentStatus({
                owner: context.repo.owner,
                repo: context.repo.repo,
                deployment_id: prDeployment?.id || 0,
                state: 'pending',
                description: 'Preview deployment pending',
                environment: 'preview'
              });
            }
