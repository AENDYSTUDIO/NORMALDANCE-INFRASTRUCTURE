name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Lint and type check
  lint-typecheck:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run TypeScript check
        run: npm run typecheck

  # Unit tests
  unit-tests:
    runs-on: ubuntu-latest
    needs: lint-typecheck
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:unit

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info

  # Build Docker images
  build-images:
    runs-on: ubuntu-latest
    needs: [lint-typecheck, unit-tests]
    strategy:
      matrix:
        service:
          [nextjs, backend, ipfs-service, regru, smart-contracts, postgres]
        platform: [linux/amd64, linux/arm64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./${{ matrix.service }}.Dockerfile
          platforms: ${{ matrix.platform }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # E2E tests
  e2e-tests:
    runs-on: ubuntu-latest
    needs: build-images
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run e2e tests
        run: |
          docker compose -f docker-compose.yml -f docker-compose.override.yml --profile dev up -d
          npm run test:e2e
          docker compose down

  # Security scan
  security-scan:
    runs-on: ubuntu-latest
    needs: build-images
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "image"
          scan-ref: "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:latest"
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

      - name: Run Grype vulnerability scanner
        uses: anchore/scan-action@v3
        with:
          image: "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:latest"
          fail-build: true
          severity-cutoff: "high"

  # SBOM generation
  sbom:
    runs-on: ubuntu-latest
    needs: build-images
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate SBOM with Syft
        uses: anchore/sbom-action@v0
        with:
          image: "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:latest"
          format: "spdx-json"
          output-file: "./sbom.spdx.json"

      - name: Upload SBOM
        uses: actions/upload-artifact@v3
        with:
          name: sbom
          path: ./sbom.spdx.json

  # Sign images
  sign-images:
    runs-on: ubuntu-latest
    needs: [build-images, security-scan, sbom]
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3

      - name: Sign images
        run: |
          cosign sign ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/nextjs@${{ steps.meta.outputs.digest }}
          cosign sign ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend@${{ steps.meta.outputs.digest }}
          cosign sign ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/ipfs-service@${{ steps.meta.outputs.digest }}
          cosign sign ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/regru@${{ steps.meta.outputs.digest }}
          cosign sign ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/smart-contracts@${{ steps.meta.outputs.digest }}

  # Deploy to staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [e2e-tests, security-scan, sign-images]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment"
          # Add deployment commands here

  # Deploy to production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [e2e-tests, security-scan, sign-images]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "Deploying to production environment"
          # Add deployment commands here

  # Release
  release:
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.event_name == 'release'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create GitHub release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            ## Changes
            - Automated release from CI/CD pipeline
          draft: false
          prerelease: false
