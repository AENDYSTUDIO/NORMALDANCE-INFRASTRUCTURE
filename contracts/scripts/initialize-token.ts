import { AnchorProvider, Program, Wallet } from '@project-serum/anchor';
import { MintLayout, TOKEN_PROGRAM_ID, createInitializeMintInstruction } from '@solana/spl-token';
import { Connection, Keypair, PublicKey, SystemProgram, Transaction } from '@solana/web3.js';
import fs from 'fs';
import path from 'path';

// –ó–∞–≥—Ä—É–∂–∞–µ–º IDL –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º—ã
const IDL = require('../target/idl/music_token.json');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ç–∏
const NETWORK = 'https://api.devnet.solana.com';
const PREFLIGHT_COMMITMENT = 'processed';

// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ–∫–µ–Ω–∞
const TOKEN_CONFIG = {
  name: 'Normal Dance Music Token',
  symbol: 'MUSIC',
  decimals: 9,
  supply: 1_000_000_000, // 1 –º–∏–ª–ª–∏–∞—Ä–¥ —Ç–æ–∫–µ–Ω–æ–≤
  uri: 'https://normaldance.com/token-metadata.json'
};

async function initializeToken() {
  try {
    console.log('üéµ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞...');

    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ç–∏
    const connection = new Connection(NETWORK, PREFLIGHT_COMMITMENT);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª—é—á–µ–≤—É—é –ø–∞—Ä—É –¥–ª—è –¥–µ–ø–ª–æ–µ—Ä–∞
    const keypairPath = path.join(require('os').homedir(), '.config/solana/id.json');
    if (!fs.existsSync(keypairPath)) {
      throw new Error('–ö–ª—é—á–µ–≤–∞—è –ø–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: solana-keygen new');
    }

    const keypair = Keypair.fromSecretKey(
      new Uint8Array(JSON.parse(fs.readFileSync(keypairPath, 'utf8')))
    );

    console.log('üë§ –î–µ–ø–ª–æ–µ—Ä:', keypair.publicKey.toString());

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä
    const wallet = new Wallet(keypair);
    const provider = new AnchorProvider(connection, wallet, {
      preflightCommitment: PREFLIGHT_COMMITMENT,
    });

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É
    const programId = new PublicKey('Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFp1Jff');
    const program = new Program(IDL, programId, provider);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á–∏ –¥–ª—è –º–∏–Ω—Ç–∞ –∏ —Ç–æ–∫–µ–Ω –∞–∫–∫–∞—É–Ω—Ç–∞
    const mintKeypair = Keypair.generate();
    const tokenAccountKeypair = Keypair.generate();

    console.log('üîë –ú–∏–Ω—Ç –∞–¥—Ä–µ—Å:', mintKeypair.publicKey.toString());
    console.log('üí∞ –¢–æ–∫–µ–Ω –∞–∫–∫–∞—É–Ω—Ç:', tokenAccountKeypair.publicKey.toString());

    // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞
    const tx = new Transaction().add(
      // –°–æ–∑–¥–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç –º–∏–Ω—Ç–∞
      SystemProgram.createAccount({
        fromPubkey: keypair.publicKey,
        newAccountPubkey: mintKeypair.publicKey,
        space: MintLayout.span,
        lamports: await connection.getMinimumBalanceForRentExemption(MintLayout.span),
        programId: TOKEN_PROGRAM_ID,
      }),
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∏–Ω—Ç
      createInitializeMintInstruction(
        mintKeypair.publicKey,
        TOKEN_CONFIG.decimals,
        keypair.publicKey, // authority
        keypair.publicKey, // freeze authority (optional)
        TOKEN_PROGRAM_ID
      )
    );

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    tx.recentBlockhash = (await connection.getRecentBlockhash()).blockhash;
    tx.feePayer = keypair.publicKey;
    tx.sign(keypair, mintKeypair);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    const signature = await connection.sendRawTransaction(tx.serialize());
    await connection.confirmTransaction(signature, 'confirmed');

    console.log('‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!');
    console.log('üîó –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è:', `https://explorer.solana.com/tx/${signature}?cluster=devnet`);
    console.log('üè∑Ô∏è –ú–∏–Ω—Ç –∞–¥—Ä–µ—Å:', mintKeypair.publicKey.toString());
    console.log('üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ–∫–µ–Ω–∞:');
    console.log(`   –ù–∞–∑–≤–∞–Ω–∏–µ: ${TOKEN_CONFIG.name}`);
    console.log(`   –°–∏–º–≤–æ–ª: ${TOKEN_CONFIG.symbol}`);
    console.log(`   –î–µ—Ü–∏–º–∞–ª—Å: ${TOKEN_CONFIG.decimals}`);
    console.log(`   –û–±—â–∞—è —ç–º–∏—Å—Å–∏—è: ${TOKEN_CONFIG.supply}`);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ç–æ–∫–µ–Ω–∞
    const config = {
      programId: programId.toString(),
      mintAddress: mintKeypair.publicKey.toString(),
      tokenAccount: tokenAccountKeypair.publicKey.toString(),
      deployer: keypair.publicKey.toString(),
      network: NETWORK,
      tokenConfig: TOKEN_CONFIG
    };

    fs.writeFileSync('token-config.json', JSON.stringify(config, null, 2));
    console.log('üíæ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ token-config.json');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
initializeToken().catch(console.error);