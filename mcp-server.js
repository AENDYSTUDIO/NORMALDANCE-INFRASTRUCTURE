#!/usr/bin/env node

const { Server } = require('@modelcontextprotocol/sdk/server/index.js');
const { StdioServerTransport } = require('@modelcontextprotocol/sdk/server/stdio.js');

class NormalDanceMCPServer {
  constructor() {
    this.server = new Server(
      {
        name: "normaldance-mcp",
        version: "1.0.0",
      },
      {
        capabilities: {
          tools: {},
          resources: {},
        },
      }
    );

    this.setupHandlers();
  }

  setupHandlers() {
    // –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º—É–∑—ã–∫–æ–π
    this.server.setRequestHandler('tools/list', async () => ({
      tools: [
        {
          name: "get_track_info",
          description: "–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ",
          inputSchema: {
            type: "object",
            properties: {
              trackId: { type: "string", description: "ID —Ç—Ä–µ–∫–∞" }
            },
            required: ["trackId"]
          }
        },
        {
          name: "get_recommendations",
          description: "–ü–æ–ª—É—á–∏—Ç—å AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
          inputSchema: {
            type: "object",
            properties: {
              userId: { type: "string", description: "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" },
              limit: { type: "number", description: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π" }
            },
            required: ["userId"]
          }
        },
        {
          name: "stake_tokens",
          description: "–°—Ç–µ–π–∫–∏–Ω–≥ NDT —Ç–æ–∫–µ–Ω–æ–≤",
          inputSchema: {
            type: "object",
            properties: {
              amount: { type: "number", description: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤" },
              type: { type: "string", enum: ["fixed", "flexible"], description: "–¢–∏–ø —Å—Ç–µ–π–∫–∏–Ω–≥–∞" }
            },
            required: ["amount", "type"]
          }
        },
        {
          name: "deploy_to_vercel",
          description: "–î–µ–ø–ª–æ–π NormalDance –Ω–∞ Vercel",
          inputSchema: {
            type: "object",
            properties: {
              environment: { type: "string", enum: ["production", "preview", "development"], description: "–û–∫—Ä—É–∂–µ–Ω–∏–µ –¥–µ–ø–ª–æ—è" },
              domain: { type: "string", description: "–ö–∞—Å—Ç–æ–º–Ω—ã–π –¥–æ–º–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, normaldance.online)" },
              force: { type: "boolean", description: "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –¥–µ–ø–ª–æ–π –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö" }
            }
          }
        },
        {
          name: "check_deployment_status",
          description: "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –¥–µ–ø–ª–æ—è",
          inputSchema: {
            type: "object",
            properties: {
              deploymentId: { type: "string", description: "ID –¥–µ–ø–ª–æ—è" }
            }
          }
        },
        {
          name: "setup_environment_variables",
          description: "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å environment –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è Vercel",
          inputSchema: {
            type: "object",
            properties: {
              environment: { type: "string", enum: ["production", "preview", "development"], description: "–û–∫—Ä—É–∂–µ–Ω–∏–µ" }
            }
          }
        }
      ]
    }));

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–∑–æ–≤–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    this.server.setRequestHandler('tools/call', async (request) => {
      const { name, arguments: args } = request.params;

      switch (name) {
        case "get_track_info":
          return this.getTrackInfo(args.trackId);
        case "get_recommendations":
          return this.getRecommendations(args.userId, args.limit || 10);
        case "stake_tokens":
          return this.stakeTokens(args.amount, args.type);
        case "deploy_to_vercel":
          return this.deployToVercel(args.environment, args.domain, args.force);
        case "check_deployment_status":
          return this.checkDeploymentStatus(args.deploymentId);
        case "setup_environment_variables":
          return this.setupEnvironmentVariables(args.environment);
        default:
          throw new Error(`Unknown tool: ${name}`);
      }
    });
  }

  async getTrackInfo(trackId) {
    return {
      content: [
        {
          type: "text",
          text: `–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–µ–∫–µ ${trackId}:\n- –ù–∞–∑–≤–∞–Ω–∏–µ: Sample Track\n- –ê—Ä—Ç–∏—Å—Ç: Sample Artist\n- –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 3:45\n- –ñ–∞–Ω—Ä: Electronic`
        }
      ]
    };
  }

  async getRecommendations(userId, limit) {
    return {
      content: [
        {
          type: "text",
          text: `AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:\n1. Track A - Artist X\n2. Track B - Artist Y\n3. Track C - Artist Z`
        }
      ]
    };
  }

  async stakeTokens(amount, type) {
    const apy = type === 'fixed' ? '12%' : '8-15%';
    return {
      content: [
        {
          type: "text",
          text: `–°—Ç–µ–π–∫–∏–Ω–≥ ${amount} NDT —Ç–æ–∫–µ–Ω–æ–≤ (${type}):\n- APY: ${apy}\n- –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ω\n- –ü–µ—Ä–∏–æ–¥: ${type === 'fixed' ? '30 –¥–Ω–µ–π' : '–ì–∏–±–∫–∏–π'}`
        }
      ]
    };
  }

  async deployToVercel(environment, domain, force = false) {
    const { execSync } = require('child_process');
    
    try {
      console.log(`üöÄ –ù–∞—á–∏–Ω–∞–µ–º –¥–µ–ø–ª–æ–π NormalDance –Ω–∞ Vercel...`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º Vercel CLI
      try {
        execSync('vercel --version', { stdio: 'pipe' });
      } catch (error) {
        return {
          content: [{
            type: "text",
            text: "‚ùå Vercel CLI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: npm install -g vercel"
          }]
        };
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º package.json –≤–µ—Ä—Å–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      const buildCommand = environment === 'production' ? 'vercel --prod' : 'vercel';
      const domainFlag = domain ? `--domain ${domain}` : '';
      
      let deploymentResult;
      
      if (force) {
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –¥–µ–ø–ª–æ–π —Å –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º –æ—à–∏–±–æ–∫
        deploymentResult = execSync(`${buildCommand} ${domainFlag} --force`, { 
          encoding: 'utf8',
          stdio: 'pipe',
          timeout: 300000 // 5 –º–∏–Ω—É—Ç
        });
      } else {
        deploymentResult = execSync(`${buildCommand} ${domainFlag}`, { 
          encoding: 'utf8',
          stdio: 'pipe',
          timeout: 300000
        });
      }

      // –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è URL
      const deploymentUrl = this.extractDeploymentUrl(deploymentResult);

      return {
        content: [{
          type: "text",
          text: `‚úÖ –î–µ–ø–ª–æ–π —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!\n\nüìä –î–µ—Ç–∞–ª–∏:\n- –û–∫—Ä—É–∂–µ–Ω–∏–µ: ${environment}\n- –î–æ–º–µ–Ω: ${domain || 'Vercel URL'}\n- URL: ${deploymentUrl}\n- –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ω\n\nüîó –°—Å—ã–ª–∫–∏:\n- –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: ${deploymentUrl}\n- Health Check: ${deploymentUrl}/api/health\n- Telegram Mini App: ${deploymentUrl}/telegram-app\n\n‚ö° –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:\n1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ health endpoint\n2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ environment –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ Vercel\n3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å`
        }]
      };

    } catch (error) {
      return {
        content: [{
          type: "text",
          text: `‚ùå –û—à–∏–±–∫–∞ –¥–µ–ø–ª–æ—è: ${error.message}\n\nüîß –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:\n1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É\n2. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ Vercel CLI –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω\n3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µÁéØÂ¢É –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö\n4. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å —Ñ–ª–∞–≥–æ–º --force`
        }]
      };
    }
  }

  async checkDeploymentStatus(deploymentId) {
    const { execSync } = require('child_process');
    
    try {
      const result = execSync(`vercel inspect ${deploymentId}`, { 
        encoding: 'utf8',
        stdio: 'pipe'
      });

      return {
        content: [{
          type: "text",
          text: `üìä –°—Ç–∞—Ç—É—Å –¥–µ–ø–ª–æ—è ${deploymentId}:\n\n${result}\n\n‚úÖ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ URL –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é`
        }]
      };
    } catch (error) {
      return {
        content: [{
          type: "text",
          text: `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –¥–µ–ø–ª–æ—è: ${error.message}`
        }]
      };
    }
  }

  async setupEnvironmentVariables(environment) {
    const fs = require('fs');
    const path = require('path');

    // –ß–∏—Ç–∞–µ–º environment –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
    const envFilePath = path.join(process.cwd(), 'VERCEL_ENV_PRODUCTION_OPTIMIZED.txt');
    
    try {
      const envContent = fs.readFileSync(envFilePath, 'utf8');
      const envVars = this.parseEnvFile(envContent);

      let instructions = `üîß Environment –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è ${environment}:\n\n`;
      
      envVars.forEach((envVar, index) => {
        instructions += `${index + 1}. ${envVar.name}\n`;
        instructions += `   –ó–Ω–∞—á–µ–Ω–∏–µ: ${envVar.value}\n\n`;
      });

      instructions += `üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:\n`;
      instructions += `1. –û—Ç–∫—Ä–æ–π—Ç–µ Vercel Dashboard ‚Üí Project Settings\n`;
      instructions += `2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Environment Variables\n`;
      instructions += `3. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤—ã—à–µ\n`;
      instructions += `4. –í—ã–±–µ—Ä–∏—Ç–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: Production, Preview, Development\n`;
      instructions += `5. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∏ redeploy\n\n`;
      instructions += `‚ö†Ô∏è –í–∞–∂–Ω–æ: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è production!`;

      return {
        content: [{
          type: "text",
          text: instructions
        }]
      };
    } catch (error) {
      return {
        content: [{
          type: "text",
          text: `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å environment –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: ${error.message}`
        }]
      };
    }
  }

  extractDeploymentUrl(output) {
    const urlMatch = output.match(/https:\/\/[a-zA-Z0-9.-]+\.vercel\.app/);
    return urlMatch ? urlMatch[0] : 'URL not found';
  }

  parseEnvFile(content) {
    const lines = content.split('\n');
    const envVars = [];
    let currentValue = '';

    lines.forEach(line => {
      if (line.trim().startsWith('#') || line.trim() === '') {
        return;
      }

      if (line.includes('=')) {
        if (currentValue) {
          envVars.push({ name: currentValue.split('=')[0], value: currentValue.split('=')[1] });
        }
        currentValue = line.trim();
      } else if (currentValue) {
        currentValue += ' ' + line.trim();
      }
    });

    if (currentValue) {
      envVars.push({ name: currentValue.split('=')[0], value: currentValue.split('=')[1] });
    }

    return envVars;
  }

  async run() {
    const transport = new StdioServerTransport();
    await this.server.connect(transport);
    console.error("NORMAL DANCE MCP Server –∑–∞–ø—É—â–µ–Ω");
  }
}

const server = new NormalDanceMCPServer();
server.run().catch(console.error);