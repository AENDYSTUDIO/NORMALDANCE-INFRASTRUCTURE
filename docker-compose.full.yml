version: "3.8"

services:
  # üåê Reverse Proxy & Load Balancer
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
      - ipfs
    networks:
      - normaldance
    restart: unless-stopped

  # ‚öõÔ∏è Frontend Application
  frontend:
    build:
      context: .
      dockerfile: docker/nextjs.Dockerfile
      target: runner
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://normaldance:password@postgres:5432/normaldance
      - REDIS_URL=redis://redis:6379
      - BACKEND_URL=http://backend:8080
      - IPFS_SERVICE_URL=http://ipfs:8080
      - NEXT_PUBLIC_APP_URL=http://localhost:3000
      - NEXT_PUBLIC_WS_URL=ws://localhost:3000
    volumes:
      - frontend_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - normaldance
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # üöÄ Backend API Server
  backend:
    build:
      context: .
      dockerfile: docker/backend.Dockerfile
    ports:
      - "8080:8080"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://normaldance:password@postgres:5432/normaldance
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-super-secret-jwt-key-change-this-in-production
      - SOLANA_RPC_URL=https://api.mainnet-beta.solana.com
      - IPFS_GATEWAY_URL=http://ipfs:8080
      - FRONTEND_URL=http://frontend:3000
    volumes:
      - backend_logs:/app/logs
      - uploads_data:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      ipfs:
        condition: service_started
    networks:
      - normaldance
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  # üåê IPFS Node with Helia
  ipfs:
    build:
      context: .
      dockerfile: docker/ipfs-service.Dockerfile
    ports:
      - "8081:8080" # HTTP Gateway
      - "5001:5001" # HTTP API
      - "4001:4001" # Swarm
    environment:
      - NODE_ENV=development
      - IPFS_PATH=/data/ipfs
    volumes:
      - ipfs_data:/data/ipfs
      - ipfs_logs:/app/logs
    networks:
      - normaldance
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # üóÑÔ∏è PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=normaldance
      - POSTGRES_USER=normaldance
      - POSTGRES_PASSWORD=password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - normaldance
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U normaldance -d normaldance"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ‚ö° Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/etc/redis/redis.conf:ro
    command: redis-server /etc/redis/redis.conf
    networks:
      - normaldance
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # üìä Redis Commander (Web UI for Redis)
  redis-commander:
    image: rediscommander/redis-commander:latest
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8082:8082"
    depends_on:
      - redis
    networks:
      - normaldance
    restart: unless-stopped

  # üìä PgAdmin (PostgreSQL Web UI)
  pgadmin:
    image: dpage/pgadmin4:latest
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@normaldance.local
      - PGADMIN_DEFAULT_PASSWORD=admin
    ports:
      - "8083:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - normaldance
    restart: unless-stopped

  # üîç Portainer (Docker Management)
  portainer:
    image: portainer/portainer-ce:latest
    ports:
      - "9000:9000"
      - "9443:9443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    networks:
      - normaldance
    restart: unless-stopped

  # üìà Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
    networks:
      - normaldance
    restart: unless-stopped

  # üìä Grafana Dashboards
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - normaldance
    restart: unless-stopped

  # üîç Loki Log Aggregation
  loki:
    image: grafana/loki:latest
    ports:
      - "3100:3100"
    volumes:
      - loki_data:/loki
      - ./monitoring/loki.yml:/etc/loki/local-config.yaml:ro
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - normaldance
    restart: unless-stopped

  # üöÄ Promtail Log Collection
  promtail:
    image: grafana/promtail:latest
    volumes:
      - ./monitoring/promtail.yml:/etc/promtail/config.yml:ro
      - frontend_logs:/var/log/normaldance/frontend:ro
      - backend_logs:/var/log/normaldance/backend:ro
      - ipfs_logs:/var/log/normaldance/ipfs:ro
      - nginx_logs:/var/log/nginx:ro
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    networks:
      - normaldance
    restart: unless-stopped

volumes:
  # Data volumes
  postgres_data:
    driver: local
  redis_data:
    driver: local
  ipfs_data:
    driver: local

  # Log volumes
  frontend_logs:
    driver: local
  backend_logs:
    driver: local
  ipfs_logs:
    driver: local
  nginx_logs:
    driver: local

  # Management UI volumes
  pgadmin_data:
    driver: local
  portainer_data:
    driver: local

  # Monitoring volumes
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local

  # Upload volumes
  uploads_data:
    driver: local

networks:
  normaldance:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
