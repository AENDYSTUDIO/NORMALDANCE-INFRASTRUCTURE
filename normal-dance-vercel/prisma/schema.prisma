// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String?
  avatar        String?
  password      String?  // Add password field
  premium       Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  playlists     Playlist[]
  likedTracks   UserLikedTrack[]
  playHistory   PlayHistory[]
  
  @@map("users")
}

model Artist {
  id          String   @id @default(cuid())
  name        String   @unique
  bio         String?
  avatar      String?
  verified    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  albums      Album[]
  tracks      Track[]
  
  @@map("artists")
}

model Album {
  id          String   @id @default(cuid())
  title       String
  coverUrl    String?
  releaseDate DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  artistId    String
  artist      Artist   @relation(fields: [artistId], references: [id], onDelete: Cascade)
  
  // Relations
  tracks      Track[]
  
  @@map("albums")
}

model Track {
  id          String   @id @default(cuid())
  title       String
  duration    Int      // in seconds
  audioUrl    String
  coverUrl    String?
  genre       String?
  playCount   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  artistId    String
  artist      Artist   @relation(fields: [artistId], references: [id], onDelete: Cascade)
  
  albumId     String?
  album       Album?   @relation(fields: [albumId], references: [id], onDelete: SetNull)
  
  // Relations
  playlists   PlaylistTrack[]
  likedBy     UserLikedTrack[]
  playHistory PlayHistory[]
  
  @@map("tracks")
}

model Playlist {
  id          String   @id @default(cuid())
  name        String
  description String?
  coverUrl    String?
  isPublic    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  ownerId     String
  owner       User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  
  // Relations
  tracks      PlaylistTrack[]
  
  @@map("playlists")
}

model PlaylistTrack {
  id         String @id @default(cuid())
  position   Int
  
  playlistId String
  playlist   Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  
  trackId    String
  track      Track    @relation(fields: [trackId], references: [id], onDelete: Cascade)
  
  createdAt  DateTime @default(now())
  
  @@unique([playlistId, trackId])
  @@map("playlist_tracks")
}

model UserLikedTrack {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  trackId   String
  track     Track    @relation(fields: [trackId], references: [id], onDelete: Cascade)
  
  @@unique([userId, trackId])
  @@map("user_liked_tracks")
}

model PlayHistory {
  id        String   @id @default(cuid())
  playedAt  DateTime @default(now())
  duration  Int      // how long the track was played in seconds
  
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  trackId   String
  track     Track    @relation(fields: [trackId], references: [id], onDelete: Cascade)
  
  @@map("play_history")
}