/**
 * üîó Chainalysis Integration Examples
 *
 * –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Chainalysis —Å AML —Å–∏—Å—Ç–µ–º–æ–π
 */

import { ChainalysisService } from "../src/lib/aml-kyc/chainalysis-service";
import { ChainalysisAMLIntegration } from "../src/lib/aml-kyc/chainalysis-aml-integration";
import { ChainalysisAsset } from "../src/lib/aml-kyc/chainalysis-types";
import { MonitoredTransaction, TransactionType } from "../src/lib/aml-kyc/types";

// ============================================================================
// –ü—Ä–∏–º–µ—Ä 1: –ê–Ω–∞–ª–∏–∑ –∞–¥—Ä–µ—Å–∞ —á–µ—Ä–µ–∑ Chainalysis
// ============================================================================

export async function analyzeAddressExample() {
  console.log("üîó –ê–Ω–∞–ª–∏–∑ –∞–¥—Ä–µ—Å–∞ —á–µ—Ä–µ–∑ Chainalysis");
  
  const chainalysisService = new ChainalysisService();
  
  try {
    const result = await chainalysisService.analyzeAddress({
      address: "9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDs8",
      asset: "SOL",
      includeTransactions: true,
      includeExposure: true,
      includeIdentifications: true,
    });

    if (result.success && result.data) {
      console.log("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ:");
      console.log(`   –ê–¥—Ä–µ—Å: ${result.data.address}`);
      console.log(`   –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: ${result.data.risk}`);
      console.log(`   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${result.data.confidence}%`);
      console.log(`   –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: ${result.data.categories.join(", ")}`);
      console.log(`   –≠–∫—Å–ø–æ–∑–∏—Ü–∏—è —Ä–∏—Å–∫–∞: ${result.data.exposure.total}%`);
      console.log(`   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${result.data.transactionCount}`);
      console.log(`   –û–±—â–∏–π –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ–±—ä–µ–º: ${result.data.totalReceived}`);
      console.log(`   –ë–∞–ª–∞–Ω—Å: ${result.data.balance}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫
      if (result.data.risk === "HIGH" || result.data.risk === "SEVERE") {
        console.log("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω –≤—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞!");
        console.log("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:");
        console.log("   - –†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏");
        console.log("   - –£—Å–∏–ª–µ–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–¥—Ä–µ—Å–∞");
        console.log("   - –†–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏");
      }
    } else {
      console.log("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:", result.error?.message);
    }
  } catch (error) {
    console.error("üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", error);
  }
}

// ============================================================================
// –ü—Ä–∏–º–µ—Ä 2: –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å AML + Chainalysis
// ============================================================================

export async function analyzeTransactionWithAMLExample() {
  console.log("üîó –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏");
  
  const integration = new ChainalysisAMLIntegration();
  
  // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
  const transaction: Omit<MonitoredTransaction, "id" | "riskScore" | "riskLevel" | "monitoringStatus"> = {
    transactionHash: "5j7s8L9K2B4H6R9N3K1m3A9c1K3o8s9J2sW9",
    userId: "user-123",
    walletAddress: "9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDs8",
    type: "TRANSFER" as TransactionType,
    amount: 5000,
    currency: "SOL",
    fromAddress: "7xKXtg2CW87d97TXJSDpbD5BXgkU8",
    toAddress: "9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDs8",
    timestamp: "2023-12-01T12:00:00Z",
    blockNumber: 12345,
    additionalData: {
      description: "Transfer between user wallets",
      category: "peer-to-peer",
    },
  };

  try {
    const analyzedTransaction = await integration.analyzeTransactionWithChainalysis(transaction);
    
    console.log("‚úÖ –ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω:");
    console.log(`   –•–µ—à: ${analyzedTransaction.transactionHash}`);
    console.log(`   –û–±—â–∏–π —Ä–∏—Å–∫: ${analyzedTransaction.riskScore}/100`);
    console.log(`   –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: ${analyzedTransaction.riskLevel}`);
    console.log(`   –°—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: ${analyzedTransaction.monitoringStatus}`);
    
    if (analyzedTransaction.flaggedReasons && analyzedTransaction.flaggedReasons.length > 0) {
      console.log("‚ö†Ô∏è –ü—Ä–∏—á–∏–Ω—ã —Ñ–ª–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è:");
      analyzedTransaction.flaggedReasons.forEach(reason => {
        console.log(`   - ${reason}`);
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ Chainalysis
    const chainalysisData = analyzedTransaction.additionalData?.chainalysisIntegration;
    if (chainalysisData) {
      console.log("üîó –î–∞–Ω–Ω—ã–µ Chainalysis:");
      console.log(`   –†–∏—Å–∫ Chainalysis: ${chainalysisData.riskScore}/100`);
      console.log(`   –£—Ä–æ–≤–µ–Ω—å: ${chainalysisData.riskLevel}`);
      console.log(`   –¢—Ä–µ–±—É–µ—Ç —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: ${chainalysisData.requiresManualReview}`);
      console.log(`   –°–ª–µ–¥—É–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å: ${chainalysisData.shouldBlock}`);
      console.log(`   –°–ª–µ–¥—É–µ—Ç –æ—Ç—á–µ—Ç–∏—Ç—å: ${chainalysisData.shouldReport}`);
      
      if (chainalysisData.recommendations.length > 0) {
        console.log("   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:");
        chainalysisData.recommendations.forEach(rec => {
          console.log(`     - ${rec}`);
        });
      }
    }
  } catch (error) {
    console.error("üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", error);
  }
}

// ============================================================================
// –ü—Ä–∏–º–µ—Ä 3: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–¥—Ä–µ—Å–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
// ============================================================================

export async function monitorAddressExample() {
  console.log("üîó –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–¥—Ä–µ—Å–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏");
  
  const integration = new ChainalysisAMLIntegration();
  const address = "9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDs8";
  
  try {
    const monitoringResult = await integration.monitorAddress(address, "SOL");
    
    console.log("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω:");
    console.log(`   –ê–¥—Ä–µ—Å: ${address}`);
    console.log(`   –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: ${monitoringResult.riskLevel}`);
    console.log(`   –¢—Ä–µ–±—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π: ${monitoringResult.requiresAction}`);
    
    if (monitoringResult.recommendations.length > 0) {
      console.log("   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:");
      monitoringResult.recommendations.forEach(rec => {
        console.log(`     - ${rec}`);
      });
    }
    
    // –ï—Å–ª–∏ —Ç—Ä–µ–±—É—é—Ç—Å—è –¥–µ–π—Å—Ç–≤–∏—è - –≤—ã–ø–æ–ª–Ω—è–µ–º –∏—Ö
    if (monitoringResult.requiresAction) {
      console.log("üö® –¢—Ä–µ–±—É—é—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è!");
      
      if (monitoringResult.riskLevel === "CRITICAL") {
        console.log("   –ë–õ–û–ö–ò–†–û–í–ö–ê: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ä–∏—Å–∫ - –±–ª–æ–∫–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏");
        // await blockTransactionsForAddress(address);
      } else if (monitoringResult.riskLevel === "HIGH") {
        console.log("   –ü–†–û–í–ï–†–ö–ê: –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ - —Ç—Ä–µ–±—É–µ–º —Ä—É—á–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É");
        // await createManualReviewTicket(address);
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      // await sendSecurityAlert({
      //   address,
      //   riskLevel: monitoringResult.riskLevel,
      //   recommendations: monitoringResult.recommendations,
      // });
    }
  } catch (error) {
    console.error("üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", error);
  }
}

// ============================================================================
// –ü—Ä–∏–º–µ—Ä 4: –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤ –ø–æ—Ä—Ç—Ñ–µ–ª—è
// ============================================================================

export async function analyzePortfolioRiskExample() {
  console.log("üîó –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤ –ø–æ—Ä—Ç—Ñ–µ–ª—è");
  
  const integration = new ChainalysisAMLIntegration();
  
  // –ê–¥—Ä–µ—Å–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è
  const portfolioAddresses = [
    "9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDs8",
    "7xKXtg2CW87d97TXJSDpbD5BXgkU8",
    "5KQwrPbwdL6PhJuDJWEbRq9pKzW",
    "3HCqJZQhUvX7XeQqNqW8XKq8XqNqW8",
  ];
  
  try {
    const portfolioReport = await integration.getPortfolioRiskReport(portfolioAddresses, "SOL");
    
    if (portfolioReport.success) {
      console.log("‚úÖ –ê–Ω–∞–ª–∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω:");
      console.log(`   –û–±—â–∏–π —Ä–∏—Å–∫: ${portfolioReport.overallRisk}`);
      console.log(`   –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞: ${portfolioReport.riskScore}/100`);
      console.log(`   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥—Ä–µ—Å–æ–≤: ${portfolioAddresses.length}`);
      
      if (portfolioReport.highRiskAddresses.length > 0) {
        console.log(`   –í—ã—Å–æ–∫–æ—Ä–∏—Å–∫–æ–≤—ã–µ –∞–¥—Ä–µ—Å–∞ (${portfolioReport.highRiskAddresses.length}):`);
        portfolioReport.highRiskAddresses.forEach(addr => {
          console.log(`     - ${addr}`);
        });
      }
      
      if (portfolioReport.recommendations.length > 0) {
        console.log("   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é:");
        portfolioReport.recommendations.forEach(rec => {
          console.log(`     - ${rec}`);
        });
      }
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
      if (portfolioReport.reportId) {
        console.log(`   ID –æ—Ç—á–µ—Ç–∞: ${portfolioReport.reportId}`);
        console.log("   –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ");
      }
      
      // –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ä–µ—à–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
      if (portfolioReport.overallRisk === "CRITICAL") {
        console.log("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –†–ò–°–ö –ü–û–†–¢–§–ï–õ–Ø!");
        console.log("   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:");
        console.log("     - –ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è —Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è");
        console.log("     - –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –∏–∑ –≤—ã—Å–æ–∫–æ—Ä–∏—Å–∫–æ–≤—ã—Ö –∞–∫—Ç–∏–≤–æ–≤");
        console.log("     - –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –¥–ª—è —Ä–µ–≥—É–ª—è—Ç–æ—Ä–∞");
      } else if (portfolioReport.overallRisk === "HIGH") {
        console.log("‚ö†Ô∏è –í–´–°–û–ö–ò–ô –†–ò–°–ö –ü–û–†–¢–§–ï–õ–Ø");
        console.log("   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:");
        console.log("     - –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–∞—è –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è");
        console.log("     - –£—Å–∏–ª–µ–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥");
        console.log("     - –†–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è");
      }
    } else {
      console.log("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è:", portfolioReport);
    }
  } catch (error) {
    console.error("üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", error);
  }
}

// ============================================================================
// –ü—Ä–∏–º–µ—Ä 5: –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å Chainalysis
// ============================================================================

export async function assessUserRiskExample() {
  console.log("üîó –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å Chainalysis");
  
  const integration = new ChainalysisAMLIntegration();
  const userId = "user-123";
  
  try {
    const riskAssessment = await integration.assessUserRiskWithChainalysis(userId, "system");
    
    if (riskAssessment) {
      console.log("‚úÖ –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:");
      console.log(`   ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${riskAssessment.userId}`);
      console.log(`   –ö–æ—à–µ–ª–µ–∫: ${riskAssessment.walletAddress}`);
      console.log(`   –û–±—â–∏–π —Ä–∏—Å–∫: ${riskAssessment.overallRiskScore}/100`);
      console.log(`   –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: ${riskAssessment.riskLevel}`);
      console.log(`   –î–∞—Ç–∞ –æ—Ü–µ–Ω–∫–∏: ${riskAssessment.lastAssessed}`);
      console.log(`   –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: ${riskAssessment.nextReviewDate}`);
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–∫—Ç–æ—Ä—ã —Ä–∏—Å–∫–∞
      console.log("   –§–∞–∫—Ç–æ—Ä—ã —Ä–∏—Å–∫–∞:");
      riskAssessment.factors.forEach(factor => {
        console.log(`     - ${factor.name}: ${factor.score}/100 (–≤–µ—Å: ${factor.weight})`);
        console.log(`       ${factor.description}`);
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ Chainalysis
      const chainalysisResults = riskAssessment.additionalData?.chainalysisResults;
      if (chainalysisResults && chainalysisResults.length > 0) {
        console.log("   –†–µ–∑—É–ª—å—Ç–∞—Ç—ã Chainalysis –ø–æ –∞–¥—Ä–µ—Å–∞–º:");
        chainalysisResults.forEach(result => {
          console.log(`     - ${result.address}: —Ä–∏—Å–∫ ${result.riskScore}/100 (${result.riskLevel})`);
        });
      }
      
      // –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ä–µ—à–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ü–µ–Ω–∫–∏
      if (riskAssessment.riskLevel === "CRITICAL") {
        console.log("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –†–ò–°–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø!");
        console.log("   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:");
        console.log("     - –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π");
        console.log("     - –ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤");
        console.log("     - –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –¥–ª—è —Ä–µ–≥—É–ª—è—Ç–æ—Ä–∞");
      } else if (riskAssessment.riskLevel === "HIGH") {
        console.log("‚ö†Ô∏è –í–´–°–û–ö–ò–ô –†–ò–°–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø");
        console.log("   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:");
        console.log("     - –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤");
        console.log("     - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è");
        console.log("     - –£—Å–∏–ª–µ–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥");
      }
    } else {
      console.log("‚ùå –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
    }
  } catch (error) {
    console.error("üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", error);
  }
}

// ============================================================================
// –ü—Ä–∏–º–µ—Ä 6: –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
// ============================================================================

export async function createMonitoringRulesExample() {
  console.log("üîó –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞");
  
  const chainalysisService = new ChainalysisService();
  
  try {
    // –ü—Ä–∞–≤–∏–ª–æ 1: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∫—Ä—É–ø–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    const largeTransactionRule = await chainalysisService.createMonitoringRule({
      name: "Large Transaction Detection",
      description: "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å —Å—É–º–º–æ–π –±–æ–ª–µ–µ $50,000",
      isActive: true,
      conditions: [
        {
          field: "amount",
          operator: "GREATER_THAN",
          value: 50000,
          weight: 100,
        },
      ],
      actions: [
        {
          type: "ALERT",
          parameters: { priority: "HIGH" },
        },
        {
          type: "FLAG",
        },
        {
          type: "REQUIRE_MANUAL_REVIEW",
        },
      ],
    });
    
    if (largeTransactionRule.success) {
      console.log("‚úÖ –ü—Ä–∞–≤–∏–ª–æ –∫—Ä—É–ø–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å–æ–∑–¥–∞–Ω–æ:", largeTransactionRule.ruleId);
    }
    
    // –ü—Ä–∞–≤–∏–ª–æ 2: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –º–∏–∫—Å–µ—Ä–æ–≤
    const mixerRule = await chainalysisService.createMonitoringRule({
      name: "Mixer Detection",
      description: "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —á–µ—Ä–µ–∑ –º–∏–∫—Å–µ—Ä—ã",
      isActive: true,
      conditions: [
        {
          field: "category",
          operator: "CONTAINS",
          value: "MIXER",
          weight: 100,
        },
      ],
      actions: [
        {
          type: "ALERT",
          parameters: { priority: "CRITICAL" },
        },
        {
          type: "BLOCK",
        },
        {
          type: "REPORT",
        },
      ],
    });
    
    if (mixerRule.success) {
      console.log("‚úÖ –ü—Ä–∞–≤–∏–ª–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –º–∏–∫—Å–µ—Ä–æ–≤ —Å–æ–∑–¥–∞–Ω–æ:", mixerRule.ruleId);
    }
    
    // –ü—Ä–∞–≤–∏–ª–æ 3: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –Ω–µ–∑–∞–∫–æ–Ω–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    const illegalActivityRule = await chainalysisService.createMonitoringRule({
      name: "Illegal Activity Detection",
      description: "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Å–≤—è–∑–µ–π —Å –Ω–µ–∑–∞–∫–æ–Ω–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é",
      isActive: true,
      conditions: [
        {
          field: "category",
          operator: "CONTAINS",
          value: "ILLEGAL",
          weight: 100,
        },
      ],
      actions: [
        {
          type: "ALERT",
          parameters: { priority: "CRITICAL" },
        },
        {
          type: "BLOCK",
        },
        {
          type: "REPORT",
        },
      ],
    });
    
    if (illegalActivityRule.success) {
      console.log("‚úÖ –ü—Ä–∞–≤–∏–ª–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –Ω–µ–∑–∞–∫–æ–Ω–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–æ:", illegalActivityRule.ruleId);
    }
    
    console.log("üéØ –í—Å–µ –ø—Ä–∞–≤–∏–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã");
  } catch (error) {
    console.error("üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", error);
  }
}

// ============================================================================
// –ü—Ä–∏–º–µ—Ä 7: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤
// ============================================================================

export async function generateReportsExample() {
  console.log("üîó –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤");
  
  const chainalysisService = new ChainalysisService();
  
  try {
    // –û—Ç—á–µ—Ç 1: –ê–Ω–∞–ª–∏–∑ –∞–¥—Ä–µ—Å–∞
    const addressReport = await chainalysisService.createReport(
      "ADDRESS_ANALYSIS",
      "Address Analysis Report - High Risk Address",
      "–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—ã—Å–æ–∫–æ—Ä–∏—Å–∫–æ–≤–æ–≥–æ –∞–¥—Ä–µ—Å–∞",
      {
        address: "9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDs8",
        asset: "SOL",
        riskLevel: "HIGH",
        riskScore: 85,
        categories: ["MIXER", "HIGH_RISK"],
        recommendations: [
          "–ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏",
          "–°–æ–∑–¥–∞—Ç—å SAR –æ—Ç—á–µ—Ç",
          "–£–≤–µ–¥–æ–º–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
        ],
      }
    );
    
    if (addressReport.success) {
      console.log("‚úÖ –û—Ç—á–µ—Ç –∞–Ω–∞–ª–∏–∑–∞ –∞–¥—Ä–µ—Å–∞ —Å–æ–∑–¥–∞–Ω:", addressReport.reportId);
    }
    
    // –û—Ç—á–µ—Ç 2: –°–≤–æ–¥–∫–∞ –∫–æ–º–ø–ª–∞–µ–Ω—Å–∞
    const complianceReport = await chainalysisService.createReport(
      "COMPLIANCE_SUMMARY",
      "Monthly Compliance Summary",
      "–ï–∂–µ–º–µ—Å—è—á–Ω–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ –∫–æ–º–ø–ª–∞–µ–Ω—Å—É",
      {
        period: "2023-12",
        totalTransactions: 15420,
        flaggedTransactions: 127,
        blockedTransactions: 23,
        averageRiskScore: 35,
        highRiskAddresses: 8,
        recommendations: [
          "–£—Å–∏–ª–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—ã—Å–æ–∫–æ—Ä–∏—Å–∫–æ–≤—ã—Ö –∞–¥—Ä–µ—Å–æ–≤",
          "–ü–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Ä–æ–≥–∏ —Ä–∏—Å–∫–∞",
          "–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –∫–æ–º–ø–ª–∞–µ–Ω—Å–∞",
        ],
      }
    );
    
    if (complianceReport.success) {
      console.log("‚úÖ –û—Ç—á–µ—Ç —Å–≤–æ–¥–∫–∏ –∫–æ–º–ø–ª–∞–µ–Ω—Å–∞ —Å–æ–∑–¥–∞–Ω:", complianceReport.reportId);
    }
    
    console.log("üìä –í—Å–µ –æ—Ç—á–µ—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã");
  } catch (error) {
    console.error("üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", error);
  }
}

// ============================================================================
// –ü—Ä–∏–º–µ—Ä 8: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
// ============================================================================

export async function handleMonitoringEventsExample() {
  console.log("üîó –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞");
  
  const chainalysisService = new ChainalysisService();
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
    const events = await chainalysisService.getMonitoringEvents({
      startDate: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),
      endDate: new Date().toISOString(),
      limit: 50,
    });
    
    console.log(`üìã –ü–æ–ª—É—á–µ–Ω–æ ${events.length} —Å–æ–±—ã—Ç–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞`);
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ —É—Ä–æ–≤–Ω—é —Ä–∏—Å–∫–∞
    const eventsByRisk = events.reduce((acc, event) => {
      const risk = event.risk;
      if (!acc[risk]) acc[risk] = [];
      acc[risk].push(event);
      return acc;
    }, {} as Record<string, typeof events>);
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è
    Object.entries(eventsByRisk).forEach(([risk, riskEvents]) => {
      console.log(`‚ö†Ô∏è –°–æ–±—ã—Ç–∏—è —Å —Ä–∏—Å–∫–æ–º ${risk} (${riskEvents.length}):`);
      
      riskEvents.forEach(event => {
        console.log(`   - ${event.timestamp}: ${event.ruleName}`);
        console.log(`     –ê–¥—Ä–µ—Å: ${event.address || "N/A"}`);
        console.log(`     –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: ${event.transactionHash || "N/A"}`);
        console.log(`     –ê–∫—Ç–∏–≤: ${event.asset}`);
        
        if (!event.processed) {
          console.log(`     üîÑ –¢—Ä–µ–±—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏`);
          
          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
          switch (risk) {
            case "SEVERE":
              console.log("       üö® –ù–ï–ú–ï–î–õ–ï–ù–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø: –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞");
              // await processSevereEvent(event);
              break;
            case "HIGH":
              console.log("       ‚ö†Ô∏è –°–†–û–ß–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞");
              // await processHighEvent(event);
              break;
            case "MEDIUM":
              console.log("       üìã –í–ù–ò–ú–ê–ù–ò–ï: –£—Å–∏–ª–µ–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥");
              // await processMediumEvent(event);
              break;
            default:
              console.log("       üìù –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞");
              // await processLowEvent(event);
          }
        }
      });
    });
    
    console.log("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
  } catch (error) {
    console.error("üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", error);
  }
}

// ============================================================================
// –ì–ª–∞–≤–Ω—ã–π –ø—Ä–∏–º–µ—Ä - –∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π
// ============================================================================

export async function runAllChainalysisExamples() {
  console.log("üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–∏–º–µ—Ä–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Chainalysis");
  console.log("=" .repeat(60));
  
  try {
    // 1. –ê–Ω–∞–ª–∏–∑ –∞–¥—Ä–µ—Å–∞
    await analyzeAddressExample();
    console.log();
    
    // 2. –ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    await analyzeTransactionWithAMLExample();
    console.log();
    
    // 3. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–¥—Ä–µ—Å–∞
    await monitorAddressExample();
    console.log();
    
    // 4. –ê–Ω–∞–ª–∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è
    await analyzePortfolioRiskExample();
    console.log();
    
    // 5. –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await assessUserRiskExample();
    console.log();
    
    // 6. –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    await createMonitoringRulesExample();
    console.log();
    
    // 7. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤
    await generateReportsExample();
    console.log();
    
    // 8. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    await handleMonitoringEventsExample();
    console.log();
    
    console.log("‚úÖ –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!");
  } catch (error) {
    console.error("üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–∏–º–µ—Ä–æ–≤:", error);
  }
}

// ============================================================================
// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
// ============================================================================

export {
  analyzeAddressExample,
  analyzeTransactionWithAMLExample,
  monitorAddressExample,
  analyzePortfolioRiskExample,
  assessUserRiskExample,
  createMonitoringRulesExample,
  generateReportsExample,
  handleMonitoringEventsExample,
  runAllChainalysisExamples,
};