// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String?
  solanaAddress String?
  tonAddress    String?
  telegramId    String?
  isArtist      Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  tracks       Track[]
  purchases    Purchase[]
  transactions Transaction[]
}

model Track {
  id          String   @id @default(cuid())
  title       String
  genre       String
  description String?
  coverArt    String?
  audioUrl    String
  ipfsHash    String?
  price       Float
  currency    String   @default("SOL") // SOL or TON
  artistId    String
  isMinted    Boolean  @default(false)
  mintAddress String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  artist    User       @relation(fields: [artistId], references: [id])
  nfts      Nft[]
  purchases Purchase[]
}

model Nft {
  id           String   @id @default(cuid())
  trackId      String
  blockchain   String // SOL or TON
  mintAddress  String
  ownerAddress String
  price        Float
  currency     String
  metadata     String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  track     Track      @relation(fields: [trackId], references: [id])
  purchases Purchase[]
}

model Purchase {
  id          String   @id @default(cuid())
  nftId       String
  buyerId     String
  price       Float
  currency    String
  transaction String
  createdAt   DateTime @default(now())

  nft     Nft     @relation(fields: [nftId], references: [id])
  buyer   User    @relation(fields: [buyerId], references: [id])
  Track   Track?  @relation(fields: [trackId], references: [id])
  trackId String?
}

model Transaction {
  id         String   @id @default(cuid())
  userId     String
  type       String // MINT, PURCHASE, SALE
  blockchain String // SOL or TON
  hash       String
  amount     Float
  currency   String
  status     String   @default("PENDING")
  metadata   String?
  createdAt  DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}
