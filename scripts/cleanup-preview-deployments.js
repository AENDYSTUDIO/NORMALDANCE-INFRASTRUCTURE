#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö preview –¥–µ–ø–ª–æ–µ–≤
 * 
 * –§—É–Ω–∫—Ü–∏–∏:
 * - –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç age, —Å—Ç–∞—Ç—É—Å PR –∏ –¥—Ä—É–≥–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
 * - –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫–∞–∫–∏–µ –¥–µ–ø–ª–æ–∏ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å
 * - –£—á–∏—Ç—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –≤–∞–∂–Ω—ã—Ö –¥–µ–ø–ª–æ–µ–≤
 * - –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
 * - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç dry run —Ä–µ–∂–∏–º
 */

import fs from 'fs';
import path from 'path';

class CleanupPreviewDeployments {
  constructor(options = {}) {
    this.deployments = options.deployments || [];
    this.dryRun = options.dryRun || false;
    this.maxAgeDays = options.maxAgeDays || 7;
    this.cleanupThreshold = options.cleanupThreshold || 7;
    this.forceCleanup = options.forceCleanup || false;
    this.outputJson = options.outputJson || false;
    this.protectedPatterns = options.protectedPatterns || [
      'important',
      'critical',
      'production',
      'staging',
      'main',
      'develop',
      'release'
    ];
    this.notificationDays = options.notificationDays || 3;
    
    // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    this.results = {
      deployments_to_delete: [],
      deployments_to_keep: [],
      protected_deployments: [],
      notifications_needed: [],
      summary: {
        total: 0,
        to_delete: 0,
        to_keep: 0,
        protected: 0,
        notifications: 0
      }
    };
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ –æ—á–∏—Å—Ç–∫–∏
   */
  async cleanup() {
    console.log('üßπ Starting preview deployments cleanup...');
    console.log(`üìã Configuration:`);
    console.log(`  - Dry Run: ${this.dryRun}`);
    console.log(`  - Max Age Days: ${this.maxAgeDays}`);
    console.log(`  - Cleanup Threshold: ${this.cleanupThreshold}`);
    console.log(`  - Force Cleanup: ${this.forceCleanup}`);
    console.log(`  - Total Deployments: ${this.deployments.length}`);

    // –ü–∞—Ä—Å–∏–º JSON –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞
    if (typeof this.deployments === 'string') {
      try {
        this.deployments = JSON.parse(this.deployments);
      } catch (error) {
        console.error('‚ùå Failed to parse deployments JSON:', error.message);
        return this.results;
      }
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –¥–µ–ø–ª–æ–π
    this.deployments.forEach(deployment => {
      this.analyzeDeployment(deployment);
    });

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –æ—á–∏—Å—Ç–∫–∏
    this.applyCleanupStrategy();

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    this.generateNotifications();

    // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    this.printResults();

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (this.outputJson) {
      this.saveResults();
    }

    return this.results;
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π –¥–µ–ø–ª–æ–π
   */
  analyzeDeployment(deployment) {
    this.results.summary.total++;

    const analysis = {
      ...deployment,
      age_days: this.calculateAgeInDays(deployment.createdAt),
      is_protected: this.isProtectedDeployment(deployment),
      should_delete: false,
      reason: '',
      pr_status: this.getPRStatus(deployment),
      is_active: this.isActiveDeployment(deployment)
    };

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —É–¥–∞–ª—è—Ç—å –¥–µ–ø–ª–æ–π
    if (this.shouldDeleteDeployment(analysis)) {
      analysis.should_delete = true;
      analysis.reason = this.getDeletionReason(analysis);
      this.results.deployments_to_delete.push(analysis);
      this.results.summary.to_delete++;
    } else {
      this.results.deployments_to_keep.push(analysis);
      this.results.summary.to_keep++;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–µ–ø–ª–æ–π –∑–∞—â–∏—â–µ–Ω–Ω—ã–º
    if (analysis.is_protected) {
      this.results.protected_deployments.push(analysis);
      this.results.summary.protected++;
    }
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ —É–¥–∞–ª—è—Ç—å –¥–µ–ø–ª–æ–π
   */
  shouldDeleteDeployment(analysis) {
    // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω force cleanup, —É–¥–∞–ª—è–µ–º –≤—Å–µ –∫—Ä–æ–º–µ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö
    if (this.forceCleanup && !analysis.is_protected) {
      return true;
    }

    // –í—Å–µ–≥–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–µ–ø–ª–æ–∏
    if (analysis.is_active) {
      return false;
    }

    // –í—Å–µ–≥–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ –¥–µ–ø–ª–æ–∏
    if (analysis.is_protected) {
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç
    if (analysis.age_days > this.maxAgeDays) {
      return true;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥ –æ—á–∏—Å—Ç–∫–∏
    if (analysis.age_days > this.cleanupThreshold) {
      return true;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å PR
    if (analysis.pr_status === 'merged' || analysis.pr_status === 'closed') {
      return true;
    }

    return false;
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–∏—á–∏–Ω—É —É–¥–∞–ª–µ–Ω–∏—è
   */
  getDeletionReason(analysis) {
    if (analysis.is_protected) {
      return 'protected';
    }

    if (analysis.age_days > this.maxAgeDays) {
      return `too_old_${analysis.age_days}_days`;
    }

    if (analysis.age_days > this.cleanupThreshold) {
      return `above_threshold_${analysis.age_days}_days`;
    }

    if (analysis.pr_status === 'merged') {
      return 'pr_merged';
    }

    if (analysis.pr_status === 'closed') {
      return 'pr_closed';
    }

    if (analysis.is_active) {
      return 'active';
    }

    return 'unknown';
  }

  /**
   * –ü—Ä–∏–º–µ–Ω—è–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –æ—á–∏—Å—Ç–∫–∏
   */
  applyCleanupStrategy() {
    // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω dry run, –Ω–∏—á–µ–≥–æ –Ω–µ —É–¥–∞–ª—è–µ–º
    if (this.dryRun) {
      this.results.deployments_to_delete = [];
      this.results.summary.to_delete = 0;
      return;
    }

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –æ—á–∏—Å—Ç–∫–∏
    this.applyAdditionalRules();
  }

  /**
   * –ü—Ä–∏–º–µ–Ω—è–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –æ—á–∏—Å—Ç–∫–∏
   */
  applyAdditionalRules() {
    // –ü—Ä–∞–≤–∏–ª–æ 1: –û—Å—Ç–∞–≤–ª—è–µ–º —Å–∞–º—ã–µ —Å–≤–µ–∂–∏–µ –¥–µ–ø–ª–æ–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ PR
    const prDeployments = {};
    this.results.deployments_to_delete.forEach(deployment => {
      const prNumber = deployment.payload?.pr_number || deployment.name?.match(/pr-(\d+)/)?.[1];
      if (prNumber) {
        if (!prDeployments[prNumber] || 
            new Date(deployment.createdAt) > new Date(prDeployments[prNumber].createdAt)) {
          prDeployments[prNumber] = deployment;
        }
      }
    });

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–µ–ø–ª–æ–∏ –¥–ª—è —Ç–µ—Ö –∂–µ PR, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–µ —Å–≤–µ–∂–∏–µ
    Object.keys(prDeployments).forEach(prNumber => {
      const latestDeployment = prDeployments[prNumber];
      this.results.deployments_to_delete = this.results.deployments_to_delete.filter(deployment => {
        const deploymentPrNumber = deployment.payload?.pr_number || deployment.name?.match(/pr-(\d+)/)?.[1];
        return deploymentPrNumber !== prNumber || deployment.id === latestDeployment.id;
      });
    });

    // –ü—Ä–∞–≤–∏–ª–æ 2: –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–ø–ª–æ–µ–≤
    this.limitDeployments();
  }

  /**
   * –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–ø–ª–æ–µ–≤
   */
  limitDeployments() {
    const maxDeployments = 20;
    
    if (this.results.deployments_to_delete.length > maxDeployments) {
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É (—Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ —É–¥–∞–ª—è–µ–º –ø–µ—Ä–≤—ã–º–∏)
      this.results.deployments_to_delete.sort((a, b) => 
        new Date(a.createdAt) - new Date(b.createdAt)
      );
      
      // –£–¥–∞–ª—è–µ–º —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ
      const toRemove = this.results.deployments_to_delete.splice(maxDeployments);
      toRemove.forEach(deployment => {
        this.results.deployments_to_keep.push(deployment);
        this.results.summary.to_keep++;
        this.results.summary.to_delete--;
      });
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  generateNotifications() {
    this.results.deployments_to_delete.forEach(deployment => {
      if (deployment.age_days <= this.notificationDays) {
        this.results.notifications_needed.push(deployment);
        this.results.summary.notifications++;
      }
    });
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–µ–ø–ª–æ–π –∑–∞—â–∏—â–µ–Ω–Ω—ã–º
   */
  isProtectedDeployment(deployment) {
    const name = deployment.name?.toLowerCase() || '';
    const url = deployment.url?.toLowerCase() || '';
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –∏–º–µ–Ω–∏
    for (const pattern of this.protectedPatterns) {
      if (name.includes(pattern) || url.includes(pattern)) {
        return true;
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Ç–µ–≥–∞–º
    if (deployment.tags) {
      for (const tag of deployment.tags) {
        if (this.protectedPatterns.includes(tag.toLowerCase())) {
          return true;
        }
      }
    }
    
    return false;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–µ–ø–ª–æ–π –∞–∫—Ç–∏–≤–Ω—ã–º
   */
  isActiveDeployment(deployment) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    if (deployment.usage?.users > 0) {
      return true;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–µ–¥–∞–≤–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã
    if (deployment.usage?.requests > 100) {
      return true;
    }
    
    return false;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å PR
   */
  getPRStatus(deployment) {
    if (deployment.payload?.pr_state) {
      return deployment.payload.pr_state;
    }
    
    if (deployment.name?.includes('merged')) {
      return 'merged';
    }
    
    if (deployment.name?.includes('closed')) {
      return 'closed';
    }
    
    return 'open';
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç –¥–µ–ø–ª–æ—è –≤ –¥–Ω—è—Ö
   */
  calculateAgeInDays(createdAt) {
    const created = new Date(createdAt);
    const now = new Date();
    const diffTime = Math.abs(now - created);
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    return diffDays;
  }

  /**
   * –í—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
   */
  printResults() {
    console.log('\nüìä Cleanup Results:');
    console.log(`  Total Deployments: ${this.results.summary.total}`);
    console.log(`  To Delete: ${this.results.summary.to_delete}`);
    console.log(`  To Keep: ${this.results.summary.to_keep}`);
    console.log(`  Protected: ${this.results.summary.protected}`);
    console.log(`  Notifications Needed: ${this.results.summary.notifications}`);

    if (this.results.deployments_to_delete.length > 0) {
      console.log('\nüóëÔ∏è  Deployments to Delete:');
      this.results.deployments_to_delete.forEach(deployment => {
        console.log(`  - ${deployment.name} (${deployment.age_days} days old) - ${deployment.reason}`);
      });
    }

    if (this.results.protected_deployments.length > 0) {
      console.log('\nüõ°Ô∏è  Protected Deployments:');
      this.results.protected_deployments.forEach(deployment => {
        console.log(`  - ${deployment.name} (${deployment.age_days} days old)`);
      });
    }

    if (this.results.notifications_needed.length > 0) {
      console.log('\nüì¢ Notifications Needed:');
      this.results.notifications_needed.forEach(deployment => {
        console.log(`  - ${deployment.name} (${deployment.age_days} days old)`);
      });
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª
   */
  saveResults() {
    const resultsPath = path.join(__dirname, '../tmp/cleanup-results.json');
    
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const tmpDir = path.join(__dirname, '../tmp');
    if (!fs.existsSync(tmpDir)) {
      fs.mkdirSync(tmpDir, { recursive: true });
    }
    
    fs.writeFileSync(resultsPath, JSON.stringify(this.results, null, 2));
    console.log(`\nüíæ Results saved to: ${resultsPath}`);
  }
}

// CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
if (require.main === module) {
  const args = process.argv.slice(2);
  const options = {};
  
  // –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
  for (let i = 0; i < args.length; i++) {
    const arg = args[i];
    if (arg.startsWith('--')) {
      const key = arg.substring(2);
      const nextArg = args[i + 1];
      
      if (nextArg && !nextArg.startsWith('--')) {
        options[key] = nextArg;
        i++;
      } else {
        options[key] = true;
      }
    }
  }
  
  // –ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏
  const cleaner = new CleanupPreviewDeployments(options);
  cleaner.cleanup().catch(console.error);
}

module.exports = CleanupPreviewDeployments;