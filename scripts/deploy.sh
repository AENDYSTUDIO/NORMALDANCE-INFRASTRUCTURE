#!/bin/bash

# üöÄ NORMAL DANCE - –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./scripts/deploy.sh [environment] [service]

set -euo pipefail

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "${SCRIPT_DIR}/.." && pwd)"
ENVIRONMENT="${1:-production}"
SERVICE="${2:-all}"

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
LOG_FILE="${PROJECT_ROOT}/logs/deploy-$(date +%Y%m%d-%H%M%S).log"

log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')] $*${NC}" | tee -a "${LOG_FILE}"
}

success() {
    echo -e "${GREEN}‚úÖ $*${NC}" | tee -a "${LOG_FILE}"
}

warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $*${NC}" | tee -a "${LOG_FILE}"
}

error() {
    echo -e "${RED}‚ùå $*${NC}" | tee -a "${LOG_FILE}"
    exit 1
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."

    local deps=("docker" "kubectl" "helm")
    for dep in "${deps[@]}"; do
        if ! command -v "${dep}" &> /dev/null; then
            error "–¢—Ä–µ–±—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ${dep}"
        fi
    done

    success "–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_environment() {
    log "–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –æ–∫—Ä—É–∂–µ–Ω–∏—è: ${ENVIRONMENT}"

    if [[ -f "${PROJECT_ROOT}/.env.${ENVIRONMENT}" ]]; then
        # shellcheck source=/dev/null
        source "${PROJECT_ROOT}/.env.${ENVIRONMENT}"
        success "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞"
    else
        warning "–§–∞–π–ª .env.${ENVIRONMENT} –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    local required_vars=("DATABASE_URL" "REDIS_URL" "JWT_SECRET")
    for var in "${required_vars[@]}"; do
        if [[ -z "${!var:-}" ]]; then
            error "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è ${var} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
        fi
    done
}

# –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
pre_flight_checks() {
    log "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫..."

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Git —Å—Ç–∞—Ç—É—Å–∞
    if [[ -n "$(git status --porcelain)" ]]; then
        warning "–ï—Å—Ç—å –Ω–µ–∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏"
        read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            error "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
        fi
    fi

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ç–∫–∏
    local current_branch
    current_branch=$(git branch --show-current)
    if [[ "${ENVIRONMENT}" == "production" && "${current_branch}" != "main" ]]; then
        error "–î–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –Ω–∞ –≤–µ—Ç–∫–µ main"
    fi

    success "–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã"
}

# –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤
build_images() {
    log "–°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤..."

    local image_tag
    image_tag="${ENVIRONMENT}-$(git rev-parse --short HEAD)"

    # –°–±–æ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    local services=("frontend" "backend" "ipfs")

    for service in "${services[@]}"; do
        log "–°–±–æ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–∞: ${service}"

        case "${service}" in
            "frontend")
                docker build \
                    -f docker/nextjs.Dockerfile \
                    -t "normaldance-${service}:${image_tag}" \
                    -t "normaldance-${service}:latest" \
                    "${PROJECT_ROOT}"
                ;;
            "backend")
                docker build \
                    -f docker/backend.Dockerfile \
                    -t "normaldance-${service}:${image_tag}" \
                    -t "normaldance-${service}:latest" \
                    "${PROJECT_ROOT}"
                ;;
            "ipfs")
                docker build \
                    -f docker/ipfs-service.Dockerfile \
                    -t "normaldance-${service}:${image_tag}" \
                    -t "normaldance-${service}:latest" \
                    "${PROJECT_ROOT}"
                ;;
        esac

        success "–°–µ—Ä–≤–∏—Å ${service} —Å–æ–±—Ä–∞–Ω"
    done

    export IMAGE_TAG="${image_tag}"
}

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤
test_images() {
    log "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Docker –æ–±—Ä–∞–∑–æ–≤..."

    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    for service in frontend backend ipfs; do
        log "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞: ${service}"

        local container_name="test-${service}-$$"
        docker run \
            --name "${container_name}" \
            --rm \
            --detach \
            "normaldance-${service}:${IMAGE_TAG}"

        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞
        sleep 10

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
        if docker exec "${container_name}" curl -f "http://localhost:3000/health" &>/dev/null; then
            success "–°–µ—Ä–≤–∏—Å ${service} –ø—Ä–æ—à–µ–ª health check"
        else
            error "Health check —Å–µ—Ä–≤–∏—Å–∞ ${service} –Ω–µ –ø—Ä–æ–π–¥–µ–Ω"
        fi

        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        docker stop "${container_name}" || true
    done

    success "–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã"
}

# –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –≤ Kubernetes
deploy_kubernetes() {
    log "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –≤ Kubernetes..."

    # –°–æ–∑–¥–∞–Ω–∏–µ namespace –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    kubectl create namespace "${ENVIRONMENT}" --dry-run=client -o yaml | kubectl apply -f -

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π Helm
    helm dependency update "${PROJECT_ROOT}/helm/normaldance"

    # –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Helm
    helm upgrade --install normaldance "${PROJECT_ROOT}/helm/normaldance" \
        --namespace "${ENVIRONMENT}" \
        --create-namespace \
        --values "${PROJECT_ROOT}/helm/normaldance/values-${ENVIRONMENT}.yaml" \
        --set image.tag="${IMAGE_TAG}" \
        --atomic \
        --timeout 10m \
        --wait

    success "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –≤ Kubernetes –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
}

# –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞ Render
deploy_render() {
    log "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞ Render..."

    local services=("dnb1st-ru" "dnb1st-store")
    local service_ids=()

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ ID —Å–µ—Ä–≤–∏—Å–æ–≤
    case "${ENVIRONMENT}" in
        "production")
            service_ids=("dnb1st-ru-prod" "dnb1st-store-prod")
            ;;
        "staging")
            service_ids=("dnb1st-ru-staging" "dnb1st-store-staging")
            ;;
        *)
            error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ: ${ENVIRONMENT}"
            ;;
    esac

    # –î–µ–ø–ª–æ–π –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
    for i in "${!services[@]}"; do
        local service="${services[$i]}"
        local service_id="${service_ids[$i]}"

        log "–î–µ–ø–ª–æ–π —Å–µ—Ä–≤–∏—Å–∞: ${service}"

        curl -X POST \
            -H "Authorization: Bearer ${RENDER_API_TOKEN}" \
            -H "Content-Type: application/json" \
            -d "{
                \"service_id\": \"${service_id}\",
                \"env\": \"${ENVIRONMENT}\",
                \"git\": {
                    \"branch\": \"$(git branch --show-current)\",
                    \"commit_sha\": \"$(git rev-parse HEAD)\"
                }
            }" \
            "https://api.render.com/v1/services/${service_id}/deploys"

        success "–î–µ–ø–ª–æ–π —Å–µ—Ä–≤–∏—Å–∞ ${service} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω"
    done
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
verify_deployment() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è..."

    case "${SERVICE}" in
        "kubernetes"|"k8s")
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ Kubernetes –¥–µ–ø–ª–æ—è
            kubectl wait --for=condition=available --timeout=300s \
                deployment/normaldance --namespace "${ENVIRONMENT}"

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
            kubectl get services --namespace "${ENVIRONMENT}"

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ Ingress
            kubectl get ingress --namespace "${ENVIRONMENT}"

            # Smoke —Ç–µ—Å—Ç—ã
            local app_url
            app_url="https://normaldance-${ENVIRONMENT}.local"
            if curl -f -k "${app_url}/health" &>/dev/null; then
                success "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: ${app_url}"
            else
                error "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
            fi
            ;;
        "render")
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ Render –¥–µ–ø–ª–æ—è
            local render_url="https://dnb1st-ru.onrender.com"
            for i in {1..30}; do
                if curl -f "${render_url}/health" &>/dev/null; then
                    success "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: ${render_url}"
                    return 0
                fi
                log "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è... (${i}/30)"
                sleep 10
            done
            error "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –≥–æ—Ç–æ–≤–æ –ø–æ—Å–ª–µ 5 –º–∏–Ω—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è"
            ;;
        *)
            # –û–±—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            success "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
            ;;
    esac
}

# –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
send_notification() {
    log "–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π..."

    local status="${1:-success}"
    local webhook_url="${SLACK_WEBHOOK_URL:-}"

    if [[ -n "${webhook_url}" ]]; then
        local color="good"
        local emoji="‚úÖ"

        if [[ "${status}" == "failed" ]]; then
            color="danger"
            emoji="‚ùå"
        fi

        curl -X POST \
            -H "Content-type: application/json" \
            -d "{
                \"text\": \"${emoji} Deployment ${status} for NORMAL DANCE\",
                \"attachments\": [
                    {
                        \"color\": \"${color}\",
                        \"fields\": [
                            {
                                \"title\": \"Environment\",
                                \"value\": \"${ENVIRONMENT}\",
                                \"short\": true
                            },
                            {
                                \"title\": \"Commit\",
                                \"value\": \"$(git rev-parse --short HEAD)\",
                                \"short\": true
                            },
                            {
                                \"title\": \"Branch\",
                                \"value\": \"$(git branch --show-current)\",
                                \"short\": true
                            }
                        ]
                    }
                ]
            }" \
            "${webhook_url}"

        success "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Slack"
    else
        warning "Slack webhook –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ"
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    log "üöÄ –ù–∞—á–∞–ª–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è NORMAL DANCE"
    log "–û–∫—Ä—É–∂–µ–Ω–∏–µ: ${ENVIRONMENT}"
    log "–°–µ—Ä–≤–∏—Å: ${SERVICE}"
    log "–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: $(date)"

    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤
    mkdir -p "${PROJECT_ROOT}/logs"

    # –û—Å–Ω–æ–≤–Ω—ã–µ —ç—Ç–∞–ø—ã —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
    check_dependencies
    load_environment
    pre_flight_checks
    build_images
    test_images

    case "${SERVICE}" in
        "kubernetes"|"k8s")
            deploy_kubernetes
            verify_deployment
            send_notification "success"
            ;;
        "render")
            deploy_render
            verify_deployment
            send_notification "success"
            ;;
        "all")
            deploy_kubernetes
            deploy_render
            verify_deployment
            send_notification "success"
            ;;
        *)
            error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å: ${SERVICE}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: kubernetes, render, –∏–ª–∏ all"
            ;;
    esac

    log "üéâ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
    log "–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: $(date)"
    log "–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ —Ñ–∞–π–ª–µ: ${LOG_FILE}"
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
cleanup() {
    log "–ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è..."
    send_notification "failed"
    exit 1
}

trap cleanup INT TERM

# –ó–∞–ø—É—Å–∫
main "$@"