#!/bin/bash

# üß™ NORMAL DANCE - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./scripts/test-deployment.sh [environment]

set -euo pipefail

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

ENVIRONMENT="${1:-production}"
TIMEOUT=300

log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')] $*${NC}"
}

success() {
    echo -e "${GREEN}‚úÖ $*${NC}"
}

warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $*${NC}"
}

error() {
    echo -e "${RED}‚ùå $*${NC}"
    exit 1
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
test_service_health() {
    local service_name="$1"
    local url="$2"
    local expected_code="${3:-200}"

    log "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞: ${service_name} (${url})"

    for i in {1..30}; do
        if curl -f -s --max-time 10 "${url}" > /dev/null 2>&1; then
            success "–°–µ—Ä–≤–∏—Å ${service_name} –¥–æ—Å—Ç—É–ø–µ–Ω"
            return 0
        fi

        log "–û–∂–∏–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ ${service_name}... (${i}/30)"
        sleep 10
    done

    error "–°–µ—Ä–≤–∏—Å ${service_name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ ${TIMEOUT} —Å–µ–∫—É–Ω–¥"
}

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints
test_api_endpoints() {
    log "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints..."

    local base_url="https://dnb1st-ru.onrender.com"

    # Health check
    test_service_health "Health Check" "${base_url}/api/health"

    # API –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if curl -f -s "${base_url}/api/info" > /dev/null 2>&1; then
        success "API info endpoint –¥–æ—Å—Ç—É–ø–µ–Ω"
    else
        warning "API info endpoint –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi

    # WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    log "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è..."
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
}

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
test_database() {
    log "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö..."

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ kubectl exec –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    if kubectl exec -n "${ENVIRONMENT}" deployment/normaldance -- \
         pg_isready -U normaldance -d normaldance > /dev/null 2>&1; then
        success "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞"
    else
        warning "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
    fi
}

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Redis
test_redis() {
    log "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Redis..."

    if kubectl exec -n "${ENVIRONMENT}" deployment/normaldance -- \
         redis-cli ping > /dev/null 2>&1; then
        success "Redis –¥–æ—Å—Ç—É–ø–µ–Ω"
    else
        warning "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis"
    fi
}

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ IPFS
test_ipfs() {
    log "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ IPFS —É–∑–ª–∞..."

    if kubectl exec -n "${ENVIRONMENT}" deployment/normaldance -- \
         curl -f "http://localhost:8080/health" > /dev/null 2>&1; then
        success "IPFS —É–∑–µ–ª –¥–æ—Å—Ç—É–ø–µ–Ω"
    else
        warning "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ IPFS"
    fi
}

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–ª–æ–∫—á–µ–π–Ω –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
test_blockchain() {
    log "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–ª–æ–∫—á–µ–π–Ω –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏..."

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Solana RPC
    if curl -f -s --max-time 10 \
        "https://api.mainnet-beta.solana.com/health" > /dev/null 2>&1; then
        success "Solana RPC –¥–æ—Å—Ç—É–ø–µ–Ω"
    else
        warning "Solana RPC –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ TON API
    if curl -f -s --max-time 10 \
        "https://ton.org/status" > /dev/null 2>&1; then
        success "TON API –¥–æ—Å—Ç—É–ø–µ–Ω"
    else
        warning "TON API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
}

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
test_performance() {
    log "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏..."

    local base_url="https://dnb1st-ru.onrender.com"

    # –ò–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞
    local response_time
    response_time=$(curl -o /dev/null -s -w "%{time_total}\n" \
        "${base_url}/api/health")

    if (( $(echo "${response_time} < 2.0" | bc -l) )); then
        success "–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –≤ –Ω–æ—Ä–º–µ: ${response_time}s"
    else
        warning "–í—ã—Å–æ–∫–æ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${response_time}s"
    fi
}

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
test_security() {
    log "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏..."

    local base_url="https://dnb1st-ru.onrender.com"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTPS
    if curl -f -s -I "${base_url}" | grep -q "HTTP/2"; then
        success "HTTPS –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
    else
        warning "–ü—Ä–æ–±–ª–µ–º—ã —Å HTTPS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π"
    fi

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ security headers
    local headers
    headers=$(curl -f -s -I "${base_url}" | grep -E "(X-Frame-Options|X-Content-Type-Options|Strict-Transport-Security)")

    if [[ -n "${headers}" ]]; then
        success "Security headers –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
    else
        warning "Security headers –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã"
    fi
}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
generate_report() {
    log "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏..."

    local report_file="deployment-test-$(date +%Y%m%d-%H%M%S).md"

    cat > "${report_file}" << EOF
# üìä –û—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è NORMAL DANCE

## –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
- **–î–∞—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è**: $(date)
- **–û–∫—Ä—É–∂–µ–Ω–∏–µ**: ${ENVIRONMENT}
- **–ö–æ–º–º–∏—Ç**: $(git rev-parse --short HEAD)
- **–í–µ—Ç–∫–∞**: $(git branch --show-current)

## –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

### ‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã
$(if curl -f "https://dnb1st-ru.onrender.com/api/health" > /dev/null 2>&1; then
    echo "- ‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ"
else
    echo "- ‚ùå –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
fi)

### üîß –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ —Ç–µ—Å—Ç—ã
$(if kubectl get pods -n "${ENVIRONMENT}" > /dev/null 2>&1; then
    echo "- ‚úÖ Kubernetes pods —Ä–∞–±–æ—Ç–∞—é—Ç"
else
    echo "- ‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å Kubernetes"
fi)

### üåê –°–µ—Ç–µ–≤—ã–µ —Ç–µ—Å—Ç—ã
$(if curl -f "https://api.mainnet-beta.solana.com" > /dev/null 2>&1; then
    echo "- ‚úÖ Solana RPC –¥–æ—Å—Ç—É–ø–µ–Ω"
else
    echo "- ‚ö†Ô∏è Solana RPC –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
fi)

### üíæ –¢–µ—Å—Ç—ã –¥–∞–Ω–Ω—ã—Ö
$(if kubectl exec -n "${ENVIRONMENT}" deployment/normaldance -- pg_isready -U normaldance -d normaldance > /dev/null 2>&1; then
    echo "- ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞"
else
    echo "- ‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"
fi)

## –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

$(if [[ "${ENVIRONMENT}" == "production" ]]; then
    cat << RECOMMENDATIONS_EOF
### –î–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω –æ–∫—Ä—É–∂–µ–Ω–∏—è:
1. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∞–ª–µ—Ä—Ç–∏–Ω–≥
2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
3. –£–±–µ–¥–∏—Ç—å—Å—è –≤ –Ω–∞–ª–∏—á–∏–∏ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
4. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å rate limiting –¥–ª—è API
RECOMMENDATIONS_EOF
else
    cat << RECOMMENDATIONS_EOF
### –î–ª—è staging –æ–∫—Ä—É–∂–µ–Ω–∏—è:
1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
2. –£–±–µ–¥–∏—Ç—å—Å—è –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏
RECOMMENDATIONS_EOF
fi)

## –ó–∞–∫–ª—é—á–µ–Ω–∏–µ

$(if [[ "${ENVIRONMENT}" == "production" ]]; then
    echo "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è."
else
    echo "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."
fi)

---
*–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä–∏–ø—Ç–æ–º test-deployment.sh*
EOF

    success "–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: ${report_file}"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    log "üß™ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"
    log "–û–∫—Ä—É–∂–µ–Ω–∏–µ: ${ENVIRONMENT}"

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    case "${ENVIRONMENT}" in
        "production")
            log "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–¥–∞–∫—à–Ω –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
            test_api_endpoints
            test_performance
            test_security
            ;;
        "staging")
            log "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è staging –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
            test_api_endpoints
            test_performance
            ;;
        "local")
            log "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è..."
            test_database
            test_redis
            test_ipfs
            ;;
        *)
            error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ: ${ENVIRONMENT}"
            ;;
    esac

    # –û–±—â–∏–µ —Ç–µ—Å—Ç—ã
    test_blockchain
    generate_report

    log "üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!"
}

# –ó–∞–ø—É—Å–∫
main "$@"