#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤, –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
 */

const fs = require("fs");
const path = require("path");

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: "\x1b[0m",
  green: "\x1b[32m",
  red: "\x1b[31m",
  yellow: "\x1b[33m",
  blue: "\x1b[34m",
  cyan: "\x1b[36m",
};

function log(message, color = "reset") {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function checkFileExists(filePath) {
  return fs.existsSync(path.join(process.cwd(), filePath));
}

function readJsonFile(filePath) {
  try {
    const fullPath = path.join(process.cwd(), filePath);
    return JSON.parse(fs.readFileSync(fullPath, "utf8"));
  } catch (error) {
    return null;
  }
}

function checkEnvVariables() {
  log("\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...", "cyan");

  const requiredVars = [
    "NEXT_PUBLIC_APP_URL",
    "DATABASE_URL",
    "NEXTAUTH_SECRET",
    "NEXTAUTH_URL",
    "PINATA_JWT",
    "UPSTASH_REDIS_REST_URL",
    "UPSTASH_REDIS_REST_TOKEN",
    "TELEGRAM_BOT_TOKEN",
  ];

  const optionalVars = [
    "SENTRY_DSN",
    "NEXT_PUBLIC_SENTRY_DSN",
    "MIXPANEL_TOKEN",
  ];

  let allPresent = true;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ .env.example
  if (checkFileExists(".env.example")) {
    log("  ‚úÖ .env.example –Ω–∞–π–¥–µ–Ω", "green");
  } else {
    log("  ‚ùå .env.example –Ω–µ –Ω–∞–π–¥–µ–Ω", "red");
    allPresent = false;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ .env.local
  if (checkFileExists(".env.local")) {
    log("  ‚úÖ .env.local –Ω–∞–π–¥–µ–Ω (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)", "green");
  } else {
    log(
      "  ‚ö†Ô∏è  .env.local –Ω–µ –Ω–∞–π–¥–µ–Ω (—Å–æ–∑–¥–∞–π—Ç–µ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)",
      "yellow"
    );
  }

  log("\n  –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è production:", "blue");
  requiredVars.forEach((varName) => {
    log(`    ‚Ä¢ ${varName}`, "cyan");
  });

  log("\n  –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:", "blue");
  optionalVars.forEach((varName) => {
    log(`    ‚Ä¢ ${varName}`, "cyan");
  });

  return allPresent;
}

function checkPackageJson() {
  log("\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ package.json...", "cyan");

  const pkg = readJsonFile("package.json");
  if (!pkg) {
    log("  ‚ùå package.json –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω", "red");
    return false;
  }

  log("  ‚úÖ package.json –Ω–∞–π–¥–µ–Ω", "green");

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤
  const requiredScripts = ["dev", "build", "start"];
  const missingScripts = requiredScripts.filter(
    (script) => !pkg.scripts || !pkg.scripts[script]
  );

  if (missingScripts.length === 0) {
    log("  ‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–∫—Ä–∏–ø—Ç—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç", "green");
  } else {
    log(`  ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–∫—Ä–∏–ø—Ç—ã: ${missingScripts.join(", ")}`, "red");
    return false;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
  const criticalDeps = ["next", "react", "react-dom"];
  const missingDeps = criticalDeps.filter(
    (dep) => !pkg.dependencies || !pkg.dependencies[dep]
  );

  if (missingDeps.length === 0) {
    log("  ‚úÖ –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã", "green");
  } else {
    log(`  ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: ${missingDeps.join(", ")}`, "red");
    return false;
  }

  return true;
}

function checkNextConfig() {
  log("\n‚öôÔ∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Next.js...", "cyan");

  const configFiles = ["next.config.ts", "next.config.js", "next.config.mjs"];
  const foundConfig = configFiles.find((file) => checkFileExists(file));

  if (foundConfig) {
    log(`  ‚úÖ –ù–∞–π–¥–µ–Ω ${foundConfig}`, "green");
    return true;
  } else {
    log("  ‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª Next.js –Ω–µ –Ω–∞–π–¥–µ–Ω", "red");
    return false;
  }
}

function checkVercelConfig() {
  log("\nüî∑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Vercel...", "cyan");

  if (checkFileExists("vercel.json")) {
    log("  ‚úÖ vercel.json –Ω–∞–π–¥–µ–Ω", "green");

    const config = readJsonFile("vercel.json");
    if (config) {
      if (config.buildCommand) {
        log(`  ‚úÖ Build command: ${config.buildCommand}`, "green");
      }
      if (config.framework) {
        log(`  ‚úÖ Framework: ${config.framework}`, "green");
      }
    }
    return true;
  } else {
    log(
      "  ‚ö†Ô∏è  vercel.json –Ω–µ –Ω–∞–π–¥–µ–Ω (–±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)",
      "yellow"
    );
    return true;
  }
}

function checkGitIgnore() {
  log("\nüìù –ü—Ä–æ–≤–µ—Ä–∫–∞ .gitignore...", "cyan");

  if (checkFileExists(".gitignore")) {
    log("  ‚úÖ .gitignore –Ω–∞–π–¥–µ–Ω", "green");

    const gitignore = fs.readFileSync(
      path.join(process.cwd(), ".gitignore"),
      "utf8"
    );
    const criticalEntries = [".env.local", ".env*.local", "node_modules"];
    const missingEntries = criticalEntries.filter(
      (entry) => !gitignore.includes(entry)
    );

    if (missingEntries.length === 0) {
      log("  ‚úÖ –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–ø–∏—Å–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç", "green");
    } else {
      log(
        `  ‚ö†Ô∏è  –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å: ${missingEntries.join(", ")}`,
        "yellow"
      );
    }
    return true;
  } else {
    log("  ‚ùå .gitignore –Ω–µ –Ω–∞–π–¥–µ–Ω", "red");
    return false;
  }
}

function checkPrismaSetup() {
  log("\nüóÑÔ∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Prisma...", "cyan");

  if (checkFileExists("prisma/schema.prisma")) {
    log("  ‚úÖ prisma/schema.prisma –Ω–∞–π–¥–µ–Ω", "green");
    return true;
  } else {
    log("  ‚ö†Ô∏è  prisma/schema.prisma –Ω–µ –Ω–∞–π–¥–µ–Ω (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ë–î)", "yellow");
    return true;
  }
}

function checkPublicFolder() {
  log("\nüåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É–±–ª–∏—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...", "cyan");

  if (checkFileExists("public")) {
    log("  ‚úÖ –ü–∞–ø–∫–∞ public –Ω–∞–π–¥–µ–Ω–∞", "green");

    const importantFiles = ["favicon.ico", "robots.txt"];
    importantFiles.forEach((file) => {
      if (checkFileExists(`public/${file}`)) {
        log(`  ‚úÖ public/${file} –Ω–∞–π–¥–µ–Ω`, "green");
      } else {
        log(
          `  ‚ö†Ô∏è  public/${file} –Ω–µ –Ω–∞–π–¥–µ–Ω (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å)`,
          "yellow"
        );
      }
    });
    return true;
  } else {
    log("  ‚ùå –ü–∞–ø–∫–∞ public –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", "red");
    return false;
  }
}

function checkSrcStructure() {
  log("\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã src...", "cyan");

  if (checkFileExists("src")) {
    log("  ‚úÖ –ü–∞–ø–∫–∞ src –Ω–∞–π–¥–µ–Ω–∞", "green");

    const importantDirs = ["app", "components", "lib"];
    importantDirs.forEach((dir) => {
      if (checkFileExists(`src/${dir}`)) {
        log(`  ‚úÖ src/${dir} –Ω–∞–π–¥–µ–Ω–∞`, "green");
      } else {
        log(`  ‚ö†Ô∏è  src/${dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`, "yellow");
      }
    });
    return true;
  } else {
    log(
      "  ‚ö†Ô∏è  –ü–∞–ø–∫–∞ src –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (–≤–æ–∑–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–µ–∑ src)",
      "yellow"
    );
    return true;
  }
}

function checkDocumentation() {
  log("\nüìö –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏...", "cyan");

  const docs = ["README.md", "DEPLOYMENT_STEP_BY_STEP_COMPLETE.md"];
  let allPresent = true;

  docs.forEach((doc) => {
    if (checkFileExists(doc)) {
      log(`  ‚úÖ ${doc} –Ω–∞–π–¥–µ–Ω`, "green");
    } else {
      log(`  ‚ö†Ô∏è  ${doc} –Ω–µ –Ω–∞–π–¥–µ–Ω`, "yellow");
      allPresent = false;
    }
  });

  return allPresent;
}

function generateReport(results) {
  log("\n" + "=".repeat(60), "blue");
  log("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢", "blue");
  log("=".repeat(60), "blue");

  const passed = results.filter((r) => r.passed).length;
  const total = results.length;
  const percentage = Math.round((passed / total) * 100);

  log(`\n–ü—Ä–æ–π–¥–µ–Ω–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: ${passed}/${total} (${percentage}%)`, "cyan");

  if (percentage === 100) {
    log("\n‚úÖ –ü—Ä–æ–µ–∫—Ç –ü–û–õ–ù–û–°–¢–¨–Æ –ì–û–¢–û–í –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é!", "green");
    log("\n–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:", "cyan");
    log("  1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ Vercel (https://vercel.com)", "blue");
    log(
      "  2. –ü–æ–ª—É—á–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ API –∫–ª—é—á–∏ (Pinata, Upstash, Telegram)",
      "blue"
    );
    log(
      "  3. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –≤ DEPLOYMENT_STEP_BY_STEP_COMPLETE.md",
      "blue"
    );
  } else if (percentage >= 80) {
    log("\n‚ö†Ô∏è  –ü—Ä–æ–µ–∫—Ç –ü–û–ß–¢–ò –ì–û–¢–û–í –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é", "yellow");
    log(
      "\n–ò—Å–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –≤—ã—à–µ –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞",
      "yellow"
    );
  } else {
    log("\n‚ùå –ü—Ä–æ–µ–∫—Ç –ù–ï –ì–û–¢–û–í –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é", "red");
    log("\n–ò—Å–ø—Ä–∞–≤—å—Ç–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ –ø–µ—Ä–µ–¥ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ–º", "red");
  }

  log("\n" + "=".repeat(60) + "\n", "blue");
}

function main() {
  log("\nüöÄ –ü–†–û–í–ï–†–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò –ö –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–Æ NORMALDANCE", "cyan");
  log("=".repeat(60) + "\n", "cyan");

  const results = [
    { name: "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è", passed: checkEnvVariables() },
    { name: "package.json", passed: checkPackageJson() },
    { name: "Next.js –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", passed: checkNextConfig() },
    { name: "Vercel –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", passed: checkVercelConfig() },
    { name: ".gitignore", passed: checkGitIgnore() },
    { name: "Prisma –Ω–∞—Å—Ç—Ä–æ–π–∫–∞", passed: checkPrismaSetup() },
    { name: "–ü—É–±–ª–∏—á–Ω—ã–µ —Ñ–∞–π–ª—ã", passed: checkPublicFolder() },
    { name: "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ src", passed: checkSrcStructure() },
    { name: "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è", passed: checkDocumentation() },
  ];

  generateReport(results);

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
  const allPassed = results.every((r) => r.passed);
  process.exit(allPassed ? 0 : 1);
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
main();
