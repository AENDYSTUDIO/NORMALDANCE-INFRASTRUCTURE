#!/usr/bin/env node

import fs from 'fs';
import path from 'path';
import { execSync  } from 'child_process';

class CompatibilityManager {
  constructor() {
    this.packageJsonPath = path.join(__dirname, '..', 'package.json');
    this.changelogPath = path.join(__dirname, '..', 'CHANGELOG.md');
    this.currentVersion = this.getCurrentVersion();
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏
  getCurrentVersion() {
    try {
      const packageJson = JSON.parse(fs.readFileSync(this.packageJsonPath, 'utf8'));
      return packageJson.version;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è package.json:', error.message);
      process.exit(1);
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  checkBackwardCompatibility() {
    console.log(`\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –¥–ª—è –≤–µ—Ä—Å–∏–∏ ${this.currentVersion}`);
    
    const checks = {
      api: this.checkAPICompatibility(),
      database: this.checkDatabaseCompatibility(),
      config: this.checkConfigCompatibility(),
      dependencies: this.checkDependenciesCompatibility(),
      breaking: this.checkBreakingChanges()
    };

    const issues = [];
    
    Object.entries(checks).forEach(([category, result]) => {
      if (!result.compatible) {
        issues.push({
          category,
          severity: result.severity,
          issues: result.issues
        });
      }
    });

    if (issues.length === 0) {
      console.log('‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω—ã');
      return { compatible: true, issues: [] };
    } else {
      console.log('‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏:');
      issues.forEach(issue => {
        console.log(`\nüìã ${issue.category.toUpperCase()} (${issue.severity}):`);
        issue.issues.forEach(i => console.log(`  - ${i}`));
      });
      return { compatible: false, issues };
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ API —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  checkAPICompatibility() {
    const issues = [];
    const severity = 'high';
    
    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞—Ö
      const apiDir = path.join(__dirname, '..', 'src', 'app', 'api');
      if (fs.existsSync(apiDir)) {
        const apiFiles = fs.readdirSync(apiDir, { recursive: true });
        
        apiFiles.forEach(file => {
          if (file.endsWith('.ts') || file.endsWith('.tsx')) {
            const filePath = path.join(apiDir, file);
            const content = fs.readFileSync(filePath, 'utf8');
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
            if (content.includes('DEPRECATED') || content.includes('REMOVED')) {
              issues.push(`–£–¥–∞–ª–µ–Ω –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª —ç–Ω–¥–ø–æ–∏–Ω—Ç: ${file}`);
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–∏–≥–Ω–∞—Ç—É—Ä–∞—Ö
            if (content.includes('export async function') && content.includes(': Response')) {
              // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
            }
          }
        });
      }
    } catch (error) {
      issues.push(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ API: ${error.message}`);
    }

    return {
      compatible: issues.length === 0,
      severity,
      issues
    };
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  checkDatabaseCompatibility() {
    const issues = [];
    const severity = 'critical';
    
    try {
      const prismaSchemaPath = path.join(__dirname, '..', 'prisma', 'schema.prisma');
      if (fs.existsSync(prismaSchemaPath)) {
        const schema = fs.readFileSync(prismaSchemaPath, 'utf8');
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏
        if (schema.includes('model') && schema.includes('DEPRECATED')) {
          issues.push('–£–¥–∞–ª–µ–Ω–∞ –º–æ–¥–µ–ª—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π
        if (schema.includes('updatedAt DateTime @updatedAt')) {
          // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        }
      }
    } catch (error) {
      issues.push(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ${error.message}`);
    }

    return {
      compatible: issues.length === 0,
      severity,
      issues
    };
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  checkConfigCompatibility() {
    const issues = [];
    const severity = 'medium';
    
    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ environment –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
      const envFiles = ['.env.example', '.env.local', '.env.production', '.env.staging'];
      
      envFiles.forEach(envFile => {
        const envPath = path.join(__dirname, '..', envFile);
        if (fs.existsSync(envPath)) {
          const envContent = fs.readFileSync(envPath, 'utf8');
          
          // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
          if (envContent.includes('DEPRECATED')) {
            issues.push(`–£–¥–∞–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –≤ ${envFile}`);
          }
        }
      });
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ vercel.json
      const vercelConfigPath = path.join(__dirname, '..', 'vercel.json');
      if (fs.existsSync(vercelConfigPath)) {
        const vercelConfig = JSON.parse(fs.readFileSync(vercelConfigPath, 'utf8'));
        
        if (vercelConfig.env && Object.keys(vercelConfig.env).length > 0) {
          // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        }
      }
    } catch (error) {
      issues.push(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ${error.message}`);
    }

    return {
      compatible: issues.length === 0,
      severity,
      issues
    };
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  checkDependenciesCompatibility() {
    const issues = [];
    const severity = 'medium';
    
    try {
      const packageJson = JSON.parse(fs.readFileSync(this.packageJsonPath, 'utf8'));
      const dependencies = { ...packageJson.dependencies, ...packageJson.devDependencies };
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ major –≤–µ—Ä—Å–∏–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
      Object.entries(dependencies).forEach(([pkg, version]) => {
        if (version.startsWith('^') || version.startsWith('~')) {
          const majorVersion = version.split('.')[0].replace('^', '').replace('~', '');
          if (parseInt(majorVersion) > 1) {
            issues.push(`–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å ${pkg} –∏–º–µ–µ—Ç major –≤–µ—Ä—Å–∏—é ${majorVersion}`);
          }
        }
      });
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
      const conflicts = this.findDependencyConflicts(dependencies);
      if (conflicts.length > 0) {
        issues.push(...conflicts);
      }
    } catch (error) {
      issues.push(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: ${error.message}`);
    }

    return {
      compatible: issues.length === 0,
      severity,
      issues
    };
  }

  // –ü–æ–∏—Å–∫ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
  findDependencyConflicts(dependencies) {
    const conflicts = [];
    
    // –õ–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    // –ù–∞–ø—Ä–∏–º–µ—Ä, —Ä–∞–∑–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ –æ–¥–Ω–æ–π –∏ —Ç–æ–π –∂–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
    
    return conflicts;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ breaking changes
  checkBreakingChanges() {
    const issues = [];
    const severity = 'critical';
    
    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ changelog –Ω–∞ breaking changes
      if (fs.existsSync(this.changelogPath)) {
        const changelog = fs.readFileSync(this.changelogPath, 'utf8');
        
        if (changelog.includes('BREAKING CHANGE') || changelog.includes('–ù–ï–û–ë–†–ê–¢–ò–ú–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï')) {
          issues.push('–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã breaking changes –≤ changelog');
        }
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ git –∏—Å—Ç–æ—Ä–∏–∏
      try {
        const gitLog = execSync('git log --oneline -10', { encoding: 'utf8' });
        const commits = gitLog.split('\n');
        
        commits.forEach(commit => {
          if (commit.toLowerCase().includes('breaking') || 
              commit.toLowerCase().includes('major') ||
              commit.toLowerCase().includes('incompatible')) {
            issues.push(`Breaking change –≤ –∫–æ–º–º–∏—Ç–µ: ${commit}`);
          }
        });
      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ git
      }
    } catch (error) {
      issues.push(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ breaking changes: ${error.message}`);
    }

    return {
      compatible: issues.length === 0,
      severity,
      issues
    };
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  generateCompatibilityReport() {
    console.log(`\nüìä –û—Ç—á–µ—Ç –æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –≤–µ—Ä—Å–∏–∏ ${this.currentVersion}`);
    console.log('='.repeat(50));
    
    const compatibility = this.checkBackwardCompatibility();
    
    if (compatibility.compatible) {
      console.log('\n‚úÖ –í–µ—Ä—Å–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º–∞ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ —Ä–µ–ª–∏–∑–∞–º–∏');
    } else {
      console.log('\n‚ùå –í–µ—Ä—Å–∏—è –ù–ï —Å–æ–≤–º–µ—Å—Ç–∏–º–∞ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ —Ä–µ–ª–∏–∑–∞–º–∏');
      console.log('\nüîß –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:');
      
      compatibility.issues.forEach(issue => {
        console.log(`\n${issue.severity.toUpperCase()}: ${issue.category}`);
        issue.issues.forEach(i => console.log(`  - ${i}`));
        
        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        this.generateRecommendations(issue);
      });
    }
    
    return compatibility;
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
  generateRecommendations(issue) {
    const recommendations = {
      api: [
        '–°–æ–∑–¥–∞–π—Ç–µ backward-compatible API wrapper',
        '–î–æ–±–∞–≤—å—Ç–µ deprecated –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –¥–ª—è —Å—Ç–∞—Ä—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤',
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ versioning –≤ API –ø—É—Ç—è—Ö'
      ],
      database: [
        '–°–æ–∑–¥–∞–π—Ç–µ –º–∏–≥—Ä–∞—Ü–∏—é —Å backward compatibility',
        '–î–æ–±–∞–≤—å—Ç–µ soft delete –≤–º–µ—Å—Ç–æ —É–¥–∞–ª–µ–Ω–∏—è',
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ nullable –ø–æ–ª—è –¥–ª—è –Ω–æ–≤—ã—Ö –æ–ø—Ü–∏–π'
      ],
      config: [
        '–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Å—Ç–∞—Ä—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å deprecated –ø–æ–º–µ—Ç–∫–æ–π',
        '–°–æ–∑–¥–∞–π—Ç–µ migration script –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏',
        '–î–æ–±–∞–≤—å—Ç–µ backward compatibility layer'
      ],
      dependencies: [
        '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å',
        '–û–±–Ω–æ–≤–∏—Ç–µ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–æ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö –≤–µ—Ä—Å–∏–π',
        '–î–æ–±–∞–≤—å—Ç–µ peer dependencies –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ'
      ],
      breaking: [
        '–°–æ–∑–¥–∞–π—Ç–µ migration guide',
        '–û–±–Ω–æ–≤–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é',
        '–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ upgrade assistant'
      ]
    };

    if (recommendations[issue.category]) {
      console.log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
      recommendations[issue.category].forEach(rec => {
        console.log(`  ‚Ä¢ ${rec}`);
      });
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ migration guide
  createMigrationGuide() {
    const version = this.currentVersion;
    const guidePath = path.join(__dirname, '..', 'docs', `migration-guide-v${version}.md`);
    
    const guideContent = `# Migration Guide: v${version}

## Overview

This guide provides instructions for migrating from previous versions to NormalDANCE v${version}.

## Breaking Changes

### API Changes

- [List of breaking API changes]

### Database Changes

- [List of breaking database changes]

### Configuration Changes

- [List of breaking configuration changes]

## Migration Steps

### 1. Backup

\`\`\`bash
# Create backup
npm run backup:create
\`\`\`

### 2. Update Dependencies

\`\`\`bash
npm install
\`\`\`

### 3. Run Migrations

\`\`\`bash
npm run db:migrate
\`\`\`

### 4. Update Configuration

- Update environment variables
- Update configuration files

### 5. Deploy

\`\`\`bash
npm run deploy:staging
npm run test:smoke
npm run deploy:production
\`\`\`

## Rollback Plan

If issues occur during migration:

1. Restore from backup
2. Rollback database migrations
3. Revert code changes

## Support

If you encounter issues during migration:

- Check the [FAQ](../faq.md)
- Contact support: support@normaldance.com
- Join our Discord: https://discord.gg/normaldance

---

**Version:** ${version}
**Date:** ${new Date().toISOString().split('T')[0]}
**Last Updated:** ${new Date().toISOString()}
`;

    try {
      fs.writeFileSync(guidePath, guideContent);
      console.log(`\nüìù Migration guide —Å–æ–∑–¥–∞–Ω: ${guidePath}`);
      return true;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è migration guide:', error.message);
      return false;
    }
  }

  // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  async validateRelease() {
    console.log(`\nüöÄ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–ª–∏–∑–∞ –≤–µ—Ä—Å–∏–∏ ${this.currentVersion}`);
    
    const compatibility = this.generateCompatibilityReport();
    
    if (!compatibility.compatible) {
      console.log('\n‚ùå –†–µ–ª–∏–∑ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–ø—É—â–µ–Ω –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏');
      process.exit(1);
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ migration guide
    const guideCreated = this.createMigrationGuide();
    
    if (guideCreated) {
      console.log('\n‚úÖ –†–µ–ª–∏–∑ –≥–æ—Ç–æ–≤ –∫ –≤—ã–ø—É—Å–∫—É');
      console.log('üìã Migration guide —Å–æ–∑–¥–∞–Ω');
      console.log('üîß –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã');
    }
    
    return compatibility;
  }
}

// CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
if (require.main === module) {
  const args = process.argv.slice(2);
  const command = args[0];
  const compatibilityManager = new CompatibilityManager();

  switch (command) {
    case 'check':
      compatibilityManager.checkBackwardCompatibility();
      break;
      
    case 'report':
      compatibilityManager.generateCompatibilityReport();
      break;
      
    case 'validate':
      compatibilityManager.validateRelease();
      break;
      
    case 'guide':
      compatibilityManager.createMigrationGuide();
      break;
      
    default:
      console.log(`
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  node scripts/compatibility-manager.js [–∫–æ–º–∞–Ω–¥–∞]

–ö–æ–º–∞–Ω–¥—ã:
  check          - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
  report         - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  validate       - –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–ª–∏–∑ (–ø—Ä–æ–≤–µ—Ä–∫–∞ + —Å–æ–∑–¥–∞–Ω–∏–µ guide)
  guide          - –°–æ–∑–¥–∞—Ç—å migration guide

–ü—Ä–∏–º–µ—Ä—ã:
  node scripts/compatibility-manager.js check
  node scripts/compatibility-manager.js validate
      `);
      process.exit(1);
  }
}

module.exports = CompatibilityManager;