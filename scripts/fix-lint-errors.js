#!/usr/bin/env node

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –ª–∏–Ω—Ç–µ—Ä–∞...');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è require() –Ω–∞ import
function fixRequireImports(filePath) {
  if (!fs.existsSync(filePath)) return;
  
  let content = fs.readFileSync(filePath, 'utf8');
  let modified = false;

  // –ó–∞–º–µ–Ω–∞ require() –Ω–∞ import –¥–ª—è CommonJS –º–æ–¥—É–ª–µ–π
  const requireRegex = /const\s+(\w+)\s*=\s*require\(['"]([^'"]+)['"]\)/g;
  content = content.replace(requireRegex, (match, varName, moduleName) => {
    modified = true;
    return `import ${varName} from '${moduleName}';`;
  });

  // –ó–∞–º–µ–Ω–∞ –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏–∏ require
  const destructureRegex = /const\s*\{\s*([^}]+)\s*\}\s*=\s*require\(['"]([^'"]+)['"]\)/g;
  content = content.replace(destructureRegex, (match, destructured, moduleName) => {
    modified = true;
    return `import { ${destructured} } from '${moduleName}';`;
  });

  if (modified) {
    fs.writeFileSync(filePath, content);
    console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω: ${filePath}`);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∏–ø–æ–≤ {} –Ω–∞ object
function fixEmptyObjectTypes(filePath) {
  if (!fs.existsSync(filePath) || !filePath.endsWith('.ts') && !filePath.endsWith('.tsx')) return;
  
  let content = fs.readFileSync(filePath, 'utf8');
  let modified = false;

  // –ó–∞–º–µ–Ω–∞ {} –Ω–∞ Record<string, unknown>
  const emptyObjectRegex = /:\s*\{\}/g;
  content = content.replace(emptyObjectRegex, ': Record<string, unknown>');
  
  // –ó–∞–º–µ–Ω–∞ Function –Ω–∞ (...args: unknown[]) => unknown
  const functionTypeRegex = /:\s*Function/g;
  content = content.replace(functionTypeRegex, ': (...args: unknown[]) => unknown');

  if (content !== fs.readFileSync(filePath, 'utf8')) {
    modified = true;
    fs.writeFileSync(filePath, content);
    console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã —Ç–∏–ø—ã: ${filePath}`);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è hasOwnProperty
function fixHasOwnProperty(filePath) {
  if (!fs.existsSync(filePath)) return;
  
  let content = fs.readFileSync(filePath, 'utf8');
  let modified = false;

  // –ó–∞–º–µ–Ω–∞ obj.hasOwnProperty –Ω–∞ Object.prototype.hasOwnProperty.call(obj, prop)
  const hasOwnPropRegex = /(\w+)\.hasOwnProperty\(([^)]+)\)/g;
  content = content.replace(hasOwnPropRegex, (match, obj, prop) => {
    modified = true;
    return `Object.prototype.hasOwnProperty.call(${obj}, ${prop})`;
  });

  if (modified) {
    fs.writeFileSync(filePath, content);
    console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω hasOwnProperty: ${filePath}`);
  }
}

// –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –æ–±—Ö–æ–¥ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
function walkDir(dir, callback) {
  const files = fs.readdirSync(dir);
  
  for (const file of files) {
    const filePath = path.join(dir, file);
    const stat = fs.statSync(filePath);
    
    if (stat.isDirectory()) {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
      if (['node_modules', '.next', '.git', 'coverage'].includes(file)) {
        continue;
      }
      walkDir(filePath, callback);
    } else if (stat.isFile()) {
      callback(filePath);
    }
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
  const projectRoot = path.resolve(__dirname, '..');
  
  console.log(`üìÅ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: ${projectRoot}`);
  
  let fileCount = 0;
  
  walkDir(projectRoot, (filePath) => {
    const ext = path.extname(filePath);
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ —Ñ–∞–π–ª—ã
    if (['.js', '.ts', '.tsx', '.jsx'].includes(ext)) {
      fileCount++;
      
      // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º require imports —Ç–æ–ª—å–∫–æ –≤ .js —Ñ–∞–π–ª–∞—Ö
      if (ext === '.js') {
        fixRequireImports(filePath);
        fixHasOwnProperty(filePath);
      }
      
      // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–∏–ø—ã –≤ TypeScript —Ñ–∞–π–ª–∞—Ö
      if (['.ts', '.tsx'].includes(ext)) {
        fixEmptyObjectTypes(filePath);
      }
    }
  });
  
  console.log(`\nüéâ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${fileCount}`);
  console.log('‚ú® –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
  console.log('\nüìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
  console.log('1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm run lint');
  console.log('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ: npm run type-check');
  console.log('3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç—ã: npm test');
}

main();