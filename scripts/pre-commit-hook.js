#!/usr/bin/env node

/**
 * Pre-commit —Ö—É–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ–∫—Ä–µ—Ç–æ–≤ –∏ –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–±–ª–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –∫–æ–º–º–∏—Ç–æ–º
 */

import { execSync } from "child_process";
import fs from "fs";
import path from "path";
import SecurityScanner from "./security-scan.js";

class PreCommitHook {
  constructor() {
    this.errors = [];
    this.warnings = [];
  }

  async run() {
    console.log("üîç Pre-commit –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...\n");

    try {
      // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
      await this.checkStagedFiles();

      // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–µ–∫—Ä–µ—Ç—ã
      await this.checkForSecrets();

      // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º .env —Ñ–∞–π–ª—ã
      this.checkEnvFiles();

      // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º merge –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã
      this.checkMergeConflicts();

      // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–æ–≤
      this.checkFileSize();

      // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
      this.checkFilePermissions();

      // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      this.printResults();

      // –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏, –±–ª–æ–∫–∏—Ä—É–µ–º –∫–æ–º–º–∏—Ç
      if (this.errors.length > 0) {
        console.log("\n‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏. –ö–æ–º–º–∏—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.");
        process.exit(1);
      }

      if (this.warnings.length > 0) {
        console.log(
          "\n‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø–µ—Ä–µ–¥ –∫–æ–º–º–∏—Ç–æ–º."
        );
      }

      console.log("\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞. –ú–æ–∂–Ω–æ –∫–æ–º–º–∏—Ç–∏—Ç—å.");
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ pre-commit —Ö—É–∫–∞:", error.message);
      process.exit(1);
    }
  }

  async checkStagedFiles() {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
      const stagedFiles = execSync("git diff --cached --name-only", {
        encoding: "utf8",
      })
        .trim()
        .split("\n")
        .filter((file) => file.length > 0);

      if (stagedFiles.length === 0) {
        console.log("üìù –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.");
        return;
      }

      console.log(`üìÅ –ü—Ä–æ–≤–µ—Ä—è–µ–º ${stagedFiles.length} –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...`);

      // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
      const tempDir = fs.mkdtempSync("pre-commit-");

      try {
        // –ö–æ–ø–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        for (const file of stagedFiles) {
          try {
            const content = execSync(`git show :${file}`, { encoding: "utf8" });
            const filePath = path.join(tempDir, file);

            // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            fs.mkdirSync(path.dirname(filePath), { recursive: true });
            fs.writeFileSync(filePath, content);
          } catch (error) {
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª—ã –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏
            console.warn(`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–π–ª: ${file}`);
          }
        }

        // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–µ—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        const scanner = new SecurityScanner({
          directory: tempDir,
          verbose: false,
          exitOnError: false,
        });

        await scanner.scan();

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        this.errors.push(
          ...scanner.issues.filter(
            (issue) =>
              issue.severity === "critical" || issue.severity === "high"
          )
        );

        this.warnings.push(
          ...scanner.issues.filter(
            (issue) => issue.severity === "medium" || issue.severity === "low"
          )
        );
      } finally {
        // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        fs.rmSync(tempDir, { recursive: true, force: true });
      }
    } catch (error) {
      this.errors.push({
        type: "Git Error",
        message: `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: ${error.message}`,
        severity: "high",
      });
    }
  }

  async checkForSecrets() {
    console.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–µ–∫—Ä–µ—Ç—ã –≤ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö...");

    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
      const stagedFiles = execSync("git diff --cached --name-only", {
        encoding: "utf8",
      })
        .trim()
        .split("\n")
        .filter((file) => file.length > 0);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–µ–∫—Ä–µ—Ç–æ–≤
      for (const file of stagedFiles) {
        try {
          const content = execSync(`git show :${file}`, { encoding: "utf8" });

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–ª—é—á–∏
          if (
            content.includes("-----BEGIN") &&
            content.includes("PRIVATE KEY-----")
          ) {
            this.errors.push({
              type: "Private Key",
              file,
              message: "–û–±–Ω–∞—Ä—É–∂–µ–Ω –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –≤ —Ñ–∞–π–ª–µ",
              severity: "critical",
            });
          }

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ API –∫–ª—é—á–∏
          const apiKeyPatterns = [
            /api[_-]?key['"\s]*[:=]['"\s]*[a-zA-Z0-9_-]{10,}/gi,
            /secret[_-]?key['"\s]*[:=]['"\s]*[a-zA-Z0-9_-]{10,}/gi,
            /password['"\s]*[:=]['"\s]*[a-zA-Z0-9_-]{6,}/gi,
          ];

          for (const pattern of apiKeyPatterns) {
            if (pattern.test(content)) {
              this.errors.push({
                type: "API Key",
                file,
                message: "–û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π API –∫–ª—é—á –∏–ª–∏ –ø–∞—Ä–æ–ª—å",
                severity: "high",
              });
              break;
            }
          }

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ JWT —Ç–æ–∫–µ–Ω—ã
          if (
            /eyJ[a-zA-Z0-9_-]*\.eyJ[a-zA-Z0-9_-]*\.[a-zA-Z0-9_-]*/.test(content)
          ) {
            this.warnings.push({
              type: "JWT Token",
              file,
              message: "–û–±–Ω–∞—Ä—É–∂–µ–Ω JWT —Ç–æ–∫–µ–Ω",
              severity: "medium",
            });
          }
        } catch (error) {
          // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–∏–Ω–∞—Ä–Ω—ã–µ —Ñ–∞–π–ª—ã
        }
      }
    } catch (error) {
      this.warnings.push({
        type: "Secret Check",
        message: `–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–∫—Ä–µ—Ç—ã: ${error.message}`,
        severity: "low",
      });
    }
  }

  checkEnvFiles() {
    console.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–æ–≤...");

    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
      const stagedFiles = execSync("git diff --cached --name-only", {
        encoding: "utf8",
      })
        .trim()
        .split("\n")
        .filter((file) => file.length > 0);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ .env —Ñ–∞–π–ª—ã
      const envFiles = stagedFiles.filter(
        (file) => file.startsWith(".env") || file.includes(".env.")
      );

      for (const file of envFiles) {
        this.errors.push({
          type: "Environment File",
          file,
          message: ".env —Ñ–∞–π–ª—ã –Ω–µ –¥–æ–ª–∂–Ω—ã –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π",
          severity: "critical",
        });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º .gitignore –Ω–∞ –Ω–∞–ª–∏—á–∏–µ .env
      try {
        const gitignore = fs.readFileSync(".gitignore", "utf8");
        if (!gitignore.includes(".env")) {
          this.warnings.push({
            type: "Gitignore",
            message: ".gitignore –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç .env —Ñ–∞–π–ª—ã",
            severity: "medium",
          });
        }
      } catch (error) {
        this.warnings.push({
          type: "Gitignore",
          message: ".gitignore —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω",
          severity: "medium",
        });
      }
    } catch (error) {
      this.warnings.push({
        type: "Environment Check",
        message: `–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å .env —Ñ–∞–π–ª—ã: ${error.message}`,
        severity: "low",
      });
    }
  }

  checkMergeConflicts() {
    console.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ merge –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤...");

    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
      const stagedFiles = execSync("git diff --cached --name-only", {
        encoding: "utf8",
      })
        .trim()
        .split("\n")
        .filter((file) => file.length > 0);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –º–∞—Ä–∫–µ—Ä—ã merge –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
      for (const file of stagedFiles) {
        try {
          const content = execSync(`git show :${file}`, { encoding: "utf8" });

          if (
            content.includes("<<<<<<<") ||
            content.includes(">>>>>>>") ||
            content.includes("=======")
          ) {
            this.errors.push({
              type: "Merge Conflict",
              file,
              message: "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ—Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ merge –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã",
              severity: "high",
            });
          }
        } catch (error) {
          // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–∏–Ω–∞—Ä–Ω—ã–µ —Ñ–∞–π–ª—ã
        }
      }
    } catch (error) {
      this.warnings.push({
        type: "Merge Conflict Check",
        message: `–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å merge –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã: ${error.message}`,
        severity: "low",
      });
    }
  }

  checkFileSize() {
    console.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–æ–≤...");

    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
      const stagedFiles = execSync("git diff --cached --name-only", {
        encoding: "utf8",
      })
        .trim()
        .split("\n")
        .filter((file) => file.length > 0);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–æ–≤
      for (const file of stagedFiles) {
        try {
          const stats = execSync(`git ls-files -s ${file}`, {
            encoding: "utf8",
          });
          const size = parseInt(stats.split(" ")[1], 16) * 1024; // –†–∞–∑–º–µ—Ä –≤ –±–∞–π—Ç–∞—Ö
          const sizeMB = size / (1024 * 1024);

          if (sizeMB > 10) {
            this.warnings.push({
              type: "File Size",
              file,
              message: `–ë–æ–ª—å—à–æ–π —Ñ–∞–π–ª: ${sizeMB.toFixed(
                2
              )}MB (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è < 10MB)`,
              severity: "medium",
            });
          }

          if (sizeMB > 50) {
            this.errors.push({
              type: "File Size",
              file,
              message: `–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª: ${sizeMB.toFixed(
                2
              )}MB (–º–∞–∫—Å–∏–º—É–º 50MB)`,
              severity: "high",
            });
          }
        } catch (error) {
          // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª—ã –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å
        }
      }
    } catch (error) {
      this.warnings.push({
        type: "File Size Check",
        message: `–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–æ–≤: ${error.message}`,
        severity: "low",
      });
    }
  }

  checkFilePermissions() {
    console.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞...");

    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
      const stagedFiles = execSync("git diff --cached --name-only", {
        encoding: "utf8",
      })
        .trim()
        .split("\n")
        .filter((file) => file.length > 0);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º —Ñ–∞–π–ª–∞–º
      for (const file of stagedFiles) {
        try {
          const stats = execSync(`git ls-files -s ${file}`, {
            encoding: "utf8",
          });
          const mode = parseInt(stats.split(" ")[0], 8);

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–µ –ø—Ä–∞–≤–∞ –¥–ª—è –Ω–µ-—Å–∫—Ä–∏–ø—Ç–æ–≤
          if (mode & 0o111 && !this.isScript(file)) {
            this.warnings.push({
              type: "File Permissions",
              file,
              message: "–§–∞–π–ª –∏–º–µ–µ—Ç –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–µ –ø—Ä–∞–≤–∞, –Ω–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–∫—Ä–∏–ø—Ç–æ–º",
              severity: "low",
            });
          }
        } catch (error) {
          // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª—ã –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å
        }
      }
    } catch (error) {
      this.warnings.push({
        type: "File Permissions Check",
        message: `–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞: ${error.message}`,
        severity: "low",
      });
    }
  }

  isScript(file) {
    const scriptExtensions = [
      ".sh",
      ".bash",
      ".zsh",
      ".fish",
      ".ps1",
      ".bat",
      ".cmd",
      ".py",
      ".js",
      ".rb",
      ".php",
      ".pl",
    ];
    const scriptNames = ["Makefile", "Rakefile", "Dockerfile"];

    return (
      scriptExtensions.some((ext) => file.endsWith(ext)) ||
      scriptNames.some((name) => file.includes(name))
    );
  }

  printResults() {
    console.log("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:");
    console.log("=".repeat(50));

    // –í—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫–∏
    if (this.errors.length > 0) {
      console.log("\nüî¥ –û–®–ò–ë–ö–ò:");
      for (const error of this.errors) {
        console.log(`   ‚ùå ${error.type}: ${error.message}`);
        if (error.file) {
          console.log(`      üìÅ –§–∞–π–ª: ${error.file}`);
        }
      }
    }

    // –í—ã–≤–æ–¥–∏–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    if (this.warnings.length > 0) {
      console.log("\nüü° –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:");
      for (const warning of this.warnings) {
        console.log(`   ‚ö†Ô∏è  ${warning.type}: ${warning.message}`);
        if (warning.file) {
          console.log(`      üìÅ –§–∞–π–ª: ${warning.file}`);
        }
      }
    }

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log("\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:");
    console.log(`   üî¥ –û—à–∏–±–æ–∫: ${this.errors.length}`);
    console.log(`   üü° –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: ${this.warnings.length}`);

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if (this.errors.length > 0 || this.warnings.length > 0) {
      console.log("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:");

      if (this.errors.some((e) => e.type === "Private Key")) {
        console.log(
          "   üîê –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Å–µ–∫—Ä–µ—Ç–æ–≤ –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π"
        );
      }

      if (this.errors.some((e) => e.type === "Environment File")) {
        console.log("   üîê –î–æ–±–∞–≤—å—Ç–µ .env —Ñ–∞–π–ª—ã –≤ .gitignore");
        console.log("   üîê –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .env.example –∫–∞–∫ —à–∞–±–ª–æ–Ω");
      }

      if (this.errors.some((e) => e.type === "Merge Conflict")) {
        console.log("   üîÄ –†–∞–∑—Ä–µ—à–∏—Ç–µ –≤—Å–µ merge –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –ø–µ—Ä–µ–¥ –∫–æ–º–º–∏—Ç–æ–º");
      }

      if (this.warnings.some((w) => w.type === "File Size")) {
        console.log("   üì¶ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Git LFS –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤");
      }
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ö—É–∫
if (import.meta.url === `file://${process.argv[1]}`) {
  const hook = new PreCommitHook();
  hook.run();
}

export default PreCommitHook;
