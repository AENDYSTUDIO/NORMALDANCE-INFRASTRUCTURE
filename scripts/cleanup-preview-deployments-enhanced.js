#!/usr/bin/env node

/**
 * –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö preview –¥–µ–ø–ª–æ–µ–≤
 * 
 * –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
 * - –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ JSON —Ñ–∞–π–ª–∞
 * - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
 * - –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–∞–∂–Ω—ã—Ö –¥–µ–ø–ª–æ–µ–≤
 * - –£–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 * - –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
 */

import fs from 'fs';
import path from 'path';

class EnhancedCleanupPreviewDeployments {
  constructor(options = {}) {
    this.config = this.loadConfig();
    this.deployments = options.deployments || [];
    this.dryRun = options.dryRun || this.config.cleanup.dryRun;
    this.maxAgeDays = options.maxAgeDays || this.config.cleanup.defaultMaxAgeDays;
    this.cleanupThreshold = options.cleanupThreshold || this.config.cleanup.cleanupThreshold;
    this.forceCleanup = options.forceCleanup || this.config.cleanup.forceCleanup;
    this.outputJson = options.outputJson || true;
    this.protectedPatterns = this.config.protectedPatterns;
    this.notificationDays = options.notificationDays || this.config.cleanup.notificationDays;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    this.logger = this.initLogger();
    
    // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    this.results = {
      deployments_to_delete: [],
      deployments_to_keep: [],
      protected_deployments: [],
      notifications_needed: [],
      summary: {
        total: 0,
        to_delete: 0,
        to_keep: 0,
        protected: 0,
        notifications: 0
      },
      metadata: {
        timestamp: new Date().toISOString(),
        config: this.config,
        dry_run: this.dryRun,
        max_age_days: this.maxAgeDays,
        cleanup_threshold: this.cleanupThreshold
      }
    };
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞
   */
  loadConfig() {
    const configPath = path.join(__dirname, 'cleanup-config.json');
    
    try {
      if (fs.existsSync(configPath)) {
        const config = JSON.parse(fs.readFileSync(configPath, 'utf8'));
        
        // –ü–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        return this.substituteEnvVars(config);
      } else {
        console.warn('‚ö†Ô∏è  Config file not found, using defaults');
        return this.getDefaultConfig();
      }
    } catch (error) {
      console.error('‚ùå Failed to load config:', error.message);
      return this.getDefaultConfig();
    }
  }

  /**
   * –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
   */
  substituteEnvVars(config) {
    const stringifier = (obj) => {
      if (typeof obj === 'string') {
        return obj.replace(/\${(\w+)}/g, (match, varName) => {
          return process.env[varName] || match;
        });
      }
      
      if (Array.isArray(obj)) {
        return obj.map(stringifier);
      }
      
      if (typeof obj === 'object' && obj !== null) {
        const result = {};
        for (const [key, value] of Object.entries(obj)) {
          result[key] = stringifier(value);
        }
        return result;
      }
      
      return obj;
    };
    
    return stringifier(config);
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
   */
  getDefaultConfig() {
    return {
      cleanup: {
        defaultMaxAgeDays: 7,
        cleanupThreshold: 7,
        notificationDays: 3,
        maxDeployments: 20,
        forceCleanup: false,
        dryRun: false
      },
      protectedPatterns: [
        "important",
        "critical",
        "production",
        "staging",
        "main",
        "develop",
        "release",
        "hotfix",
        "emergency",
        "security",
        "performance"
      ],
      exclusions: {
        activeUsersThreshold: 0,
        requestsThreshold: 100,
        recentActivityDays: 1
      },
      notifications: {
        enabled: true,
        channels: ["slack", "github"],
        slack: {
          webhook: process.env.SLACK_WEBHOOK,
          channel: "#deployments",
          username: "Cleanup Bot"
        },
        github: {
          repository: process.env.GITHUB_REPOSITORY,
          token: process.env.GITHUB_TOKEN
        }
      },
      vercel: {
        orgId: process.env.VERCEL_ORG_ID,
        projectId: process.env.VERCEL_PROJECT_ID,
        token: process.env.VERCEL_TOKEN
      },
      scheduling: {
        cron: "0 3 * * *",
        timezone: "UTC",
        enabled: true
      },
      logging: {
        level: "info",
        file: "/tmp/cleanup.log",
        console: true
      },
      reporting: {
        enabled: true,
        format: "json",
        path: "/tmp/cleanup-report.json",
        retentionDays: 30
      }
    };
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
   */
  initLogger() {
    const logLevel = this.config.logging.level;
    const logToConsole = this.config.logging.console;
    
    return {
      info: (message) => {
        if (logToConsole) console.log(`‚ÑπÔ∏è  ${message}`);
        if (this.config.logging.file) {
          this.ensureDirectoryExists(this.config.logging.file);
          fs.appendFileSync(this.config.logging.file, `[${new Date().toISOString()}] INFO: ${message}\n`);
        }
      },
      warn: (message) => {
        if (logToConsole) console.warn(`‚ö†Ô∏è  ${message}`);
        if (this.config.logging.file) {
          this.ensureDirectoryExists(this.config.logging.file);
          fs.appendFileSync(this.config.logging.file, `[${new Date().toISOString()}] WARN: ${message}\n`);
        }
      },
      error: (message) => {
        if (logToConsole) console.error(`‚ùå ${message}`);
        if (this.config.logging.file) {
          this.ensureDirectoryExists(this.config.logging.file);
          fs.appendFileSync(this.config.logging.file, `[${new Date().toISOString()}] ERROR: ${message}\n`);
        }
      },
      debug: (message) => {
        if (logLevel === 'debug' && logToConsole) console.log(`üîç ${message}`);
        if (logLevel === 'debug' && this.config.logging.file) {
          this.ensureDirectoryExists(this.config.logging.file);
          fs.appendFileSync(this.config.logging.file, `[${new Date().toISOString()}] DEBUG: ${message}\n`);
        }
      }
    };
  }

  /**
   * –£–±–µ–∂–¥–∞–µ—Ç—Å—è, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
   */
  ensureDirectoryExists(filePath) {
    const dir = path.dirname(filePath);
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir, { recursive: true });
    }
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ –æ—á–∏—Å—Ç–∫–∏
   */
  async cleanup() {
    this.logger.info('üßπ Starting enhanced preview deployments cleanup...');
    this.logger.info(`üìã Configuration loaded:`);
    this.logger.info(`  - Dry Run: ${this.dryRun}`);
    this.logger.info(`  - Max Age Days: ${this.maxAgeDays}`);
    this.logger.info(`  - Cleanup Threshold: ${this.cleanupThreshold}`);
    this.logger.info(`  - Force Cleanup: ${this.forceCleanup}`);
    this.logger.info(`  - Total Deployments: ${this.deployments.length}`);

    // –ü–∞—Ä—Å–∏–º JSON –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞
    if (typeof this.deployments === 'string') {
      try {
        this.deployments = JSON.parse(this.deployments);
      } catch (error) {
        this.logger.error(`Failed to parse deployments JSON: ${error.message}`);
        return this.results;
      }
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –¥–µ–ø–ª–æ–π
    this.deployments.forEach((deployment, index) => {
      this.logger.debug(`Analyzing deployment ${index + 1}/${this.deployments.length}: ${deployment.name}`);
      this.analyzeDeployment(deployment);
    });

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –æ—á–∏—Å—Ç–∫–∏
    this.applyCleanupStrategy();

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    this.generateNotifications();

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if (this.config.notifications.enabled) {
      await this.sendNotifications();
    }

    // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    this.printResults();

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    if (this.config.reporting.enabled) {
      this.saveReport();
    }

    return this.results;
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π –¥–µ–ø–ª–æ–π —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
   */
  analyzeDeployment(deployment) {
    this.results.summary.total++;

    const analysis = {
      ...deployment,
      age_days: this.calculateAgeInDays(deployment.createdAt),
      is_protected: this.isProtectedDeployment(deployment),
      should_delete: false,
      reason: '',
      pr_status: this.getPRStatus(deployment),
      is_active: this.isActiveDeployment(deployment),
      importance_score: this.calculateImportanceScore(deployment),
      is_recently_accessed: this.isRecentlyAccessed(deployment),
      has_comments: this.hasRecentComments(deployment),
      belongs_to_important_pr: this.belongsToImportantPR(deployment)
    };

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —É–¥–∞–ª—è—Ç—å –¥–µ–ø–ª–æ–π
    if (this.shouldDeleteDeployment(analysis)) {
      analysis.should_delete = true;
      analysis.reason = this.getDeletionReason(analysis);
      this.results.deployments_to_delete.push(analysis);
      this.results.summary.to_delete++;
    } else {
      this.results.deployments_to_keep.push(analysis);
      this.results.summary.to_keep++;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–µ–ø–ª–æ–π –∑–∞—â–∏—â–µ–Ω–Ω—ã–º
    if (analysis.is_protected) {
      this.results.protected_deployments.push(analysis);
      this.results.summary.protected++;
    }
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤–∞–∂–Ω–æ—Å—Ç—å –¥–µ–ø–ª–æ—è
   */
  calculateImportanceScore(deployment) {
    let score = 0;
    
    // –ë–∞–∑–æ–≤—ã–µ –æ—á–∫–∏
    score += deployment.age_days * -1; // –ß–µ–º —Å—Ç–∞—Ä—à–µ, —Ç–µ–º –º–µ–Ω–µ–µ –≤–∞–∂–µ–Ω
    
    // –û—á–∫–∏ –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    if (deployment.usage?.users > 0) score += 10;
    if (deployment.usage?.requests > 1000) score += 20;
    if (deployment.usage?.bandwidth > 1000) score += 15;
    
    // –û—á–∫–∏ –∑–∞ –≤–∞–∂–Ω–æ—Å—Ç—å PR
    if (deployment.payload?.pr_labels?.includes('critical')) score += 30;
    if (deployment.payload?.pr_labels?.includes('important')) score += 20;
    if (deployment.payload?.pr_labels?.includes('bug')) score += 10;
    
    // –û—á–∫–∏ –∑–∞ –Ω–µ–¥–∞–≤–Ω—é—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    if (this.isRecentlyAccessed(deployment)) score += 25;
    if (this.hasRecentComments(deployment)) score += 15;
    
    return Math.max(0, score);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª –ª–∏ –¥–µ–ø–ª–æ–π –Ω–µ–¥–∞–≤–Ω–æ –∞–∫—Ç–∏–≤–µ–Ω
   */
  isRecentlyAccessed(deployment) {
    if (!deployment.lastAccessed) return false;
    
    const lastAccessed = new Date(deployment.lastAccessed);
    const now = new Date();
    const diffHours = (now - lastAccessed) / (1000 * 60 * 60);
    
    return diffHours < this.config.exclusions.recentActivityDays * 24;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –Ω–µ–¥–∞–≤–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
   */
  hasRecentComments(deployment) {
    if (!deployment.payload?.pr_comments) return false;
    
    const comments = deployment.payload.pr_comments;
    const now = new Date();
    const recentComments = comments.filter(comment => {
      const commentDate = new Date(comment.createdAt);
      const diffHours = (now - commentDate) / (1000 * 60 * 60);
      return diffHours < 24; // –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
    });
    
    return recentComments.length > 0;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ PR –∫ –≤–∞–∂–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
   */
  belongsToImportantPR(deployment) {
    if (!deployment.payload?.pr_labels) return false;
    
    const importantLabels = ['critical', 'important', 'security', 'performance', 'bug'];
    return deployment.payload.pr_labels.some(label => 
      importantLabels.includes(label.toLowerCase())
    );
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ —É–¥–∞–ª—è—Ç—å –¥–µ–ø–ª–æ–π —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
   */
  shouldDeleteDeployment(analysis) {
    // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω force cleanup, —É–¥–∞–ª—è–µ–º –≤—Å–µ –∫—Ä–æ–º–µ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö
    if (this.forceCleanup && !analysis.is_protected) {
      return true;
    }

    // –í—Å–µ–≥–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–µ–ø–ª–æ–∏
    if (analysis.is_active) {
      return false;
    }

    // –í—Å–µ–≥–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ –¥–µ–ø–ª–æ–∏
    if (analysis.is_protected) {
      return false;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ–ø–ª–æ–∏ —Å –≤—ã—Å–æ–∫–æ–π –≤–∞–∂–Ω–æ—Å—Ç—å—é
    if (analysis.importance_score > 50) {
      return false;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ–ø–ª–æ–∏ —Å –Ω–µ–¥–∞–≤–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é
    if (analysis.is_recently_accessed) {
      return false;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ–ø–ª–æ–∏ —Å –Ω–µ–¥–∞–≤–Ω–∏–º–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏
    if (analysis.has_comments) {
      return false;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ–ø–ª–æ–∏ –≤–∞–∂–Ω—ã—Ö PR
    if (analysis.belongs_to_important_pr) {
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç
    if (analysis.age_days > this.maxAgeDays) {
      return true;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥ –æ—á–∏—Å—Ç–∫–∏
    if (analysis.age_days > this.cleanupThreshold) {
      return true;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å PR
    if (analysis.pr_status === 'merged' || analysis.pr_status === 'closed') {
      return true;
    }

    return false;
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–∏—á–∏–Ω—É —É–¥–∞–ª–µ–Ω–∏—è —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
   */
  getDeletionReason(analysis) {
    if (analysis.is_protected) {
      return 'protected';
    }

    if (analysis.importance_score > 50) {
      return 'high_importance';
    }

    if (analysis.is_recently_accessed) {
      return 'recently_accessed';
    }

    if (analysis.has_comments) {
      return 'has_comments';
    }

    if (analysis.belongs_to_important_pr) {
      return 'important_pr';
    }

    if (analysis.age_days > this.maxAgeDays) {
      return `too_old_${analysis.age_days}_days`;
    }

    if (analysis.age_days > this.cleanupThreshold) {
      return `above_threshold_${analysis.age_days}_days`;
    }

    if (analysis.pr_status === 'merged') {
      return 'pr_merged';
    }

    if (analysis.pr_status === 'closed') {
      return 'pr_closed';
    }

    if (analysis.is_active) {
      return 'active';
    }

    return 'unknown';
  }

  /**
   * –ü—Ä–∏–º–µ–Ω—è–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –æ—á–∏—Å—Ç–∫–∏ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
   */
  applyCleanupStrategy() {
    // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω dry run, –Ω–∏—á–µ–≥–æ –Ω–µ —É–¥–∞–ª—è–µ–º
    if (this.dryRun) {
      this.results.deployments_to_delete = [];
      this.results.summary.to_delete = 0;
      this.logger.info('üîç Dry run mode - no actual deletions will be performed');
      return;
    }

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –æ—á–∏—Å—Ç–∫–∏
    this.applyAdditionalRules();
  }

  /**
   * –ü—Ä–∏–º–µ–Ω—è–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –æ—á–∏—Å—Ç–∫–∏
   */
  applyAdditionalRules() {
    // –ü—Ä–∞–≤–∏–ª–æ 1: –û—Å—Ç–∞–≤–ª—è–µ–º —Å–∞–º—ã–µ —Å–≤–µ–∂–∏–µ –¥–µ–ø–ª–æ–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ PR
    const prDeployments = {};
    this.results.deployments_to_delete.forEach(deployment => {
      const prNumber = deployment.payload?.pr_number || deployment.name?.match(/pr-(\d+)/)?.[1];
      if (prNumber) {
        if (!prDeployments[prNumber] || 
            new Date(deployment.createdAt) < new Date(prDeployments[prNumber].createdAt)) {
          prDeployments[prNumber] = deployment;
        }
      }
    });

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–µ–ø–ª–æ–∏ –¥–ª—è —Ç–µ—Ö –∂–µ PR, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–µ —Å–≤–µ–∂–∏–µ
    Object.keys(prDeployments).forEach(prNumber => {
      const latestDeployment = prDeployments[prNumber];
      this.results.deployments_to_delete = this.results.deployments_to_delete.filter(deployment => {
        const deploymentPrNumber = deployment.payload?.pr_number || deployment.name?.match(/pr-(\d+)/)?.[1];
        return deploymentPrNumber !== prNumber || deployment.id === latestDeployment.id;
      });
    });

    // –ü—Ä–∞–≤–∏–ª–æ 2: –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–ø–ª–æ–µ–≤
    this.limitDeployments();

    // –ü—Ä–∞–≤–∏–ª–æ 3: –£–¥–∞–ª—è–µ–º –¥–µ–ø–ª–æ–∏ —Å –Ω–∏–∑–∫–æ–π –≤–∞–∂–Ω–æ—Å—Ç—å—é
    this.removeLowImportanceDeployments();
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç –¥–µ–ø–ª–æ–∏ —Å –Ω–∏–∑–∫–æ–π –≤–∞–∂–Ω–æ—Å—Ç—å—é
   */
  removeLowImportanceDeployments() {
    const lowImportanceThreshold = 10;
    
    this.results.deployments_to_delete = this.results.deployments_to_delete.filter(deployment => {
      if (deployment.importance_score < lowImportanceThreshold) {
        this.logger.debug(`Removing low importance deployment: ${deployment.name} (score: ${deployment.importance_score})`);
        return false;
      }
      return true;
    });
  }

  /**
   * –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–ø–ª–æ–µ–≤
   */
  limitDeployments() {
    const maxDeployments = this.config.cleanup.maxDeployments;
    
    if (this.results.deployments_to_delete.length > maxDeployments) {
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É (—Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ —É–¥–∞–ª—è–µ–º –ø–µ—Ä–≤—ã–º–∏)
      this.results.deployments_to_delete.sort((a, b) => 
        new Date(a.createdAt) - new Date(b.createdAt)
      );
      
      // –£–¥–∞–ª—è–µ–º —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ
      const toRemove = this.results.deployments_to_delete.splice(maxDeployments);
      toRemove.forEach(deployment => {
        this.results.deployments_to_keep.push(deployment);
        this.results.summary.to_keep++;
        this.results.summary.to_delete--;
      });
      
      this.logger.info(`Limited deployments to ${maxDeployments}, removed ${toRemove.length} old deployments`);
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  generateNotifications() {
    this.results.deployments_to_delete.forEach(deployment => {
      if (deployment.age_days <= this.notificationDays) {
        this.results.notifications_needed.push(deployment);
        this.results.summary.notifications++;
      }
    });
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  async sendNotifications() {
    const notifications = this.results.notifications_needed;
    
    if (notifications.length === 0) {
      this.logger.info('üì¢ No notifications needed');
      return;
    }

    this.logger.info(`üì¢ Sending ${notifications.length} notifications...`);

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Slack
    if (this.config.notifications.channels.includes('slack')) {
      await this.sendSlackNotification(notifications);
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ GitHub
    if (this.config.notifications.channels.includes('github')) {
      await this.sendGitHubNotification(notifications);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Slack
   */
  async sendSlackNotification(notifications) {
    if (!this.config.notifications.slack.webhook) {
      this.logger.warn('‚ö†Ô∏è  Slack webhook not configured');
      return;
    }

    const message = {
      text: 'üßπ Preview Deployments Cleanup Notification',
      attachments: [
        {
          color: 'warning',
          title: 'Upcoming Preview Deployments Cleanup',
          text: `The following ${notifications.length} preview deployments will be cleaned up soon:`,
          fields: notifications.map(deployment => ({
            title: deployment.name,
            value: `Age: ${deployment.age_days} days | Reason: ${deployment.reason}`,
            short: true
          }))
        }
      ]
    };

    try {
      const response = await fetch(this.config.notifications.slack.webhook, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(message)
      });

      if (response.ok) {
        this.logger.info('‚úÖ Slack notification sent successfully');
      } else {
        this.logger.error(`‚ùå Slack notification failed: ${response.status}`);
      }
    } catch (error) {
      this.logger.error(`‚ùå Failed to send Slack notification: ${error.message}`);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ GitHub
   */
  async sendGitHubNotification(notifications) {
    if (!this.config.notifications.github.token) {
      this.logger.warn('‚ö†Ô∏è  GitHub token not configured');
      return;
    }

    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ GitHub
    // –ù–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–∑–¥–∞–Ω–∏–µ issue –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    this.logger.info('üîß GitHub notifications would be sent here');
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–µ–ø–ª–æ–π –∑–∞—â–∏—â–µ–Ω–Ω—ã–º
   */
  isProtectedDeployment(deployment) {
    const name = deployment.name?.toLowerCase() || '';
    const url = deployment.url?.toLowerCase() || '';
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –∏–º–µ–Ω–∏
    for (const pattern of this.protectedPatterns) {
      if (name.includes(pattern) || url.includes(pattern)) {
        return true;
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Ç–µ–≥–∞–º
    if (deployment.tags) {
      for (const tag of deployment.tags) {
        if (this.protectedPatterns.includes(tag.toLowerCase())) {
          return true;
        }
      }
    }
    
    return false;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–µ–ø–ª–æ–π –∞–∫—Ç–∏–≤–Ω—ã–º
   */
  isActiveDeployment(deployment) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    if (deployment.usage?.users > this.config.exclusions.activeUsersThreshold) {
      return true;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–µ–¥–∞–≤–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã
    if (deployment.usage?.requests > this.config.exclusions.requestsThreshold) {
      return true;
    }
    
    return false;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å PR
   */
  getPRStatus(deployment) {
    if (deployment.payload?.pr_state) {
      return deployment.payload.pr_state;
    }
    
    if (deployment.name?.includes('merged')) {
      return 'merged';
    }
    
    if (deployment.name?.includes('closed')) {
      return 'closed';
    }
    
    return 'open';
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç –¥–µ–ø–ª–æ—è –≤ –¥–Ω—è—Ö
   */
  calculateAgeInDays(createdAt) {
    const created = new Date(createdAt);
    const now = new Date();
    const diffTime = Math.abs(now - created);
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    return diffDays;
  }

  /**
   * –í—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
   */
  printResults() {
    console.log('\nüìä Enhanced Cleanup Results:');
    console.log(`  Total Deployments: ${this.results.summary.total}`);
    console.log(`  To Delete: ${this.results.summary.to_delete}`);
    console.log(`  To Keep: ${this.results.summary.to_keep}`);
    console.log(`  Protected: ${this.results.summary.protected}`);
    console.log(`  Notifications Needed: ${this.results.summary.notifications}`);

    if (this.results.deployments_to_delete.length > 0) {
      console.log('\nüóëÔ∏è  Deployments to Delete:');
      this.results.deployments_to_delete.forEach(deployment => {
        console.log(`  - ${deployment.name} (${deployment.age_days} days old) - ${deployment.reason}`);
      });
    }

    if (this.results.protected_deployments.length > 0) {
      console.log('\nüõ°Ô∏è  Protected Deployments:');
      this.results.protected_deployments.forEach(deployment => {
        console.log(`  - ${deployment.name} (${deployment.age_days} days old)`);
      });
    }

    if (this.results.notifications_needed.length > 0) {
      console.log('\nüì¢ Notifications Needed:');
      this.results.notifications_needed.forEach(deployment => {
        console.log(`  - ${deployment.name} (${deployment.age_days} days old)`);
      });
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—á–µ—Ç
   */
  saveReport() {
    const reportPath = this.config.reporting.path;
    
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const reportDir = path.dirname(reportPath);
    if (!fs.existsSync(reportDir)) {
      fs.mkdirSync(reportDir, { recursive: true });
    }
    
    fs.writeFileSync(reportPath, JSON.stringify(this.results, null, 2));
    this.logger.info(`üíæ Report saved to: ${reportPath}`);
  }
}

// CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
if (require.main === module) {
  const args = process.argv.slice(2);
  const options = {};
  
  // –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
  for (let i = 0; i < args.length; i++) {
    const arg = args[i];
    if (arg.startsWith('--')) {
      const key = arg.substring(2);
      const nextArg = args[i + 1];
      
      if (nextArg && !nextArg.startsWith('--')) {
        options[key] = nextArg;
        i++;
      } else {
        options[key] = true;
      }
    }
  }
  
  // –ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏
  const cleaner = new EnhancedCleanupPreviewDeployments(options);
  cleaner.cleanup().catch(console.error);
}

module.exports = EnhancedCleanupPreviewDeployments;