#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–æ—Ç–∞—Ü–∏–∏ —Å–µ–∫—Ä–µ—Ç–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ
 */

import fs from 'fs';
import path from 'path';
import crypto from 'crypto';

class SecretsRotator {
  constructor() {
    this.envFilePath = ".env";
    this.envExamplePath = ".env.example";
    this.backupDir = "backups";
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å–µ–∫—Ä–µ—Ç
   */
  generateSecret(length = 64) {
    return crypto.randomBytes(length).toString("hex");
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç JWT —Å–µ–∫—Ä–µ—Ç
   */
  generateJWTSecret() {
    return crypto.randomBytes(32).toString("base64");
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é .env —Ñ–∞–π–ª–∞
   */
  createBackup() {
    if (!fs.existsSync(this.envFilePath)) {
      console.log(
        "‚ö†Ô∏è  .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –ø—Ä–æ–ø—É—â–µ–Ω–æ"
      );
      return null;
    }

    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –±—ç–∫–∞–ø–æ–≤ –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
    if (!fs.existsSync(this.backupDir)) {
      fs.mkdirSync(this.backupDir, { recursive: true });
    }

    const timestamp = new Date().toISOString().replace(/[:.]/g, "-");
    const backupPath = path.join(this.backupDir, `env-backup-${timestamp}.env`);

    fs.copyFileSync(this.envFilePath, backupPath);
    console.log(`‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: ${backupPath}`);

    return backupPath;
  }

  /**
   * –ß–∏—Ç–∞–µ—Ç .env —Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏
   */
  readEnvFile(filePath) {
    if (!fs.existsSync(filePath)) {
      return {};
    }

    const content = fs.readFileSync(filePath, "utf8");
    const vars = {};

    content.split("\n").forEach((line) => {
      line = line.trim();
      if (line && !line.startsWith("#") && line.includes("=")) {
        const [key, ...valueParts] = line.split("=");
        vars[key.trim()] = valueParts
          .join("=")
          .trim()
          .replace(/^["']|["']$/g, "");
      }
    });

    return vars;
  }

  /**
   * –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ .env —Ñ–∞–π–ª
   */
  writeEnvFile(filePath, vars) {
    const lines = [];

    // –ß–∏—Ç–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    if (fs.existsSync(filePath)) {
      const originalLines = fs.readFileSync(filePath, "utf8").split("\n");
      let currentSection = "";

      originalLines.forEach((line) => {
        line = line.trimEnd();

        if (line.startsWith("#") || line === "") {
          lines.push(line);
        } else if (line.includes("=")) {
          const [key, ...valueParts] = line.split("=");
          const keyTrimmed = key.trim();

          if (Object.prototype.hasOwnProperty.call(vars, keyTrimmed)) {
            const value = vars[keyTrimmed];
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏
            const quote = line.includes('"')
              ? '"'
              : line.includes("'")
              ? "'"
              : "";
            lines.push(`${keyTrimmed}=${quote}${value}${quote}`);
          } else {
            lines.push(line);
          }
        } else {
          lines.push(line);
        }
      });
    } else {
      // –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ –∏–∑ .env.example
      const exampleVars = this.readEnvFile(this.envExamplePath);
      Object.keys(exampleVars).forEach((key) => {
        if (Object.prototype.hasOwnProperty.call(vars, key)) {
          lines.push(`${key}="${vars[key]}"`);
        } else {
          lines.push(`${key}="${exampleVars[key]}"`);
        }
      });
    }

    fs.writeFileSync(filePath, lines.join("\n") + "\n");
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫–∞–∫–∏–µ —Å–µ–∫—Ä–µ—Ç—ã –Ω—É–∂–Ω–æ —Ä–æ—Ç–∏—Ä–æ–≤–∞—Ç—å
   */
  getSecretsToRotate() {
    return [
      { key: "NEXTAUTH_SECRET", generator: () => this.generateSecret() },
      { key: "JWT_SECRET", generator: () => this.generateJWTSecret() },
      {
        key: "UPSTASH_REDIS_REST_TOKEN",
        generator: () => this.generateSecret(32),
      },
      // –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ —Å–µ–∫—Ä–µ—Ç—ã –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    ];
  }

  /**
   * –†–æ—Ç–∏—Ä—É–µ—Ç —Å–µ–∫—Ä–µ—Ç—ã
   */
  rotate() {
    console.log("üîÑ –ù–∞—á–∞–ª–æ —Ä–æ—Ç–∞—Ü–∏–∏ —Å–µ–∫—Ä–µ—Ç–æ–≤...");

    try {
      // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
      const backupPath = this.createBackup();

      // –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
      const currentVars = this.readEnvFile(this.envFilePath);

      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–µ–∫—Ä–µ—Ç–æ–≤ –¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏
      const secretsToRotate = this.getSecretsToRotate();

      // –†–æ—Ç–∏—Ä—É–µ–º —Å–µ–∫—Ä–µ—Ç—ã
      let rotatedCount = 0;
      secretsToRotate.forEach(({ key, generator }) => {
        if (Object.prototype.hasOwnProperty.call(currentVars, key)) {
          const oldValue = currentVars[key];
          const newValue = generator();
          currentVars[key] = newValue;

          console.log(`üîÑ ${key}: ***ROTATED***`);
          rotatedCount++;
        }
      });

      if (rotatedCount === 0) {
        console.log("‚ÑπÔ∏è  –ù–µ—Ç —Å–µ–∫—Ä–µ—Ç–æ–≤ –¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏");
        return;
      }

      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
      this.writeEnvFile(this.envFilePath, currentVars);

      console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–æ—Ç–∏—Ä–æ–≤–∞–Ω–æ ${rotatedCount} —Å–µ–∫—Ä–µ—Ç–æ–≤`);
      console.log(
        "‚ö†Ô∏è  –ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å–µ–∫—Ä–µ—Ç—ã –≤–æ –≤—Å–µ—Ö —Å—Ä–µ–¥–∞—Ö —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"
      );

      return true;
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–æ—Ç–∞—Ü–∏–∏ —Å–µ–∫—Ä–µ—Ç–æ–≤:", error.message);
      return false;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—É—â–∏–µ —Å–µ–∫—Ä–µ—Ç—ã –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
   */
  validate() {
    console.log("üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–æ–≤ –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å...");

    try {
      const currentVars = this.readEnvFile(this.envFilePath);
      const issues = [];

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–µ–∫—Ä–µ—Ç–æ–≤
      const secretKeys = [
        "NEXTAUTH_SECRET",
        "JWT_SECRET",
        "UPSTASH_REDIS_REST_TOKEN",
      ];

      secretKeys.forEach((key) => {
        if (currentVars[key]) {
          const secret = currentVars[key];
          if (secret.length < 32) {
            issues.push(
              `${key}: –°–µ–∫—Ä–µ—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (${secret.length} —Å–∏–º–≤–æ–ª–æ–≤)`
            );
          }

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–ª–∞–±—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
          if (
            secret.includes("your-") ||
            secret.includes("secret") ||
            secret.includes("key")
          ) {
            issues.push(`${key}: –°–µ–∫—Ä–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–∏–∫—Ç–∏–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ`);
          }

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã
          if (/^1+$|^0+$|^a+$|^f+$/i.test(secret)) {
            issues.push(`${key}: –°–µ–∫—Ä–µ—Ç —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–∏–º–≤–æ–ª–æ–≤`);
          }
        }
      });

      if (issues.length > 0) {
        console.log("‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ–∫—Ä–µ—Ç–∞–º–∏:");
        issues.forEach((issue) => console.log(`   - ${issue}`));
        return false;
      } else {
        console.log("‚úÖ –í—Å–µ —Å–µ–∫—Ä–µ—Ç—ã –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É");
        return true;
      }
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–µ–∫—Ä–µ—Ç–æ–≤:", error.message);
      return false;
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  const rotator = new SecretsRotator();

  const args = process.argv.slice(2);

  if (args.includes("--validate") || args.includes("-v")) {
    rotator.validate();
  } else if (args.includes("--help") || args.includes("-h")) {
    console.log(`
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node scripts/rotate-secrets.js [–æ–ø—Ü–∏–∏]

–û–ø—Ü–∏–∏:
  --rotate, -r    –†–æ—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–µ–∫—Ä–µ—Ç—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
  --validate, -v  –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–∫—Ä–µ—Ç—ã –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
  --help, -h      –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü—Ä–∏–º–µ—Ä—ã:
  node scripts/rotate-secrets.js          # –†–æ—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–µ–∫—Ä–µ—Ç—ã
  node scripts/rotate-secrets.js --validate  # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–∫—Ä–µ—Ç—ã
    `);
  } else {
    rotator.rotate();
  }
}

module.exports = SecretsRotator;
