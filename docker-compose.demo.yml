version: "3.8"

# DEMO ENVIRONMENT FOR SALES PRESENTATIONS
# This configuration creates a staging environment with pre-loaded demo data
# for showcasing NormalDance platform capabilities to investors and partners

services:
  # üåê Demo Frontend (staging mode)
  demo-frontend:
    build:
      context: .
      dockerfile: docker/nextjs.Dockerfile
      target: production
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://demo:demopass@demo-postgres:5432/normaldance_demo
      - REDIS_URL=redis://demo-redis:6379
      - BACKEND_URL=http://demo-backend:8080
      - IPFS_SERVICE_URL=http://demo-ipfs:8080
      - NEXT_PUBLIC_APP_URL=http://localhost:3001
      - NEXT_PUBLIC_WS_URL=ws://localhost:3001
      - NEXT_PUBLIC_DEMO_MODE=true
      - NEXT_PUBLIC_DISABLE_ANALYTICS=true
    ports:
      - "3001:3000"
    volumes:
      - demo_frontend_logs:/app/logs
    depends_on:
      demo-postgres:
        condition: service_healthy
      demo-redis:
        condition: service_started
    networks:
      - demo
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # üöÄ Demo Backend API (with demo data)
  demo-backend:
    build:
      context: .
      dockerfile: docker/backend.Dockerfile
    ports:
      - "8081:8080"
    environment:
      - NODE_ENV=demo
      - DATABASE_URL=postgresql://demo:demopass@demo-postgres:5432/normaldance_demo
      - REDIS_URL=redis://demo-redis:6379
      - JWT_SECRET=demo-jwt-secret-for-showcase-only-change-in-production
      - SOLANA_RPC_URL=https://api.devnet.solana.com
      - IPFS_GATEWAY_URL=http://demo-ipfs:8080
      - FRONTEND_URL=http://demo-frontend:3000
      - DEMO_MODE=true
      - ALLOW_DEMO_WALLETS=true
    volumes:
      - demo_backend_logs:/app/logs
      - demo_uploads:/app/uploads
    depends_on:
      demo-postgres:
        condition: service_healthy
      demo-redis:
        condition: service_started
      demo-ipfs:
        condition: service_started
    networks:
      - demo
    restart: unless-stopped

  # üåê Demo IPFS Node (pre-loaded with demo content)
  demo-ipfs:
    build:
      context: .
      dockerfile: docker/ipfs-service.Dockerfile
    ports:
      - "8082:8080" # HTTP Gateway
      - "5002:5001" # HTTP API
    environment:
      - NODE_ENV=demo
      - IPFS_PATH=/data/ipfs
    volumes:
      - demo_ipfs_data:/data/ipfs
      - demo_ipfs_logs:/app/logs
    networks:
      - demo
    restart: unless-stopped

  # üóÑÔ∏è Demo PostgreSQL (pre-loaded with sample data)
  demo-postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=normaldance_demo
      - POSTGRES_USER=demo
      - POSTGRES_PASSWORD=demopass
    ports:
      - "5433:5432"
    volumes:
      - demo_postgres_data:/var/lib/postgresql/data
      - ./demo/demo-init.sql:/docker-entrypoint-initdb.d/01-demo-init.sql
      - ./demo/demo-data.sql:/docker-entrypoint-initdb.d/02-demo-data.sql
      - ./demo/demo-seed.sql:/docker-entrypoint-initdb.d/03-demo-seed.sql
    networks:
      - demo
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U demo -d normaldance_demo"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ‚ö° Demo Redis Cache
  demo-redis:
    image: redis:7-alpine
    ports:
      - "6380:6379"
    volumes:
      - demo_redis_data:/data
    networks:
      - demo
    restart: unless-stopped

  # üìä Demo Monitoring Stack (optional for demos)
  demo-prometheus:
    image: prom/prometheus:latest
    ports:
      - "9091:9090"
    volumes:
      - ./demo/prometheus-demo.yml:/etc/prometheus/prometheus.yml:ro
      - demo_prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.enable-lifecycle"
    networks:
      - demo
    profiles:
      - monitoring

  demo-grafana:
    image: grafana/grafana:latest
    ports:
      - "3002:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_DEMO_PASSWORD:-demo123}
      - GF_SECURITY_ADMIN_USER=demo
    volumes:
      - demo_grafana_data:/var/lib/grafana
    depends_on:
      - demo-prometheus
    networks:
      - demo
    profiles:
      - monitoring

volumes:
  # Demo Data volumes
  demo_postgres_data:
    driver: local
  demo_redis_data:
    driver: local
  demo_ipfs_data:
    driver: local

  # Demo Logs
  demo_frontend_logs:
    driver: local
  demo_backend_logs:
    driver: local
  demo_ipfs_logs:
    driver: local

  # Demo uploads
  demo_uploads:
    driver: local

  # Demo monitoring
  demo_prometheus_data:
    driver: local
  demo_grafana_data:
    driver: local

networks:
  demo:
    driver: bridge
    ipam:
      config:
        - subnet: 172.30.0.0/16
# ===========================================
# QUICK START COMMANDS FOR DEMO
# ===========================================
#
# Start basic demo (frontend + backend + DB):
#   docker compose -f docker-compose.demo.yml up -d demo-frontend demo-backend demo-postgres demo-redis demo-ipfs
#
# Start full demo with monitoring:
#   docker compose -f docker-compose.demo.yml --profile monitoring up -d
#
# Load fresh demo data:
#   docker compose -f docker-compose.demo.yml exec demo-postgres psql -U demo -d normaldance_demo -f /docker-entrypoint-initdb.d/02-demo-data.sql
#
# Access points:
# - Frontend: http://localhost:3001
# - API: http://localhost:8081
# - IPFS Gateway: http://localhost:8082
# - Monitoring (if enabled): http://localhost:3002 (admin/demo123)
#
# Demo accounts:
# - Artist: artist@demo.local / demo123
# - Listener: listener@demo.local / demo123
# - Admin: admin@demo.local / admin123
